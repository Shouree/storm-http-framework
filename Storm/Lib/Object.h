#pragma once
#include "Auto.h"
#include "Lib/Bool.h"

namespace storm {

	class Type;
	class Str;

	STORM_PKG(core);

	/**
	 * Since all classes inherited from Object follow this pattern:
	 * Foo *foo = new (Foo::type(engine)) Foo(10);
	 * Foo *foo = new (Foo::type(otherObject)) Foo(10);
	 * We can use the CREATE-macro instead:
	 * Foo *foo = CREATE(Foo, engine, 10);
	 * Foo *foo = CREATE(Foo, otherObject, 10);
	 */
#define CREATE(tName, eRef, ...) \
	new (tName::type(eRef)) tName(__VA_ARGS__)

	/**
	 * The root object that all non-value objects inherit
	 * from. This class contains the logic for the central
	 * reference counting mechanism among other things.
	 * These are designed to be manipulated through pointer,
	 * and is therefore not copyable using regular C++ methods.
	 *
	 * Rules for the ref-counting:
	 * When returning Object*s, the caller has the responsibility
	 * to release one reference. Ie, the caller has ownership of one reference.
	 * Function parameters are freed by the called function. Hint: use Auto<>!
	 */
	class Object : public Printable {
		STORM_CLASS;
	public:
		// Initialize object to 1 reference.
		Object();

		virtual ~Object();

		// The type of this object.
		Type *const myType;

		// Get the engine somehow.
		Engine &engine() const;

		// This one is used to detect the presence of custom casting. Do not remove/rename!
		bool isA(Type *o) const;

		// Add reference.
		inline void addRef() {
			if (this)
				atomicIncrement(refs);
		}

		// Release reference.
		inline void release() {
			if (this)
				if (atomicDecrement(refs) == 0)
					delete this;
		}

		// Our specialized operator new(). Allocates memory for the Type provided,
		// regardless of the size here. Ie, the allocated size may be >= sizeof(obj).
		static void *operator new (size_t size, Type *type);

		// Matching delete.
		static void operator delete(void *ptr, Type *type);
		static void operator delete(void *ptr);

		// NOTE: these will simply assert, not possible to implement right now.
		static void *operator new[] (size_t size, Type *type);
		static void operator delete[](void *ptr);

		/**
		 * Members all objects are assumed to contain:
		 * These will probably be auto-generated by some part of the compiler.
		 */

		// To string.
		virtual Str *STORM_FN toS();

		// Compare for equality.
		virtual Bool STORM_FN equals(Auto<Object> o);

		// Dump leaks.
		static void dumpLeaks();
	protected:
		virtual void output(wostream &to) const;

		static void *allocDumb(Engine &e, size_t size);

		// Placement new, for the first type.
		static inline void *operator new(size_t size, void *mem) { return mem; }
		static inline void operator delete(void *z, void *mem) { /* if this is ever executed z == mem */ }

	private:
		Object(const Object &o);
		Object &operator =(const Object &o);

		// Current number of references.
		nat refs;
	};

	// Release (sets to null as well!)
	inline void release(Object *&o) {
		o->release();
		o = null;
	}

	// Release collection.
	template <class T>
	void releaseVec(T &v) {
		for (T::iterator i = v.begin(); i != v.end(); ++i) {
			(*i)->release();
		}
		v.clear();
	}

	// Release map.
	template <class T>
	void releaseMap(T &v) {
		for (T::iterator i = v.begin(); i != v.end(); ++i)
			i->second->release();
		v.clear();
	}

}

// Custom as<> implementation.
template <class To>
To *customAs(storm::Object *from) {
	if (from == null)
		return null;
	if (from->isA(To::type(from->engine())))
		return static_cast<To*>(from);
	return null;
}

template <class To>
To *customAs(const storm::Object *from) {
	if (from == null)
		return null;
	if (from->isA(To::type(from->engine())))
		return static_cast<To*>(from);
	return null;
}


