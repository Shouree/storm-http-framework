#pragma once
#include "Shared/BuiltIn.h"
#include "Shared/Auto.h"

namespace storm {
	class Engine;
	class Package;
	class Type;
	class Function;
	class NamedThread;

	/**
	 * Loader class to load definitions generated by the preprocessor.
	 * Typical process:
	 * loadThreads()
	 * loadTypes()
	 * loadFunctions()
	 * loadVariables()
	 *
	 * Note: It is possible to partially initialize 'to' passed to the ctor.
	 * Note: 'rootPkg' may be null until after 'createTypes' is called. This happens during startup.
	 */
	class BuiltInLoader : NoCopy {
	public:
		// List of built-in functions.
		typedef vector<Auto<Type>> TypeList;

		// Create. 'to' will be updated with the loaded types.
		BuiltInLoader(Engine &e, TypeList &to, const BuiltIn &from, Package *rootPkg);

		// Compute the maxium vtable size needed here.
		nat vtableCapacity();

		// Load threads.
		void loadThreads();

		// Load types. Assumes threads are loaded.
		void loadTypes();

		// Alternative load types in two steps. First 'createTypes', then 'finalizeTypes'.
		void createTypes();

		// Assumes threads are loaded.
		void finalizeTypes();

		// Assumes threads and types are loaded.
		void loadFunctions();

		// Assumes types are loaded.
		void loadVariables();

		// Set root package (for use during startup).
		void setRoot(Package *root);

	private:
		Engine &e;

		// Types.
		TypeList &types;

		// Source.
		const BuiltIn &src;

		// Root package.
		Package *root;

		// Loaded threads.
		vector<Auto<NamedThread>> threads;

		// Remember any types that want their member functions copied from another type.
		// Map from source to [targets].
		typedef map<Type *, vector<Type *>> CopyMembers;
		CopyMembers copyMembers;

		// Find a package relative our root.
		Package *findPkg(const String &pkg);

		// Create a member function.
		Function *createFn(const BuiltInFunction &fn, Type *memberOf);

		// Insert a member function.
		void addFn(const BuiltInFunction &fn, Type *into);
		void addFn(const BuiltInFunction &fn, Package *into);

		// Insert a variable.
		void addVar(const BuiltInVar &var, Type *into);
	};

}
