use core;
use core:debug;

// Declare a named thread. Threads are a special kind of global variables, since
// the compiler have to impose stricter checks on threads compared to regular global
// variables. For example, a named thread may not mutate like a global variable may do
// in some cases during updates. This would break thread-safety.
thread Other;

// Should be able to access threads as regular values.
Thread getThread() {
	Other;
}

Thread getCompilerThread() {
	Compiler;
}

Int postInt() {
	otherIntFn(1);
}

Int otherIntFn(Int v) on Other {
	8 + v;
}

Int postDbgVal() {
	DbgVal val(10);
	otherDbgValFn(val);
}

Int otherDbgValFn(DbgVal v) on Other {
	8 + v.get;
}

Int postObject() {
	CloneDerived d;
	CloneDerived z = otherObjectFn(d);
    // Should be 13. d is copied 2 times.
	if (disjoint(d, z)) {
		z.c;
	} else {
		0;
	}
}

CloneDerived otherObjectFn(CloneDerived o) on Other {
	o.c = o.c + o.a + o.b.get;
	o;
}

// Try with a value as well!
value ThreadVal {
	CloneDerived v;
	DbgVal z;

	ctor() {
		init() {
			z = 10;
			v();
		}
	}

}

Int postVal() {
	ThreadVal v;
	ThreadVal r = otherValFn(v);
	if (disjoint(v.v, r.v)) {
		r.v.c + r.z.get;
	} else {
		0;
	}
}

ThreadVal otherValFn(ThreadVal v) on Other {
	v.v = otherObjectFn(v.v);
	v.z.set(20);
	v;
}


class ThreadObj on Other {
	Int v;

	Int get() {
		v;
	}

	void set(Int z) {
		v = z;
	}
}

// This would not work unless 'o' is a threaded object.
void setValue(ThreadObj o) on Other {
	o.set(20);
}

void setValue(DbgActor o, Int to) on Other {
	o.set(to);
}

Int findValue(ThreadObj o) on Other {
	o.get;
}

Int findValue(DbgActor o) on Other {
	o.get;
}

Int threadObj() {
	ThreadObj z;
	setValue(z);
	findValue(z);
}

Int threadActor() {
	DbgActor a(10);
	setValue(a, 20);
	findValue(a);
}
