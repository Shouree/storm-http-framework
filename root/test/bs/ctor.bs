use core:debug;

class CtorClass {

	Int a;
	Dbg b;

	ctor() {
		init() {
			a = 20;
			b = 30;
		}
	}

	ctor(Dbg d) {
		init() {
			a = 20;
			b = d;
		}
	}

	ctor(Int a) {
		init() {
			a = a;
			b = a * 2;
		}
	}

}


Int ctorTest() {
	CtorClass c;
	c.a + c.b.get;
}

Int ctorTest(Int v) {
	CtorClass c(v);
	c.a + c.b.get;
}

Int ctorTestDbg(Int v) {
	Dbg dbg(v);
	CtorClass c(dbg);
	if (same(dbg, c.b)) {
		c.a + c.b.get;
	} else {
		0;
	}
}

class CtorBase {

	Int base;

	ctor(Int v) {
		init() { base = v; }
	}

	Int value() {
		base;
	}

}

class CtorDerived extends CtorBase {

	Int der;

	ctor(Int a, Int b) {
		init(a) { der = b; }
		// comments here should work!
	}

	ctor(Int a) {
		init(1) { der = 1; }
		// This is broken, it should not compile.
		this = CtorDerived(a, a);
	}

	Int value() {
		super:value + der;
	}

	Int brokenValue() {
		// This should not even compile!
		this = CtorDerived(1, 2);
		base + der;
	}

}


Int ctorDerTest(Int v) {
	CtorDerived z(v, v * 2);
	z.value;
}

Int ctorErrorTest() {
	CtorDerived z(4);
	z.value;
}

Int memberAssignErrorTest() {
	CtorDerived z(3, 4);
	z.brokenValue;
}
