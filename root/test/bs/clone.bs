use core;
use core:debug;

// Test some object cloning!

value CloneVal {
	Dbg z;

	ctor() {
		init() {
			z = 8;
		}
	}
}

// Base class for cloning.
class CloneBase {
	Int a;
	Dbg b;
	CloneVal v;

	ctor() {
		init() {
			a = 2;
			b = 3;
		}
	}

}

// Derived class for cloning.
class CloneDerived extends CloneBase {
	Int c;

	ctor() {
		init() {
			c = 4;
		}
	}

	ctor(CloneDerived o) {
		init(o) {
			c = o.c + 1;
		}
	}

	void deepCopy(CloneEnv e) {
		super:deepCopy(e);
		c++;
	}
}

Bool testClone() {
	CloneBase a;
	CloneBase c = clone(a);
	disjoint(a, c);
}

Bool testCloneDerived() {
	CloneDerived a;
	CloneDerived c = a.clone;
	disjoint(a, c) & (c.c == 6);
}

Bool testCloneValue() {
	CloneVal a;
	CloneVal b = a.clone;
	disjoint(a.z, b.z);
}
