use lang:bs;
use lang:bs:macro;
use core:io;

/**
 * Serializable class.
 */
class Data : persist {
	Int a;
	Int b;
	Employee data1;
	Employee data2;

	init() {
		init() {
			a = 5;
			b = 8;
			data1 = Employee();
			data2 = Manager();
		}
	}

	void toS(StrBuf to) {
		to << "{ a: " << a << ", b: " << b << ", data1: " << data1 << ", data2: " << data2 << " }";
	}

	SerializedType serializedType() : static {
		// NOTE: Should only be done once!
		SerializedStdType desc(named{Data}, &__init(Data, ObjIStream));
		desc.add("a", named{core:Int});
		desc.add("b", named{core:Int});
		desc.add("data1", named{Employee});
		desc.add("data2", named{Employee});

		desc;
	}

	// Write. Should be automatically generated...
	void write(ObjOStream to) {
		SerializedType desc = serializedType();
		if (to.startObject(desc, this)) {
			a.write(to);
			b.write(to);
			data1.write(to);
			data2.write(to);
			to.end();
		}
	}

	// Write the members in another order. Should still be readable by 'read'.
	void writeShuffled(ObjOStream to) {
		SerializedStdType desc(named{Data}, &__init(Data, ObjIStream));
		desc.add("b", named{core:Int});
		desc.add("data2", named{Employee});
		desc.add("a", named{core:Int});
		desc.add("data1", named{Employee});

		if (to.startObject(desc, this)) {
			b.write(to);
			data2.write(to);
			a.write(to);
			data1.write(to);
			to.end();
		}
	}

	// Read. Should be automatically generated...
	Data read(ObjIStream from) : static {
		Object r = from.readObject(named{Data});
		if (r as Data) {
			r;
		} else {
			// Note: This case never happens.
			Data();
		}
	}

	// Read. Should be automatically generated...
	protected init(ObjIStream from) {
		// Should be done when inheritance is present.
		// super(from);

		var a = Int:read(from);
		var b = Int:read(from);
		var data1 = Employee:read(from);
		var data2 = Employee:read(from);

		init {
			a = a;
			b = b;
			data1 = data1;
			data2 = data2;
		}

		from.end();
	}
}

/**
 * Another serializable class.
 */
class Employee {
	Str name;
	Int coolness;

	init() {
		init() { name = "John Smith"; coolness = 500; }
	}

	void toS(StrBuf to) {
		to << "Employee: { name: " << name << ", coolness: " << coolness << " }";
	}

	SerializedType serializedType() : static {
		// NOTE: Should only be done once!
		SerializedStdType desc(named{Employee}, &__init(Employee, ObjIStream));
		desc.add("name", named{Str});
		desc.add("coolness", named{Int});
		desc;
	}

	void write(ObjOStream to) {
		if (to.startObject(serializedType(), this)) {
			name.write(to);
			coolness.write(to);
			to.end();
		}
	}

	Employee read(ObjIStream from) : static {
		Object r = from.readObject(named{Employee});
		if (r as Employee)
			r;
		else
			Employee();
	}

	protected init(ObjIStream from) {
		// super(from);

		var name = Str:read(from);
		var coolness = Int:read(from);

		init {
			name = name;
			coolness = coolness;
		}

		from.end();
	}
}

/**
 * A sub-class to Employee.
 */
class Manager extends Employee {
	Str title;

	init() {
		init() { title = "Executive"; }
		name = "Mr. " # name;
		coolness *= 10;
	}

	void toS(StrBuf to) {
		to << "Manager: { name: " << name << ", coolness: " << coolness << ", title: " << title << " }";
	}

	SerializedType serializedType() : static {
		SerializedStdType desc(named{Manager}, &__init(Manager, ObjIStream), Employee:serializedType);
		desc.add("title", named{Str});
		desc;
	}

	void write(ObjOStream to) {
		if (to.startObject(serializedType(), this)) {
			super:write(to);
			title.write(to);
			to.end();
		}
	}

	Manager read(ObjIStream from) : static {
		Object r = from.readObject(named{Manager});
		if (r as Manager)
			r;
		else
			Manager();
	}

	protected init(ObjIStream from) {
		super(from);

		var title = Str:read(from);

		init {
			title = title;
		}

		from.end();
	}
}


// Persist decorator
void persist(Class c) {
	print("Decorator: " # c);
}

// Deserialize things.
void deserialize(MemOStream from) {
	{
		MemIStream in(from.buffer);
		util:TextObjStream read(in);
		print("Result: " # read.read());
	}

	{
		MemIStream in(from.buffer);
		ObjIStream read(in);
		print("Deserialization: " # Data:read(read));
	}
}

// Test serialization.
void testSerialize() {
	Data x;

	{
		MemOStream out;
		ObjOStream obj(out);
		x.write(obj);
		deserialize(out);
	}

	print("Shuffled output:");

	{
		MemOStream out;
		ObjOStream obj(out);
		x.writeShuffled(obj);
		deserialize(out);
	}
}
