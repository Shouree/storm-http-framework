use lang:bs;
use lang:bs:macro;
use core:io;

/**
 * Serializable class.
 */
class Data : persist {
	Int a;
	Int b;
	Employee data1;
	Employee data2;

	init() {
		init() {
			a = 5;
			b = 8;
			data1 = Employee();
			data2 = Manager();
		}
	}

	void toS(StrBuf to) {
		to << "{ a: " << a << ", b: " << b << " data1: " << data1 << " data2: " << data2 << " }";
	}

	SerializedType serializedDesc() : static {
		// NOTE: Should only be done once!
		SerializedType desc(named{Data});
		desc.add("a", named{core:Int});
		desc.add("b", named{core:Int});
		// desc.add("data1", named{Employee});
		// desc.add("data2", named{Employee});
		desc;
	}

	// Write. Should be automatically generated...
	void write(ObjOStream to) {
		SerializedType desc = serializedDesc();
		if (to.startObject(desc, this)) {
			a.write(to);
			b.write(to);
			// data1.write(to);
			// data2.write(to);
			to.end();
		}
	}

	// Read. Should be automatically generated...
	Data read(ObjIStream from) : static {
		Object? r = from.startObject(serializedDesc());
		if (r as Data)
			r;
		else
			Data(from);
	}

	// Read. Should be automatically generated...
	private init(ObjIStream from) {
		// Should be done when inheritance is present.
		// super(from);

		var a = Int:read(from);
		var b = Int:read(from);
		// var data1 = Employee:read(from);
		// var data2 = Employee:read(from);

		init {
			a = a;
			b = b;
			// data1 = data1;
			// data2 = data2;
		}

		from.end();
	}
}

/**
 * Another serializable class.
 */
class Employee {
	Str name;
	Int coolness;

	init() {
		init() { name = "John Smith"; coolness = 500; }
	}

	SerializedType serializedDesc() : static {
		// NOTE: Should only be done once!
		SerializedType desc(named{Employee});
		desc.add("name", named{Str});
		desc.add("coolness", named{Int});
		desc;
	}

	void write(ObjOStream to) {
		if (to.startObject(serializedDesc(), this)) {
			name.write(to);
			coolness.write(to);
			to.end();
		}
	}
}

/**
 * A sub-class to Employee.
 */
class Manager extends Employee {
	Str title;

	init() {
		init() { title = "Executive"; }
		name = "Mr. " # name;
		coolness *= 10;
	}

	void write(ObjOStream to) {
		SerializedType desc(named{Manager}, Employee:serializedDesc);
		desc.add("title", named{Str});
		if (to.startObject(desc, this)) {
			super:write(to);
			title.write(to);
			to.end();
		}
	}
}


// Persist decorator
void persist(Class c) {
	print("Decorator: " # c);
}

// Test serialization.
void testSerialize() {
	Data x;
	MemOStream out;
	ObjOStream obj(out);

	x.write(obj);
	print("Raw data\n" # out);

	{
		MemIStream in(out.buffer);
		util:TextObjStream read(in);
		print("Result: " # read.read());
	}

	{
		MemIStream in(out.buffer);
		ObjIStream read(in);
		print("Deserialization: " # Data:read(read));
	}
}
