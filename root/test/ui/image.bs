use ui;
use graphics;
use core:geometry;
use core:io;

class ImageViewer extends Frame {
	Window image;
	Button[] select;
	ImagePainter paint;

	init() {
		Str[] names = [
			"ui_alpha.png", "ui_alpha.bmp", "ui_alpha-16.bmp", "ui_pattern.png",
			"tree.jpg",
			"tree-24.bmp", "tree-32.bmp", "tree-16-565.bmp", "tree-16-555.bmp", "tree-8.bmp", "tree-4.bmp", "tree-1.bmp",
			"flower-ascii.ppm", "flower-raw.ppm", "tree-1.pbm"
		];
		Float buttonHeight = 50;

		init("Image viewer", Size(400, 300.float + ((names.count + 2) / 3).int.float*buttonHeight)) {}

		image.painter(paint);
		add(image);

		for (id, f in names) {
			Button b(f);
			b.onClick = &this.chooseImage(Button);
			select.push(b);
			add(b);
		}

		create();
	}

	void resized(Size size) {
		Float buttonHeight = 50;
		Float buttonWidth = (size.w - 10) / 3;
		Float buttonsH = ((select.count + 2) / 3).int.float*buttonHeight;
		Float buttonsStart = size.h - buttonsH;

		image.pos(Rect(10, 10, size.w - 10, buttonsStart - 10));

		for (id, b in select) {
			Float x = (id % 3).int.float*buttonWidth + 10;
			Float y = (id / 3).int.float*buttonHeight + buttonsStart;
			b.pos(Rect(x, y, x + buttonWidth - 10, y + buttonHeight - 10));
		}
	}

	void chooseImage(Button x) {
		Url url = resUrl / x.text;
		print("Loading " + url.toS);
		paint.show(url.loadImage);
		image.repaint();
	}
}

class ImagePainter extends Painter {
	Bitmap? picture;

	init() {
		init();
		bgColor = Color(0.5, 0.5, 0.5);
	}

	Bool render(Size me, Graphics g) {
		if (picture) {
			Size p = picture.size;
			Float scale = min(me.w / p.w, me.h / p.h);
			if (scale < 1) {
				p = p * scale;
			}

			Rect pos(me.center - p/2, p);
			g.draw(picture, pos);
		}

		false;
	}

	void show(Image p) {
		picture = Bitmap(p);
	}
}

void images() {
	ImageViewer w;
	w.waitForClose;
}
