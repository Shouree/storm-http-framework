// New-style syntax!

// Use these namespaces when looking up names (both rule names and type/function names).
// Example: (not needed here)
use core.lang;

// TODO? Import additional packages automatically? Eg:
// import core; // would automatically add syntax from core.

// Delimiter in this file.
delimiter = SDelim;

// Delimiter rule. Returns nothing, which is why the return expression is omitted.
void SDelim();
SDelim : "[ \n\r\t]+";


// Matching of a very small subset of natural-language sentences!

// TODO: Make '"foo" word' return a Str instead of a SStr. SStr is returned by
// '"foo" @word', similar to 'Foo @word' (@ syntax is subject to change).
Str Verb();
Verb => word : "run" word;
Verb => word : "fly" word;
Verb => word : "swim" word;
Verb => word : "sleep" word;

Str Noun();
Noun => word : "dog" word;
Noun => word : "bird" word;
Noun => word : "cat" word;

Str Plural();
Plural => word : Noun word - "s";


Statement Sentence();

Sentence[1] => Statement(noun, verb) : Plural noun, Verb verb = PluralAssert;
Sentence[2] => Statement(noun, verb) : "the", Noun noun, Verb verb - "s" = SingularAssert;
Sentence[3] => Statement(noun, verb) : "do", Plural noun, Verb verb - "\?" = Question;

// Test for possibly nothing.
Maybe<Statement> EmptySentence();
EmptySentence => stmt : (Sentence stmt)?;

// Test for repeated things.
Array<Statement> Paragraph();
Paragraph => stmt : (Sentence stmt - SEDelim)*;

// Test for -> syntax.
Array<Statement> ParCall();
ParCall => Array<Statement>() : Sentence -> push (, Sentence -> push)*;

// Capture parts of the raw syntax tree.
Array<Sentence> RawSentence();
RawSentence => data : (Sentence@ data - SEDelim)*;

Array<Sentence> RawCall();
RawCall => Array<Sentence>() : Sentence@ -> push (, Sentence@ -> push)*;

// Test so that empty rules still work.
void SEDelim();
void SEmpty();
void SParen();

SEDelim : " *";
SEmpty : SEDelim;
SParen : "(" - SEDelim - SEmpty - SEDelim - ")";
