use core:debug;
use core:io;
use core:lang;
use lang:syntax;

// Type for storing a sentence.
class Statement {
	SStr noun;
	SStr verb;

	ctor(SStr noun, SStr verb) {
		init() {
			noun = noun;
			verb = verb;
		}
	}

	Str toS() {
		"Statement: " # noun.v # ", " # verb.v;
	}
}

void testSimple() on Compiler {
	Str s = "bird";

	Parser<Noun> parser;
	parser.parse(s, Url());
	if (parser.hasError)
		parser.throwError;

	var tree = parser.tree;
	print("Syntax tree: " # tree);

	var tfm = tree.transform;
	print("Transformed: " # tfm);
}

void testSentence() on Compiler {
	// Parse this:
	Str s = "do birds fly?";
	print("Parse: " # s);

	Parser<Sentence> parser;
	parser.parse(s, Url());
	print("Used " # parser.stateCount # " states.");
	print("Used " # parser.byteCount.toBytes);
	if (parser.hasError)
		parser.throwError;

	var tree = parser.tree;
	print("Syntax tree: " # tree);

	var tfm = tree.transform();
	print("Transformed: " # tfm);
}

void testMaybe() on Compiler {
	Str s = "do birds fly?";

	Parser<EmptySentence> parser;
	parser.parse(s, Url());
	var tree = parser.tree;
	print("Syntax tree: " # tree);
	Statement? tfm = tree.transform;
	print("Transformed: " # tfm);
}

void testArray() on Compiler {
	Str s = "do birds fly? do cats sleep?";

	Parser<Paragraph> parser;
	parser.parse(s, Url());
	print("Used " # parser.stateCount # " states.");
	print("Used " # parser.byteCount.toBytes);
	var tree = parser.tree;
	print("Syntax tree: " # tree);
	Statement[] tfm = tree.transform;
	print("Transformed: " # tfm);
}

void testEmpty() on Compiler {
	Str s = "()";
	Parser<SParen> parser;
	parser.parse(s, Url());
	print("Used " # parser.stateCount # " states.");
	print("Used " # parser.byteCount.toBytes);
	if (parser.hasError)
		parser.throwError;
}
