use core.lang;

// Note: This file is parsed by the built-in parser during startup. Therefore, small differences in the
// accepted languages may occur. For example, the built-in parser will does not accept actual parameters
// of the form 'a.b.c', while the grammar specified here does. Furthermore, it is not possible to extend
// the grammar in this file with 'use' statements, which is otherwise possible. Furthermore, it is not
// possible to specify other rules or productions as a parent requirement using the A..B syntax.

delimiter = SDelim;

void SDelim();
SDelim : "[ \n\r\t]*";
SDelim : SDelim - "//[^\n\r]*[\n\r]+" #comment - SDelim;

// Find and extract documentation from a comment preceeding a declaration.
SrcPos SFindDoc();
SFindDoc[5] => p : "[ \t\n\r]*" - SDocComment p;
SFindDoc[0] => p : SFindDoc - "[ \t\n\r]*" - SDocComment p;

// Match a block of single-line comments that could be documentation.
SrcPos SDocComment() #comment;
SDocComment => pos : ("//[^\n\r]*\r?\n[ \t]*")+;

// Identifier.
Str SIdent();
SIdent => v : "[A-Za-z_][A-Za-z0-9_]*" v;

// Type names.
NamePart SNamePart();
SNamePart => SimplePart(name) : SIdent name;
SNamePart => SimplePart(name) : SIdent name, "<", ">";
SNamePart => RecPart(name) : SIdent name, "<", SName -> add, (",", SName -> add, )* ">";

SrcName SName();
SName => SrcName(pos) : SNamePart -> add #typeName - (, "\.", SNamePart -> add #typeName)*;

Array<SrcName> SUse();
SUse => Array<SrcName>() : (, "extend" #keyword, SName -> push #typeName, ";")*;

FileContents SRoot();
SRoot => FileContents() : (SDocFileItem -> push, ";")* - SDelim;

FileItem SDocFileItem();
SDocFileItem[0] => f : SDelim - SFileItem f;
SDocFileItem[5] => applyDoc(d, f) : SFindDoc d - SFileItem f;

FileItem SFileItem();
SFileItem => UseDecl(pkg) : "use" #keyword, SName pkg #typeName;
SFileItem => DelimDecl(token) : "delimiter" #keyword, "=", SName token #typeName;
SFileItem => RuleDecl(pos, name, result) : SName result #typeName, SIdent name #fnName, SFormals -> push - (, SColorName -> pushColor)?;
SFileItem => ProductionDecl(pos, member) : SParentReq parent, SName member, SPriority -> pushPrio [, ("=>", SExpr(me),)? ":", SRepIndentTokens(me) - SProdName(me)]+;

Maybe<SrcName> SParentReq();
SParentReq => name : (SName name, "..")?;

Array<ParamDecl> SFormals();
SFormals => Array<ParamDecl>() : "(", ")";
SFormals => Array<ParamDecl>() : "(", SFormal -> push, (",", SFormal -> push,)* ")";

ParamDecl SFormal();
SFormal[0] => ParamDecl(type, name) : SName type #typeName, SIdent name #varName;
SFormal[1] => ParamDecl(type, name) : SName type #typeName, "me" name #keyword;

Int SPriority();
SPriority => 0 : ;
SPriority => toInt(prio) : "\[", "[+\-]?[0-9]+" prio #constant, "\]";

void SProdName(ProductionDecl me);
SProdName : SDelim - "=", SIdent -> pushName #typeName;
SProdName : ;

void SRepIndentTokens(ProductionDecl me);
SRepIndentTokens : ;
SRepIndentTokens : SToken -> push;
SRepIndentTokens : SSep -> push, SRepIndentTokens(me);
SRepIndentTokens : SToken -> push, SSep -> push, SRepIndentTokens(me);
SRepIndentTokens : "(" -> pushRepStart, SIndentTokens(me), ")" - SParenEnd(me), SIndentTokens(me);
SRepIndentTokens : (SToken -> push,)? "\[" -> pushIndentStart, SRepTokens(me), "\]" - SIndent -> pushIndentEnd, SRepTokens(me);

void SIndentTokens(ProductionDecl me);
SIndentTokens : ;
SIndentTokens : SToken -> push;
SIndentTokens : SSep -> push, SIndentTokens(me);
SIndentTokens : SToken -> push, SSep -> push, SIndentTokens(me);
SIndentTokens : (SToken -> push,)? "\[" -> pushIndentStart, STokens(me), "\]" - SIndent -> pushIndentEnd, SRepTokens(me);

void SRepTokens(ProductionDecl me);
SRepTokens : ;
SRepTokens : SToken -> push;
SRepTokens : SSep -> push, SRepTokens(me);
SRepTokens : SToken -> push, SSep -> push, SRepTokens(me);
SRepTokens : "(" -> pushRepStart, STokens(me), ")" - SParenEnd(me), STokens(me);

void STokens(ProductionDecl me);
STokens : ;
STokens : SToken -> push;
STokens : SSep -> push, STokens(me);
STokens : SToken -> push, SSep -> push, STokens(me);

TokenDecl SToken();
SToken => RegexTokenDecl(regex) : SString regex, SCapture(me), SHilight(me);
SToken => RuleTokenDecl(pos, rule) : SName rule, SCapture(me), SHilight(me);
SToken => RuleTokenDecl(pos, rule, params) : SName rule, SActuals params, SCapture(me), SHilight(me);
SToken => sep : SSep sep;

TokenDecl SSep();
SSep => SepTokenDecl() : "-";
SSep => DelimTokenDecl() : ",";

RepType SRep();
SRep => RepType.repZeroPlus() : "\*";
SRep => RepType.repOnePlus() : "\+";
SRep => RepType.repZeroOne() : "\?";

IndentType SIndent();
SIndent => IndentType.indentAlignBegin() : "@";
SIndent => IndentType.indentAlignEnd() : "$";
SIndent => IndentType.indentWeakIncrease() : "\?";
SIndent => IndentType.indentIncrease() : "\+";
SIndent => IndentType.indentDecrease() : "\-";

void SCapture(TokenDecl decl);
SCapture : SCaptureEnd(decl);
SCapture : ;

void SCaptureEnd(TokenDecl me);
SCaptureEnd : ("@" -> pushRaw #keyword)?, "->", SIdent -> pushInvoke #fnName;
SCaptureEnd : ("@" -> pushRaw #keyword)?, SIdent -> pushStore #varName;

// 'dummy' production needed to create a temporary object.
TokenDecl SParenCapture();
SParenCapture => TokenDecl() : SCaptureEnd(me);

void SParenEnd(ProductionDecl me);
SParenEnd : SDelim - SParenCapture -> pushRepEnd;
SParenEnd : SRep -> pushRepEnd;

void SHilight(TokenDecl me);
SHilight : SColorName -> pushColor;
SHilight : ;

SStr SColorName();
SColorName => SStr(name, pos) : "#" #keyword - SIdent name #keyword;

void SStrContent();
SStrContent : "[^\"\\\n]*"; // All except end of string and backslash.
SStrContent : SStrContent - "\\." - SStrContent; // Gobble escape sequences (we could translate them here...)

Str SString();
SString => unescapeStr(s) : "\"" #string - (SStrContent #string) s - "\"" #string;

Array<Str> SActuals();
SActuals => Array<Str>() : "(", ")";
SActuals => Array<Str>() : "(", SActualExpr -> push, (",", SActualExpr -> push,)* ")";

// Expressions usable inside actual parameter lists.
Str SActualExpr();
SActualExpr => s : SAtom s;
SActualExpr => joinName(first, rest) : SIdent first #varName (, "\.", SIdent rest #varName)*;

// Atoms in the expressions.
Str SAtom();
SAtom[-1] => s : SIdent s #varName;
SAtom => s : "[+\-]?[0-9]+" s #constant;
SAtom => s : "true" s #constant;
SAtom => s : "false" s #constant;
SAtom => s : "me" s #keyword;
SAtom => s : "pos" s #keyword;

Name SExprName();
SExprName => name : SName name;
// Allow using special names as well. This is so that we allow calling operators etc.
SExprName => Name(v) : "[+\-*/%<>=]+" v #fnName;

ProductionDecl SExpr(ProductionDecl decl);
SExpr => decl : SExprName -> pushResult #varName;
SExpr => decl : SExprName -> pushResult, SActuals -> pushParams;
SExpr => decl : SAtom -> pushResult;
