use core.lang;

delimiter = SDelim;

void SDelim();
SDelim : "[ \n\r\t]*";
SDelim : SDelim - "//[^\n\r]*[\n\r]+" #comment - SDelim;

// Identifier.
Str SIdent();
SIdent => v : "[A-Za-z_][A-Za-z0-9_]*" v;
SIdent => v : "[\+\-\*/%<>]+" v; // Special identifiers as well!

// Type names.
NamePart SNamePart();
SNamePart => SimplePart(name) : SIdent name;
SNamePart => SimplePart(name) : SIdent name, "<", ">";
SNamePart => RecPart(name) : SIdent name, "<", SName -> add, (",", SName -> add, )* ">";

SrcName SName();
SName => SrcName(pos) : SNamePart -> add #typeName - (, "\.", SNamePart -> add #typeName)*;

void SRoot();
SRoot : SDelim - (SFileItem, ";", )*;

void SFileItem();
SFileItem : "use" #keyword, SName #typeName;
SFileItem : "delimiter" #keyword, "=", SName #typeName;
SFileItem : SName #typeName, SIdent #fnName, SFormals;
SFileItem : SProd [, ("=>", SExpr,)? ":", SRepIndentTokens, SProdName]+;

void SFormals();
SFormals : "(", ")";
SFormals : "(", SName #typeName, SIdent #varName, (",", SName #typeName, SIdent #varName,)* ")";

void SProd();
SProd : SName - (, "\[", "\-?[0-9]+" #constant, "\]")?;

void SProdName();
SProdName : "=", SIdent #typeName;
SProdName : ;

void SRepIndentTokens();
SRepIndentTokens : ;
SRepIndentTokens : SToken;
SRepIndentTokens : SSep, SRepIndentTokens;
SRepIndentTokens : SToken, SSep, SRepIndentTokens;
SRepIndentTokens : "(", SIndentTokens, ")" - SParenEnd, SIndentTokens;
SRepIndentTokens : (SToken,)? "\[", SRepTokens, "\]" - SIndent, SRepTokens;

void SIndentTokens();
SIndentTokens : ;
SIndentTokens : SToken;
SIndentTokens : SSep, SIndentTokens;
SIndentTokens : SToken, SSep, SIndentTokens;
SIndentTokens : (SToken,)? "\[", STokens, "\]" - SIndent, SRepTokens;

void SRepTokens();
SRepTokens : ;
SRepTokens : SToken;
SRepTokens : SSep, SRepTokens;
SRepTokens : SToken, SSep, SRepTokens;
SRepTokens : "(", STokens, ")" - SParenEnd, STokens;

void STokens();
STokens : ;
STokens : SToken;
STokens : SSep, STokens;
STokens : SToken, SSep, STokens;

void SToken();
SToken : SString, SCapture, SHilight;
SToken : SName, SCapture, SHilight;
SToken : SName, SActuals, SCapture, SHilight;
SToken : SSep;

void SSep();
SSep : "-";
SSep : ",";

void SActuals();
SActuals : "(", ")";
SActuals : "(", SIdent #varName, (",", SIdent #varName,)* ")";

void SRep();
SRep : "\*";
SRep : "\+";
SRep : "\?";

void SIndent();
SIndent : "@";
SIndent : "$";
SIndent : "\?";
SIndent : "\+";
SIndent : "\-";

void SCapture();
SCapture : "@", SCaptureEnd;
SCapture : SCaptureEnd;
SCapture : ;

void SCaptureEnd();
SCaptureEnd : "->", SIdent #fnName;
SCaptureEnd : SIdent #varName;

void SParenEnd();
SParenEnd : SDelim - SCaptureEnd;
SParenEnd : SRep;

void SHilight();
SHilight : "#" #keyword - SIdent #keyword;
SHilight : ;

void SStrContent();
SStrContent : "[^\"\\]*"; // All except end of string and backslash.
SStrContent : SStrContent - "\\." - SStrContent; // Gobble escape sequences (we could translate them here...)

Str SString();
SString => s : "\"" #string - (SStrContent #string) s - "\"" #string;

void SExpr();
SExpr : SName #varName;
SExpr : SName, SActuals;
SExpr[10] : "true" #keyword;
SExpr[10] : "false" #keyword;
// Constants?
