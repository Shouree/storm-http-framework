// Main brainfuck syntax. Based on the BS language.
// Files start with a number, the space needed by the
// brainfuck program. Each file will be declared as its
// own function. A function takes a string for input, and
// returns a string, which is the output from the program.
delimiter = BFDelimiter;

void BFDelimiter();
BFDelimiter : "[ \n\r\t]*";

Str SNumber();
SNumber => v : "[0-9]+" v;

BfExpr SFile();
SFile => BfExpr(pos, space, code) : SNumber space - SComment - SRoot code;

// Note: the {} chars are used to end blocks in other languages.
void SComment();
SComment : "[^<>,\.\+\-\[\]{}]*";

Array<BfToken> SRoot();
SRoot => Array<BfToken>() : ( SToken -> push - SComment )*;

BfToken SToken();
SToken => BfBack(pos) : "<";
SToken => BfFwd(pos) : ">";
SToken => BfInput(pos) : ",";
SToken => BfOutput(pos) : "\.";
SToken => BfInc(pos) : "\+";
SToken => BfDec(pos) : "\-";
SToken => BfLoop(pos, c) : "\[", SRoot c, "\]";

// Integration with BS.
lang.bs.SAtom => BfExpr(pos, space, code, input) :
    "bf", "(", lang.bs.SExpr(block) input, ",", SNumber space, ")", "{", SRoot code, "}";
