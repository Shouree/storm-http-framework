// Main brainfuck syntax. Based on the BS language.
// Files start with a number, the space needed by the
// brainfuck program. Each file will be declared as its
// own function. A function takes a string for input, and
// returns a string, which is the output from the program.
delimiter: BFDelimiter;
BFDelimiter => void : "[ \n\r\t]*";

Number => v : "[0-9]+" v;

BfFile => BfExpr(space, code) : Number space - BfComment - BfRoot code;

// Note: the {} chars are used to end blocks in other languages.
BfComment => void : "[^<>,\.\+\-\[\]{}]*";
BfRoot => Array<BfToken>() : ( BfToken -> push - BfComment )*;

BfToken => BfBack() : "<";
BfToken => BfFwd() : ">";
BfToken => BfInput() : ",";
BfToken => BfOutput() : "\.";
BfToken => BfInc() : "\+";
BfToken => BfDec() : "\-";
BfToken => BfLoop(c) : "\[", BfRoot c, "\]";

// Integration with BS.
Expr => BfExpr(space, code, input) : "bf", "(", Expr(block) input, ",", Number space, ")", "{", BfRoot code, "}";
