use core:asm;

class AddInstr extends AsmAtom {
	AsmOperand dest;
	AsmOperand src;

	ctor(AsmOperand dest, AsmOperand src) {
		init() { dest = dest; src = src; }
	}

	void output(CodeGen to, Labels l) {
		to.l << add(dest.v(l), src.v(l));
	}

	Str toS() {
		"add " # dest # ", " # src;
	}
}

class SubInstr extends AsmAtom {
	AsmOperand dest;
	AsmOperand src;

	ctor(AsmOperand dest, AsmOperand src) {
		init() { dest = dest; src = src; }
	}

	void output(CodeGen to, Labels l) {
		to.l << sub(dest.v(l), src.v(l));
	}

	Str toS() {
		"sub " # dest # ", " # src;
	}
}

class MovInstr extends AsmAtom {
	AsmOperand dest;
	AsmOperand src;

	ctor(AsmOperand dest, AsmOperand src) {
		init() { dest = dest; src = src; }
	}

	void output(CodeGen to, Labels l) {
		to.l << mov(dest.v(l), src.v(l));
	}

	Str toS() {
		"mov " # dest # ", " # src;
	}
}

class CmpInstr extends AsmAtom {
	AsmOperand a;
	AsmOperand b;

	ctor(AsmOperand a, AsmOperand b) {
		init() { a = a; b = b; }
	}

	void output(CodeGen to, Labels l) {
		to.l << cmp(a.v(l), b.v(l));
	}

	Str toS() {
		"cmp " # a # ", " # b;
	}
}

class JmpInstr extends AsmAtom {
	AsmOperand to;
	CondFlag flag;

	ctor(AsmOperand to) {
		init() { to = to; flag = ifAlways; }
	}

	ctor(AsmOperand to, CondBox c) {
		init() { to = to; flag = c.v; }
	}

	void output(CodeGen g, Labels l) {
		g.l << jmp(to.v(l), flag);
	}

	Str toS() {
		"jmp " # to # ", " # flag;
	}
}
