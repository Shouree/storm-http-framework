use core:debug; // TODO: remove!
use core:lang;
use core:asm;
use lang:bs; // TODO: Extract a generic code generation interface so that we do not have to rely on Expr from BS.

/**
 * Assembler listing. Stores a set of asm instructions for later conversion into the real asm
 * listing format.
 */
class AsmListing extends Expr {
	AsmAtom[] data;

	void add(AsmAtom instr) {
		data << instr;
	}

	Value result() {
		Value(); // Always returns void.
	}

	void code(CodeGen state, CodeResult r) {
		Labels l(state);
		// Create all labels.
		for (Nat i = 0; i < data.count; i++) {
			data[i].create(l);
		}

		for (Nat i = 0; i < data.count; i++) {
			data[i].output(state, l);
		}
	}

	Str toS() {
		StrBuf r;
		for (Nat i = 0; i < data.count; i++) {
			r.add(data[i].toS);
			r.add("\n");
		}
		r.toS;
	}
}

/**
 * Class keeping track of all labels.
 * TODO: Check for mismatched labels!
 */
class Labels on Compiler {
	CodeGen gen;
	Str->Label labels;

	ctor(CodeGen g) {
		init() { gen = g; }
	}

	void create(SStr name) {
		if (labels.has(name.v)) {
			throwSyntaxError(name.pos, "Duplicate label " # name.v);
		}

		labels.put(name.v, gen.l.label());
	}

	Label get(Str name) {
		// TODO: Better error message here.
		labels.get(name);
	}
}


/**
 * Base class for a single assembler instruction or label.
 */
class AsmAtom on Compiler {

	// Create any resources we need.
	void create(Labels l) {}

	// Generate code.
	void output(CodeGen to, Labels l) {}
}

/**
 * Label for an asm listing.
 */
class AsmLabel extends AsmAtom {
	SStr name;

	ctor(SStr name) {
		init() { name = name; }
	}

	void create(Labels l) {
		l.create(name);
	}

	void output(CodeGen to, Labels l) {
		to.l << l.get(name.v);
	}
}

/**
 * Wrapper for the Operand type so that we can use it as a heap-allocated object.
 */
class AsmOperand on Compiler {
	Operand value;

	ctor() {
		init();
	}

	cast ctor(Operand v) {
		init() { value = v; }
	}

	// May be overridden.
	Operand v(Labels l) {
		value;
	}

	Str toS() {
		v.toS;
	}
}


/**
 * Label reference.
 */
class AsmLabelRef extends AsmOperand {
	SStr name;

	ctor(SStr name) {
		init() { name = name; }
	}

	Operand v(Labels l) {
		Operand(l.get(name.v));
	}

	Str toS() {
		name.v # ":";
	}
}
