// Syntax for inline asm and freestanding asm.
// TODO: Try to remove depency on the lang.bs.Block class.
// TODO: Use custom colors!

use lang.bs;
use core.asm;
use core.asm.CondFlag;

delimiter = SDelimiter;

// Root rule for asm code.
AsmListing SAsmListing(Block block);
SAsmListing => AsmListing(pos) : (SAsmAtom(block) -> add, )*;

// Atom.
AsmAtom SAsmAtom(Block block);
SAsmAtom => v : SAsmInstruction(block) v, ";";
SAsmAtom => AsmLabel(pos, name) : ["[A-Za-z]+" name #fnName, ":"]-;

// All possible asm values.
AsmOperand SAsmOperand(lang.bs.Block block);
SAsmOperand => v : SAsmLiteral v;
SAsmOperand => v : SAsmWritable(block) v;

// All possible writable asm values.
AsmOperand SAsmWritable(lang.bs.Block block);
SAsmWritable => v : SAsmReg v;
SAsmWritable[-10] => v : SAsmVariableRef(block) v;

// Separate rule for each, so that they can be chosen individually as well.

// Registers: al, bl, cl, eax, ebx, ecx, rax, rcx, rdx as in x86-64. ptrA, ptrB, ptrC, ptrStack, ptrFrame as pointer-sized ones.
AsmOperand SAsmReg();
SAsmReg => rAl() : "al" #keyword;
SAsmReg => rBl() : "bl" #keyword;
SAsmReg => rCl() : "cl" #keyword;
SAsmReg => rEax() : "eax" #keyword;
SAsmReg => rEbx() : "ebx" #keyword;
SAsmReg => rEcx() : "ecx" #keyword;
SAsmReg => rRax() : "rax" #keyword;
SAsmReg => rRbx() : "rbx" #keyword;
SAsmReg => rRcx() : "rcx" #keyword;
SAsmReg => rPtrA() : "ptrA" #keyword;
SAsmReg => rPtrB() : "ptrB" #keyword;
SAsmReg => rPtrC() : "ptrC" #keyword;

// Literals.
AsmOperand SAsmLiteral();
SAsmLiteral => number(size, value) : "[binlwp]" size #constant - "-?[0-9]+" value #constant; // Numeric literal with size before it.

// Reference to a variable in another language.
VarRef SAsmVariableRef(Block block);
SAsmVariableRef => VarRef(pos, block, name) : "[A-Za-z]+" name #varName;

// Reference to a label.
AsmLabelRef SAsmLabelRef();
SAsmLabelRef => AsmLabelRef(name) : "@" #fnName - "[A-Za-z]+" name #fnName;

// Conditional expression in asm.
CondFlag SAsmCond();
SAsmCond => ifEqual() : "ifEqual" #keyword;
SAsmCond => ifNotEqual() : "ifNotEqual" #keyword;

// Unsigned
SAsmCond => ifAbove() : "ifAbove" #keyword;
SAsmCond => ifAboveEqual() : "ifAboveEqual" #keyword;
SAsmCond => ifBelow() : "ifBelow" #keyword;
SAsmCond => ifBelowEqual() : "ifBelowEqual" #keyword;

// Signed
SAsmCond => ifGreater() : "ifGreater" #keyword;
SAsmCond => ifGreaterEqual() : "ifGreaterEqual" #keyword;
SAsmCond => ifLess() : "ifLess" #keyword;
SAsmCond => ifLessEqual() : "ifLessEqual" #keyword;


// All asm instructions.
AsmAtom SAsmInstruction(lang.bs.Block block);
SAsmInstruction => AddInstr(dest, src) : "add" #typeName, SAsmWritable(block) dest, ",", SAsmOperand(block) src;
SAsmInstruction => SubInstr(dest, src) : "sub" #typeName, SAsmWritable(block) dest, ",", SAsmOperand(block) src;
SAsmInstruction => MovInstr(dest, src) : "mov" #typeName, SAsmWritable(block) dest, ",", SAsmOperand(block) src;
SAsmInstruction => CmpInstr(a, b) : "cmp" #typeName, SAsmOperand(block) a, ",", SAsmOperand(block) b;
SAsmInstruction => JmpInstr(to) : "jmp" #typeName, SAsmLabelRef to;
SAsmInstruction => JmpInstr(to, c) : "jmp" #typeName, SAsmCond c, ",", SAsmLabelRef to;

// Integration into other languages.
lang.bs.SStmt => r : "asm" #keyword, "{" [, SAsmListing(block) r,]+ "}";
