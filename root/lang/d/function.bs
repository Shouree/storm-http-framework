use lang;
use core:lang;
use core:asm;
use core:debug;

/**
 * Diesel function, allows hierarchical declarations.
 */
class Function extends core:lang:Function {
	Block block;

	ctor(Str name, Block block) {
		init(Value(), name, []) {
			block = block;
		}
	}

	// Compile code.
	void set() {
		Listing l;
		l << ret(retVoid);
		DynamicCode code(l);
		setCode(code);
	}

	Str toS() {
		StrBuf to;
		Value[] p = this.params;

		if (p.count > 0) {
			to << "function " << this.name << "()\n";
		} else {
			to << "procedure " << this.name << "\n";
		}
		to << block.toS;
		to.toS;
	}
}

class Program extends Function {
	ctor(SStr name, Block code) {
		init(name.v, code) {}
	}

	ctor(Str name, Block code) {
		init(name, code) {}
	}

	Str toS() {
		StrBuf to;
		to << "program " << this.name << "\n";
		to << block.toS;
		to.toS;
	}
}


/**
 * Create a function.
 */
Function function(SStr name, Block code) {
	Function(name.v, code);
}

/**
 * Create a procedure.
 */
Function procedure(SStr name, Block code) {
	Function(name.v, code);
}
