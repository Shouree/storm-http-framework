use lang;
use core:lang;
use core:asm;
use core:debug;

/**
 * A block in the diesel language.
 */
class Block extends Statement {
	// TODO: Move constants, variables and functions to Function subclass.
	Constant[] constants;
	Variable[] variables;
	Function[] functions;
	Statement[] statements;

	void add(Constant[] v) {
		constants = v;
	}

	void add(Variable[] v) {
		variables = v;
	}

	void add(Function[] v) {
		functions = v;
	}

	void add(Statement[] v) {
		statements = v;
	}

	// Get all named things from here.
	Named[] buildNamed() {
		Named[] r;

		for (Nat i = 0; i < functions.count; i++) {
			r << functions[i];
		}

		for (Nat i = 0; i < variables.count; i++) {
			r << variables[i];
		}

		r;
	}

	void code(Listing to, Scope scope) {
		for (Nat i = 0; i < variables.count; i++) {
			Variable v = variables[i];
			Type? t = v.type.type;
			if (t) {
				v.asmVar = to.createVariable(to.root, t.size(), Operand(), freeOnNone());
			} else {
				print("Error: Variable " # v # " does not have a proper type!");
			}
		}

		for (Nat i = 0; i < statements.count; i++) {
			statements[i].code(to, scope);
		}
	}

	Str toS() {
		StrBuf buf;
		if (constants.count > 0) {
			buf << "const\n";
			for (Nat i = 0; i < constants.count; i++) {
				buf << constants[i].toS.indent << ";\n";
			}
		}

		if (variables.count > 0) {
			buf << "var\n";
			for (Nat i = 0; i < variables.count; i++) {
				buf << variables[i].toS.indent << ";\n";
			}
		}

		if (functions.count > 0) {
			for (Nat i = 0; i < functions.count; i++) {
				buf << functions[i].toS.indent;
			}
		}

		buf << "begin\n";
		for (Nat i = 0; i < statements.count; i++) {
			buf << statements[i].toS.indent << ";\n";
		}
		buf << "end\n";
		buf.toS;
	}
}


/**
 * Constant.
 */
class Constant on Compiler {
	SStr name;
	Expression value; // Should only be constants...

	// TODO: Check type of 'value'
	ctor(SStr name, Expression value) {
		init() {
			name = name;
			value = value;
		}
	}

	Str toS() {
		name.v # " = " # value.toS;
	}
}

/**
 * Variable.
 */
class Variable extends Named {
	DType type;
    core:asm:Variable asmVar;

	ctor(SStr name, DType type) {
		init(name.v) {
			type = type;
		}
	}

	Str toS() {
		name # " : " # type;
	}
}
