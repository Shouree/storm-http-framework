use core:lang;

// Implement support for Int[] instead of Array<Int>
TypeName arrayType(TypeName t) on Compiler {
	TypePart core("core");
	TypePart array("Array");
	array.add(t);

	TypeName name;
	name.add(core);
	name.add(array);
	name;
}

Expr arrayInit(Block block, TypeName type, Array<Expr> list) on Compiler {
	ExprBlock b(block);

	SStr arrayName("tmp");
	Var array(b, arrayName, namedExpr(b, arrayType(type), Actual()));
	b.add(array);

	Expr varAccess = namedExpr(b, arrayName, Actual());
	SStr push("push"); // TODO: Add position as well!
	for (Nat i = 0; i < list.count; i++) {
		Actual params;
		params.add(list[i]);
		b.add(namedExpr(b, push, varAccess, params));
	}

	b.add(varAccess);
	b;
}

class ArrayInit extends Expr {
	Array<Expr> values;

	// TODO: Replace this one with a weak pointer directly to our parent.
	ExprBlock block;

	ctor(Block parent, Array<Expr> values) {
		init() {
			values = values;
			block = ExprBlock(parent);
		}
	}

	Value result() {
		if (values.any) {
			// TODO: Use the common function that takes Expr parameters?
			Value r = values[0].result;
			for (Nat i = 0; i < values.count; i++) {
				r = common(r, values[i].result);
			}
			wrapArray(r);
		} else {
			Value();
		}
	}

	Bool castable(Value to) {
		if (to.isRef) {
			false;
		} else {
			acceptable(unwrapArray(to));
		}
	}

	void code(CodeGen g, CodeResult r) {
		Value v = unwrapArray(r.type);
		if (v == Value())
			throwSyntaxError(pos, "Can not figure out the type of the array. Please use the syntax T:[...] instead.");

		Expr e = arrayInit(block, TypeName(v), values);
		e.code(g, r);
	}

	// Is the type 't' acceptable for all values?
	Bool acceptable(Value t) {
		Bool ok = true;
		for (Nat i = 0; i < values.count; i++)
			ok = ok & castable(values[i], t);
		ok;
	}
}
