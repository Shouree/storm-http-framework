use core:lang;

// Implement support for Int[] instead of Array<Int>
TypeName arrayType(TypeName t) on Compiler {
	TypePart core("core");
	TypePart array("Array");
	array.add(t);

	TypeName name;
	name.add(core);
	name.add(array);
	name;
}

Expr arrayInit(Block block, TypeName type, Array<Expr> list) on Compiler {
	ExprBlock b(block);

	SStr arrayName("tmp");
	Var array(b, arrayName, namedExpr(b, arrayType(type), Actual()));
	b.add(array);

	Expr varAccess = namedExpr(b, arrayName, Actual());
	SStr push("push"); // TODO: Add position as well!
	for (Nat i = 0; i < list.count; i++) {
		Actual params;
		params.add(list[i]);
		b.add(namedExpr(b, push, varAccess, params));
	}

	b.add(varAccess);
	b;
}

// TODO: Return a custom type here that automatically casts to the right type!
Expr arrayInit(Block block, Array<Expr> list, SrcPos pos) on Compiler {
	if (list.count == 0)
		throwSyntaxError(pos,
						"At least one element has to be given to the array initialization unless a type is given.");

	Value result = list[0].result;
	for (Nat i = 1; i < list.count; i++)
		result = common(result, list[i].result);

	arrayInit(block, TypeName(result), list);
}
