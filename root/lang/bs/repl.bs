use lang;
use lang:bs:macro;
use core:io;
use core:asm;
use core:lang;
use core:debug;

BsRepl repl() {
	BsRepl();
}

class BsRepl extends Repl {

	// Shall we terminate?
	Bool done;

	// Scope.
	Scope scope;

	// Pre-processing.
	init() {
		Type repl = named{BsRepl};

		init() {
			done = false;
			scope(repl, BSLookup());
		}

		scope.addInclude(named{core});
		scope.addInclude(named{lang:bs});
		scope.addInclude(named{lang:bs:macro});
	}

	void greet() {
		print("Type 'licenses' to show licenses for all currently used modules.");
	}

	Bool eval(Str line) {
		Parser<SSkipBlock> skipBlock;
		skipBlock.parse(line, Url());
		if (skipBlock.hasError) {
			// Mismatched something. Let the user complete their input.
			return false;
		}

		Parser<SReplUse> useStmt;
		useStmt.parse(line, Url());
		if (!useStmt.hasError) {
			addUse(useStmt.tree.transform);
			return true;
		}


		Parser<SReplExpr> root;
		scope.addSyntax(root);
		root.parse(line, Url());
		if (root.hasError) {
			print(root.errorMsg);
			return true;
		}

		evalExpr(root.tree);
		true;
	}

	Bool exit() {
		done;
	}

	void addUse(SrcName name) {
		Named? pkg = rootScope.find(name);
		if (pkg as Package) {
			if (scope.addInclude(pkg)) {
				print("Using " # name # ".");
			} else {
				print(name # " already in use.");
			}
		} else {
			print("Package " # name # " not found.");
		}
	}

	void evalExpr(SReplExpr tree) {
		ReplBlock block(scope);
		LocalVar thisPtr("this", thisPtr(named{lang:bs:ReplSandbox}), SrcPos(), true);
		block.add(thisPtr);

		Expr expr = tree.transform(block);

		Function replaceFn = named{ReplSandbox:evalFn<ReplSandbox>};
		ReplCode code(block, thisPtr, expr);
		replaceFn.setCode(LazyCode(&code.load()));

		// Now, run the replaced function!
		ReplSandbox sandbox(this);
		print("=> " # sandbox.evalFn());
	}

}

void outputLicense(core:info:License l, Bool full) on Compiler {
	print(l.identifier # ": " # l.title);
	if (full) {
		Str line = "-" * 80;
		print(line);
		print(l.body);
		print(line);
		print("");
	}
}

// Sandbox class for the Repl to execute in.
class ReplSandbox on Compiler {
	BsRepl owner;

	init(BsRepl owner) {
		init() {
			owner = owner;
		}
	}

	// Show all licenses in the system.
	void licenses() {
		print("For full license information, type 'fullLicenses'.");
		print("Licenses of modules currently in use by the system:");
		print("");
		for (l in core:info:licenses) {
			outputLicense(l, false);
		}
	}

	// Show the long version of the licenses.
	void fullLicenses() {
		print("Licenses of modules currently in use by the system:");
		print("");
		for (l in core:info:licenses) {
			outputLicense(l, true);
		}
	}

	// This is the exit command.
	void exit() {
		owner.done = true;
	}

	// This function will be replaced runtime, beware >)
	// TODO: Replace with some kind of anonymous function.
	Str evalFn() {
		"";
	}
}

class ReplBlock extends Block {
	init(Scope scope) {
		init(SrcPos(), scope) {}
	}
}

class ReplCode on Compiler {
	ReplBlock root;
	LocalVar thisPtr;
	Expr expr;
	Value strType;

	init(ReplBlock root, LocalVar thisPtr, Expr expr) {
		init() {
			root = root;
			thisPtr = thisPtr;
			expr = expr;
			strType = named{Str};
		}
	}

	CodeGen load() {
		CodeGen g(RunOn(), true, strType);
		VarInfo resultVar = g.createVar(strType);

		g.l << prolog();

		thisPtr.createParam(g);

		Value result = expr.result.type;
		Name name("toS", [result]);
		Named? toSFn = root.scope.find(name);
		if (toSFn as Function) {
			// It exists, use the result.
			FnCall toSCall(SrcPos(), toSFn, Actuals(expr));
			toSCall.code(g, CodeResult(strType, resultVar));
		} else {
			// Just evaluate and print a dummy output.
			expr.code(g, CodeResult());
			createDefaultResult(g, result, resultVar);
		}

		g.l << fnRet(Operand(resultVar.v));

		g;
	}

	// Create an empty string for output.
	void createDefaultResult(CodeGen g, Value resultType, VarInfo result) {
		StrBuf s;
		s.add("<").add(resultType.toS).add(">");
		Expr constant = strConstant(SrcPos(), s.toS);
		constant.code(g, CodeResult(strType, result));
	}

}
