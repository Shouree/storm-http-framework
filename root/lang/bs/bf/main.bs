use lang:bs;
use lang:bs:macro;
use core:debug;
use core:lang;

// Main file in the brainfuck implementation.

class BfEnv {
	ExprBlock block;
	Var input;
	Var output;
	Var ptr;
	Var data;

	ctor(ExprBlock b, Expr input, Expr memSize) {
		TypeName strT = name{core:Str};
		TypeName natT = name{core:Nat};

		Expr init = namedExpr(b, name{lang:bs:bf:initArray}, Actual(memSize));
		init() {
			block = b;
			input = Var(b, strT, SStr("input"), input);
			output = Var(b, strT, SStr("output"), Actual());
			ptr = Var(b, natT, SStr("ptr"), asNat(b, intConstant(SStr("0"))));
			data = Var(b, arrayType(natT), SStr("data"), init);
		}

		block.add(input);
		block.add(output);
		block.add(ptr);
		block.add(data);
	}

	BfEnv child(ExprBlock block) {
		BfEnv c(this);
		c.block = block;
		c;
	}

	Expr ptrExpr() {
		LocalVarAccess(ptr.var);
	}

	Expr dataExpr() {
		accessExpr(block, LocalVarAccess(data.var), ptrExpr);
	}
}

class BfToken {
	void insert(BfEnv env) {}
}

class BfBack extends BfToken {
	void insert(BfEnv env) {
		env.block.add(prefixOperator(env.block, SStr("--"), env.ptrExpr));
	}
}
class BfFwd extends BfToken {
	void insert(BfEnv env) {
		env.block.add(prefixOperator(env.block, SStr("++"), env.ptrExpr));
	}
}
class BfInput extends BfToken {}
class BfOutput extends BfToken {
	void insert(BfEnv env) {
		Actual p;
		p.add(LocalVarAccess(env.output.var));
		p.add(env.dataExpr);
		env.block.add(namedExpr(env.block, name{core:debug:append}, p));
	}
}

class BfInc extends BfToken {
	void insert(BfEnv env) {
		env.block.add(prefixOperator(env.block, SStr("++"), env.dataExpr));
	}
}
class BfDec extends BfToken {
	void insert(BfEnv env) {
		env.block.add(prefixOperator(env.block, SStr("--"), env.dataExpr));
	}
}

class BfLoop extends BfToken {
	BfToken[] content;

	ctor(BfToken[] c) {
		init() {
			content = c;
		}
	}

	void insert(BfEnv env) {
		While w(env.block);
		ExprBlock block(w);
		w.body(block);
		env.block.add(w);

		OpInfo eq = lOperator(SStr("!="), 100);
		w.cond(mkOperator(env.block, env.dataExpr, eq, asNat(env.block, intConstant(SStr("0")))));

		BfEnv child = env.child(block);
		for (Nat i = 0.nat; i < content.count; i++) {
			content[i].insert(child);
		}
	}
}

Expr asNat(Block b, Expr e) {
	Actual p;
	p.add(e);
	namedExpr(b, SStr("nat"), p);
}

Nat[] initArray(Nat size) {
	Nat[] r();
	for (Nat i = 0.nat; i < size; i++)
		r.push(0.nat);
	r;
}

Nat[] initArray(Int size) {
	initArray(size.nat);
}

Expr bfCode(Block parent, Expr input, Expr memSize, BfToken[] tokens) {
	ExprBlock block(parent);

	BfEnv env(block, input, memSize);

	for (Nat i = 0.nat; i < tokens.count; i++) {
		tokens[i].insert(env);
	}

	block.add(LocalVarAccess(env.output.var));

	block;
}
