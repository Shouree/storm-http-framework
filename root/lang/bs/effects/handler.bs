use core:lang;
use lang:bs;

/**
 * Handler definition.
 *
 * Contains a list of handler clauses, each handling an effect or a return value.
 */
class Handler extends Named {
	Value result;
	Value param;
	EffectHandlerClause[] effectClauses;
	HandlerClause? returnClause;

	init(SrcPos pos, Str name, Value result, Value param) {
		init(pos, name) {
			result = result;
			param = param;
		}
	}
}

/**
 * Base case for effect handler clauses. Used for the return value.
 */
class HandlerClause on Compiler {
	// Position.
	SrcPos pos;

	// Function that implements the handler.
	Function handler;

	// Create.
	init(SrcPos pos, Handler handler, Scope scope, ValParam[] params, SFunctionBody body) {
		BSFunction f(handler.result, SStr("handler", body.pos), params, scope, null, body);
		f.parentLookup = handler;

		init {
			pos = pos;
			handler = f;
		}
	}
}

HandlerClause returnClause(SrcPos pos, Handler h, Scope scope, SStr param, SFunctionBody body) on Compiler {
	HandlerClause(pos, h, scope, [ValParam(h.param, param)], body);
}

/**
 * Used when we are handling a particular effect.
 */
class EffectHandlerClause extends HandlerClause {
	// Effect being handled.
	Effect effect;

	// Create.
	init(SrcPos pos, Handler h, Scope scope, SrcName effectName, NameParam[] params, SStr contParam, SFunctionBody body) {
		var resolvedParams = params.resolve(scope);

		SrcName toFind = effectName.clone();
		toFind.last = SimplePart(toFind.last.name, resolvedParams.values());

		var found = if (found = scope.find(toFind) as Effect) {
			found;
		} else {
			throw SyntaxError(effectName.pos, "Unable to find an effect named ${effectName}.");
		};

		var contType = fnType([h.param, found.result]);
		resolvedParams << ValParam(contType, contParam.v);

		init(pos, h, scope, resolvedParams, body) {
			effect = found;
		}
	}
}


/**
 * Handler expression.
 */
class HandleExpr extends Expr {
	Expr body;
	Handler handler;

	init(SrcPos pos, Block parent, Block body, SrcName handler) {
		var h = if (found = parent.scope.find(handler)) {
			unless (found as Handler) {
				throw SyntaxError(handler.pos, "The entity ${handler} is not an effect handler.");
			}
			found;
		} else {
			throw SyntaxError(handler.pos, "Failed to find an entity named ${handler}");
		};

		init(pos) {
			body = body.expectCastTo(h.param, parent.scope);
			handler = h;
		}
	}

	void code(CodeGen code, CodeResult result) : override {
		if (returnHandler = handler.returnClause) {
			CodeResult res(handler.param, code.block);
			body.code(code, res);

			// Call the handler:
			returnHandler.handler.autoCall(code, [res.location(code)], result);
		} else {
			body.code(code, result);
		}
	}

	ExprResult result() : override {
		ExprResult(handler.result);
	}

	void toS(StrBuf to) : override {
		to << "handle " << body << " with " << handler.identifier();
	}
}
