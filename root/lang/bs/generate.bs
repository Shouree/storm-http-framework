use core:lang;
use core:debug;

/**
 * Template class for generating new code according to the specified function.
 */
class Generate extends Template {
	// Generated function.
	BSFunction? fn;

	// Function name.
	SStr fnName;

	// Parameter name.
	SStr paramName;

	// Function body.
	SStr contents;

	// Scope.
	Scope scope;

	// Create.
	ctor(SyntaxEnv env, SStr name, SStr param, SStr contents) {
		init(name.v) {
			fnName = name;
			paramName = param;
			contents = contents;
			scope = env.scope;
		}
	}

	// Create.
	ctor(Class env, SStr name, SStr param, SStr contents) {
		init(name.v) {
			fnName = name;
			paramName = param;
			contents = contents;
			scope = env.scope;
		}
	}

	// Generate a Named object of some sort.
	Named? generate(SimplePart part) {
		BSFunction fn = createFn();

		FnPtrBase ptr = fn.fnPtr();
		if (ptr as Fn<Named?, Value[]>) {
			return ptr.call(part.params);
		}

		null;
	}

	// Create 'fn' if not already done.
	BSFunction createFn() {
		if (fn) {
			return fn;
		}

		Package? into = thisPkg();

		Value result = resultType();

		Params params;
		params.add(arrayType(valueType()));
		params.add(paramName);

		SStr name = fnName;
		if (into) {
			name = SStr(into.anonName, name.pos);
		}

		// TODO: ignore fnName, making the function anonymous.
		BSFunction r(result, name, params, scope, compilerThread, contents);

		if (into) {
			into.add(r);
		}

		fn = r;
		r;
	}

	// Find the type 'core:lang:Value?'
	Value resultType() {
		TypeName n;
		n.add(TypePart("core"));
		n.add(TypePart("lang"));
		n.add(TypePart("Named"));

		Named? ans = maybeType(n).find(rootScope);
		if (ans as Type) {
			Value(ans);
		} else {
			Value();
		}
	}

	// Generate the type name 'core:lang:Value'
	TypeName valueType() {
		TypeName n;
		n.add(TypePart("core"));
		n.add(TypePart("lang"));
		n.add(TypePart("Value"));
		n;
	}

	// Find this package.
	Package? thisPkg() {
		TypeName n;
		n.add(TypePart("lang"));
		n.add(TypePart("bs"));

		Named? ans = n.find(rootScope);
		if (ans as Package) {
			return ans;
		}
		null;
	}

}
