// Syntax extensions useful when generating code or manipulating the syntax tree.
use lang.bs;

delimiter = SDelimiter;

// Use type{a:b:c} to build a type name quickly and easily.
SExpr => createType(block, type) : "name", "{", SType type, "}" = Bajs;

// Use named{a:b:c} to refer to objects. Evaluates compile-time to the type of the actual object
// in the compiler.
SExpr => referNamed(block, name) : "named", "{", SType name, "}";

// Output a type.
SExpr => exploreType(block, type) : "explore", "{", SType type, "}";

// Reload a package (TODO: Nicer syntax!)
SExpr => reloadName(block, type) : "reload", "{", SType type, "}";

// Debug things by printing expressions at compile-time.
SExpr => printExpr(t, stmt) : "dump", "{", (SStmt(block) stmt) t, "}";
SExpr => printExpr(t, expr) : "dump", "{", (SExpr(block) expr) t, "}";
