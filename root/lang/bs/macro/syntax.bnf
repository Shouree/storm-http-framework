// Syntax extensions useful when generating code or manipulating the syntax tree.
use lang.bs;
use core.lang;

optional delimiter = SDelimiter;
required delimiter = SRequiredDelimiter;

// Use type{a:b:c} to build a type name quickly and easily.
SAtom => createType(pos, block, type) : "name" #keyword, "{", SMacroType type, "}";

// Use named{a:b:c} to refer to objects. Evaluates compile-time to the type of the actual object
// in the compiler.
SAtom => referNamed(pos, block, name) : "named" #keyword, "{", SMacroType name, "}";

// Special case for the current package.
SAtom => referNamed(pos, block) : "named" #keyword, "{", "}";

// Special case for absolute "paths".
SAtom => referNamedAbs(pos, block, name) : "named" #keyword, "{", ":", SMacroType name, "}";

// Allow more "exotic" type names in the Named syntax:
SrcName SMacroType();
SMacroType[100] => x : SType x;
SMacroType[0] => SrcName(pos) : SMacroTypePart -> add - (, ":", SMacroTypePart -> add)*;

NamePart SMacroTypePart();
SMacroTypePart => x : STypePart x;
SMacroTypePart => strRecPart(name) : SString name - SMacroTypeParams(me);

void SMacroTypeParams(RecPart part);
SMacroTypeParams : (, "<", ">")?;
SMacroTypeParams => part : , "<", SMacroType -> add, (",", SMacroType -> add, )* ">";

// Reload a package (TODO: Nicer syntax!)
SExpr => reloadName(block, type) : "reload" #keyword, "{", SType type, "}";

// Debug things by printing expressions at compile-time.
SStmt => printExpr(t, stmt) : "dump" #keyword, "{", (SStmt(block) stmt) t, "}";
SExpr => printExpr(t, expr) : "dump" #keyword, "{", (SExpr(block) expr) t, "}";

// Debug asm by printing asm at compile-time.
SExpr[100] => PrintAsm(pos) : "dumpAsm" #keyword;


// Generate things in classes and at top-level.
SFileItem => Generate(env, name, param, body) :
    SName name #fnName, ":", "generate" #keyword, "(", SName param #varName, ")", "{", SFunctionBody@ body, "}";
SClassItem => Generate(owner, name, param, body) :
    SName name #fnName, ":", "generate" #keyword, "(", SName param #varName, ")", "{", SFunctionBody@ body, "}";

// Pattern-based block- and expr generation. TODO: It would be nice to have whole function generation as well!
SExpr => TemplateExpr(block, env, body) : "pattern" #keyword, "(", SExpr(block) env, ")", SPatternBody body;

// Expression inside a pattern. We only allow the special syntax inside here!
SExpr SPatternBody();
SPatternBody => e : SExpr @e;

// Inserting expressions into templates.
SPatternBody..SAtom => insertExpr(pos, block, pattern) : "$" #keyword - SPatternExpr @pattern = PatternAtom;

// Insert zero or more expressions into a parameter list...
SPatternBody..SActual => insertActuals(pos, to, block, pattern) : "@" #keyword - SPatternExpr @pattern = PatternActual;
// .. or inside array initializations...
SPatternBody..SArrayInitItem => insertExprs(pos, to, block, pattern) : "@" #keyword - SPatternExpr @pattern = PatternArray;
// .. or inside a regular block.
SPatternBody..SBlockItem => insertExprs(pos, parent, pattern) : "@" #keyword - SPatternExpr @pattern = PatternBlockItem;

void SPatternExpr();
SPatternExpr : SName name #keyword = PatternVar;
SPatternExpr : "{" #keyword, SExpr @expr, "}" #keyword = PatternExpr;
