use lang.bs;
use core.lang;

optional delimiter = lang.bs.SDelimiter;
required delimiter = lang.bs.SRequiredDelimiter;

// This file contains the table declarations of the SQL plugin.

// TODO: We should maybe provide "sql name" token to allow for names with spaces in them.

// The top-level table declaration.
SPlainFileItem => DatabaseDecl(name, env, contents) : "DATABASE" #keyword ~ lang.bs.SName name #typeName, "{" [, SDatabase contents, ]+ "}";


// Contents of a database.
Database SDatabase();
SDatabase => Database() : (SDBItem(me),)*;

// An item in a DB declaration.
void SDBItem(Database to);
SDBItem => to : STable -> add;
SDBItem => to : SIndex -> add;
// More here!

// Declaration of an index.
IndexDecl SIndex();
SIndex => IndexDecl(pos, name, table, cols) : "INDEX" #keyword ~ SName name ~ "ON" #keyword ~ SName table, "(", SNameList cols, ")", ";";
SIndex => IndexDecl(pos, table, cols) : "INDEX" #keyword ~ "ON" #keyword ~ SName table, "(", SNameList cols, ")", ";";

// Declaration of a single table.
Table STable();
STable => Table(name) : "TABLE" #keyword ~ SName name, "(" [, STableContent(me), ]+ ")", ";";

// Table content.
void STableContent(Table to);
STableContent => to : STableItem(to) - (, ",", STableItem(to))*;

// Something we can declare inside a table.
void STableItem(Table to);
STableItem => to : SColumn -> add;
STableItem => to : SPKDecl -> add;

// Declaration of a primary key.
Array<SStr> SPKDecl();
SPKDecl => cols : "PRIMARY" #keyword ~ "KEY" #keyword, "(", SNameList cols, ")";

Column SColumn();
// Note: Using SModifiers here is wrong due to whitespace.
SColumn => Column(name, type) : SName name ~ SDatatype type - (~ SModifier(me))*;

// Data types in table declarations.
SQLType SDatatype();
SDatatype => x : SBaseType x;
SDatatype => sized(x, size) : SBaseType x, "(", "[0-9]+" size, ")";

SQLType SBaseType() #typeName;
SBaseType => sqlInteger() : "INTEGER";
SBaseType => sqlInteger() : "INT";
SBaseType => sqlReal() : "REAL";
SBaseType => sqlText() : "TEXT";

// Parse zero or more modifiers.
void SModifiers(Column c);
SModifiers : ;
SModifiers : SModifier(c) - (~ SModifier(c))*;

// Modifiers for columns.
void SModifier(Column to) #keyword;
SModifier => to : "PRIMARY" ~ "KEY" -> setPrimary;
SModifier => to : "ALLOW" ~ "NULL" -> setAllowNull;
SModifier => to : "UNIQUE" -> setUnique;
SModifier => to : "AUTOINCREMENT" -> setAutoIncrement;
SModifier => to : "AUTO_INCREMENT" -> setAutoIncrement;
SModifier => to : "DEFAULT" ~ SLiteral -> setDefault;

SModifier => to : ("NOT" ~ "NULL")@ -> setNotNull;

