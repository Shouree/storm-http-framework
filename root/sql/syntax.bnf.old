use lang.bs;
use core.lang;
//use lang:bs:macro;
use sql;

delimiter = lang.bs.SDelimiter;

SStr SWhere();
SWhere => operand : "[+\-*/%<>=]+"@ operand;
SWhere => identifier : "[\"A-Za-z_][A-Za-z0-9_\"]*"@ identifier;
SWhere => number : "[0-9][0-9A-Za-z_.]*"@ number;
SWhere => token : (lang.bs.SString) @ token;
// "\"[^\"\\\n]*\"" @ token;

Array<SStr> ValueList();
ValueList => Array<SStr>() : SWhere -> push, (,",", SWhere -> push)*;

Array<SStr> SWhereList();
SWhereList => Array<SStr>() : SWhere -> push - (, SWhere -> push)*;

SNameList => Array<SStr>() : SName -> push, (,",",SName -> push)*;
Array<SStr> SNameList();
SNameList => Array<SStr>() : SName -> push, (,",",SName -> push)*;

SExpr => dropExpr(block, tables, x, db) : "DROP[ \t]+", "TABLE[ \t]+", ("IF EXISTS[ \t]+" x)? SNameList tables, "DB[ \t]+", SExpr(block) db;

SExpr => selectExpr(block, select, from, db) : "SELECT[ \t]+", SNameList select,
"FROM[ \t]+", SNameList from, "DB[ \t]+", SExpr(block) db;

void WhereExpr();
WhereExpr => string : SName string;
WhereExpr => stringExpression : SExpr stringExpression;

SExpr => selectExprWhere(block, select, from, where, db) : "SELECT[ \t]+", SNameList select,
"FROM[ \t]+", SNameList from, "WHERE[ \t]+", SWhereList where, "DB[ \t]+", SExpr(block) db;

SExpr => DeleteExpr(block, from, where, db) : "DELETE[ \t+]+", "FROM[ \t]+", SName from,
"WHERE[ \t]+", SWhereList where, "DB[ \t]+", SExpr(block) db;

// This is stuff for Create table
Str SDataType();
SDataType => datatype : "INTEGER" datatype;
SDataType => datatype : "REAL" datatype ;
//SDataType => datatype : "FLOAT" datatype ;
SDataType => datatype : "TEXT" datatype ;

Str SQLModifier();
SQLModifier => mod : "PRIMARY KEY" mod;
SQLModifier => mod : "FOREIGN KEY" mod;
SQLModifier => mod : "NOT NULL" mod;
SQLModifier => mod : "UNIQUE" mod;
SQLModifier => mod : "AUTOINCREMENT" mod;
SQLModifier => mod : "" mod;

Array<Str> SQLCurrModifiers();
SQLCurrModifiers => Array<Str>() : (SQLModifier -> push,)*;

SStr SQLCol2();

SQLCol2 => col2(name, dt, mod) : SName name, SDataType dt, (,SQLCurrModifiers mod)?;

//SStr SQLCol();
//SQLCol => col(name, dt, mod) : SName name, SDataType dt, (,SQLModifier mod)?;

AllColumns => Array<SStr>() : SQLCol2 -> push, (,",",SQLCol2 -> push)*;
Array<SStr> AllColumns();

SExpr => newTableExpr(block, x, name, columns, db) : "CREATE TABLE[ \t]+",
      (,"IF NOT EXISTS[ \t]+" x)?, SName name,"([ \t]*", AllColumns columns, ")[ \t]+",
                "DB[ \t]", SExpr(block) db;

SExpr => insertExpr(block, insert_into, columns, values, db) : "INSERT INTO[ \t]+", SName insert_into,
      (,"([ \t]*", SNameList columns, ")[ \t]+")?, "VALUES[ \t]*",
      	  "([ \t]*" , ValueList values, ")[ \t]+", "DB[ \t]+", SExpr(block) db;

Array<SStr> SetList();
//SetList => Array<SStr>() : Set -> push - (,",", Set -> push)*;
SetList => Array<SStr>() : SWhere -> push, "="@ -> push, SWhere -> push - (,",", SWhere -> push, "="@ -> push, SWhere -> push)*;

SExpr => updateExpr(block, table, sets, where, db) : "UPDATE[ \t]+", SName table, "SET[ \t]+", SetList sets, "WHERE[ \t]+", SWhereList where, "DB[ \t]+", SExpr(block) db;

// Stuff for DATABASE and TABLE
ColumnData CData();
CData => createColumnData(name, dt, mod) : SName name, SDataType dt, SQLCurrModifiers mod;

Array<ColumnData> TableData();
TableData => Array<ColumnData>() : CData -> push, (,",",CData -> push)*;

// SPlainFileItem => TableDecl(name, env, columns) : "TABLE[ \t]+", SName name, "{" [, TableData columns,]+ "}";
SPlainFileItem => DBDecl(name, env, content) : "DATABASE[ \t]+", SName name, "{" [, SDbCont content,]+ "}";

TableContent DData();
DData => createTableData(name, columns) : "TABLE[ \t]+", SName name, "(" [, TableData columns,]+ ");";

Array<TableContent> SDbCont();
SDbCont => Array<TableContent>() : DData -> push, (,DData -> push,)*;
