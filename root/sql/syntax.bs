use core:lang;
use lang:bs;
use lang:bs:macro;

use sql;

class ColumnData on Compiler {
    public Str name;
    public Str datatype;
    public Array<Str> modifiers;
}

class TableContent on Compiler {
    public Str name;
    public Array<ColumnData> columns;
}

class DbDecl extends NamedDecl {
    SStr name;
    Scope scope;
    Array<TableContent> tables;

    init(SStr name, Scope scope, Array<TableContent> tables) {
        init() {
            name = name;
            scope = scope;
            tables = tables;
        }
    }

    Named doCreate() {
        DbType(name, tables);
    }
}

Bool correctMod(Array<Str> a, Array<Str> b) {
    for(mod in a) {
        Bool found = false;
        for(attr in b) {
            if(mod == attr) {
                found = true;
            }
        }
        if(!found) {
            print("Modifier: " + mod + " was not found.");
            return false;
        }
    }

    return true;
}

class DbConnection {
    Database m_db;

    init() {
        init() {
            m_db = EmptyDB();
        }
    }

    void connect(Database db) {
        Int i = 0;
        if (decl = this.typeOf() as DbType) {
            for(table in decl.tables) {
                i = 0;
                var schema = db.schema(table.name);
                if (schema.size > 0){
                    if(table.columns.count() == schema.sizeNat() ) {
                        for(column in table.columns) {
                            var content = schema.getRow(i);
                            if(column.datatype != content.getDt() ) {
                                print("Table: " + table.name);
                                print("Incompatible Datatype.\nSchema DT: " + content.getDt() +
                                    "\nPredefined DT: " + column.datatype);
                                return;
                            }
                            var attr = content.getAttr();
                            if(column.modifiers.count != attr.count ) {
                                print("Different amount of attributes on column: " + column.name +
                                    "\nAnd column: " + content.getName());
                                return;
                            }
                            if(!correctMod(column.modifiers, content.getAttr()) ) {
                                print("Modifiers does not match was not found.");
                                return;
                            }
                            i++;
                        }
                    }
                }else {
                    var query = Str("CREATE TABLE " + table.name + " (\n\t");
                    Nat j = 0;
                    for(column in table.columns) {
                        query += column.name + " " + column.datatype + " ";
                        for( Nat i = 0; i < column.modifiers.count; i++) {
                            query += column.modifiers[i] + " ";
                            if(i == column.modifiers.count -1)
                                if (j != table.columns.count-1)
                                    query += ",\n\t";
                        }
                        j++;
                    }

                    query += "\n)";

                    var stmt = db.prepare(query);
                    stmt.execute;
                    stmt.finalize;
                }
            }
            // We good boys.
            // print("Database structure copied.");
            m_db = db;
        }
    }

	Database getDB() {
        return m_db;
    }
}

class DbType extends Type {
    Array<TableContent> tables;

    init(SStr name, Array<TableContent> tables) {
        init(name.v, TypeFlags:typeClass) {
            tables = tables;
        }

        setThread(named{Compiler});
        setSuper(named{DbConnection});
        add(TypeDefaultCtor(this));
    }
}


class TableDecl extends NamedDecl {
    SStr name;
    Scope scope;
    Array<ColumnData> columns;

    init(SStr name, Scope scope, Array<ColumnData> columns) {
        init() {
            name = name;
            scope = scope;
            columns = columns;
        }
    }

    Named doCreate() {
		TableNamed(name, columns);
	}
}

class TableNamed extends Named {
    Array<ColumnData> columns;

    init(SStr name, Array<ColumnData> columns) {
        init(name.v) {
            columns = columns;
        }
    }
}

ColumnData createColumnData(SStr name, Str dt, Array<Str> mod) on Compiler {
    ColumnData data;
    data.name = name.v;
    data.datatype = dt;
    data.modifiers = mod;

    return data;
}

TableContent createTableData(SStr name, Array<ColumnData> d) on Compiler {
    TableContent cont;
    cont.name = name.v;
    cont.columns = d;

    return cont;
}

Str strMod(Block block, Str str, Array<SStr> arr, Str delim) on Compiler {
	for(Nat i = 0; i < arr.count(); i++){
		Expr e = namedExpr(block, arr[i], Actuals());
		if (e as UnresolvedName){
			// No variable found.
			str += arr[i].v.toS;
			if(i != arr.count() - 1)
				str += delim;
		}
		else{
			// Variable found.
			str += "?";
			if(i != arr.count() - 1)
				str += delim;
		}
	}
	return str;
}

Array<Expr> findVariables(Block block, Array<SStr> arr, Array<Expr> bindValues) on Compiler {
	for(Nat i = 0; i < arr.count(); i++){
		Expr e = namedExpr(block, arr[i], Actuals());
		if(e as UnresolvedName){
			//No variable found.
		}
		else{
			bindValues.push(e);
		}
	}
	return bindValues;
}

ExprBlock bind(ExprBlock stmtBlock, StrLiteral query, Array<Expr> binds, Expr db) on Compiler {
    Expr getDB = namedExpr(stmtBlock, SStr("getDB"), db, Actuals());
	Expr prepare = namedExpr(stmtBlock, SStr("prepare"), getDB, Actuals(query));
	Var stmtVar(stmtBlock,SStr("stmt"), prepare);
	stmtBlock.add(stmtVar);

	for(id, val in binds) {
		id++;
		NumLiteral idLiteral(SrcPos(), id.int);
		stmtBlock.add(pattern(stmtBlock){stmt.bind(${idLiteral}, ${val});});
	}
	stmtBlock.add(pattern(stmtBlock){stmt.execute();});
	return stmtBlock;
}

Expr selectExpr(Block block, Array<SStr> select, Array<SStr> from, Expr db) on Compiler {
    Str sel;
    sel = strMod(block, sel, select, ",");

    Str fr;
    fr = strMod(block, fr, from, ",");

    var query = StrLiteral(select[0].pos,"SELECT ${sel} FROM ${fr}");

    return pattern(block) {
        var stmt = ${db}.getDB().prepare(${query});
        stmt.execute();
        stmt;
    };
}

Expr selectExprWhere(Block block, Array<SStr> select, Array<SStr> from, Array<SStr> where, Expr db ) on Compiler {
    Str sel;
    sel = strMod(block, sel, select, ",");

    Str fr;
    fr = strMod(block, fr, from, ",");

    Str wh;
    wh = strMod(block, wh, where, " ");

    Array<Expr> binds;
    binds = findVariables(block, where, binds);

    var query = StrLiteral(select[0].pos,"SELECT ${sel} FROM ${fr} WHERE ${wh};");

    ExprBlock stmtBlock(SrcPos(), block);
    stmtBlock = bind(stmtBlock, query, binds, db);
    stmtBlock.add(pattern(stmtBlock){stmt;});
    return stmtBlock;
}

Expr dropExpr(Block block, Array<SStr> tables, Str? x, Expr db) on Compiler{
    Str tab;
    tab = strMod(block, tab, tables, ",");

    if(x) {
    	var query = StrLiteral(tables[0].pos, "DROP TABLE ${x} ${tab}");
		return pattern(block){
			var stmt = ${db}.getDB().prepare(${query});
			stmt.execute();
		};
    } else {
		var query = StrLiteral(tables[0].pos, "DROP TABLE ${tab}");
		return pattern(block){
			var stmt = ${db}.getDB().prepare(${query});
			stmt.execute();
		};
    }
}

SStr col2(SStr name, Str dt, Array<Str>? mod) on Compiler {
    Str modifiers = "";
    if(mod)
        for(modi in mod)
            modifiers += modi + " ";

    SStr column = name.v + " " + dt + " " + modifiers;
    return column;
}

Expr newTableExpr(Block block, Str? x , SStr name, Array<SStr> columns, Expr db) on Compiler {
    Str col;
    col = strMod(block, col, columns, ",\n\t");
    if(x) {        var query = StrLiteral(name.pos, "CREATE TABLE ${x} ${name.v} (\n\t${col}\n)");
        return pattern(block) {
            var stmt = ${db}.getDB().prepare(${query});
            stmt.execute();
        };
    } else {
        var query = StrLiteral(name.pos, "CREATE TABLE ${name.v} ( ${col} )");
        return pattern(block) {
            var stmt = ${db}.getDB().prepare(${query});
            stmt.execute();
        };
    }
}

Expr DeleteExpr(Block block, SStr from, Array<SStr> where, Expr db) on Compiler {
    Str wh;
    wh = strMod(block, wh, where, " ");

    Array<Expr> binds;
    binds = findVariables(block, where, binds);

    var query = StrLiteral(SrcPos(),"DELETE FROM ${from.v} WHERE ${wh};");

    ExprBlock stmtBlock(SrcPos(), block);
    stmtBlock = bind(stmtBlock, query, binds, db);
    return stmtBlock;
}

Expr insertExpr(Block block, SStr insert_into, Array<SStr>? columns, Array<SStr> values, Expr db) on Compiler {
    Str col;
    if (columns) {
		col += "(";
		col = strMod(block, col, columns, ",");
		col += ")";
    }

    Str val;
    val = strMod(block, val, values, ",");

    Array<Expr> binds;
    binds = findVariables(block, values, binds);

    var query = StrLiteral(insert_into.pos,"INSERT INTO ${insert_into.v}${col} VALUES(${val})");

    ExprBlock stmtBlock(SrcPos(), block);
    stmtBlock = bind(stmtBlock, query, binds, db);
    return stmtBlock;

}

Expr updateExpr(Block block, SStr table, Array<SStr> sets, Array<SStr> where, Expr db) on Compiler {
	Str set;
	//set = strMod(block, set, sets, ",");
	Bool eqFound = false;
	Array<Expr> binds;
	for (Nat i = 0; i < sets.count(); ++i) {
		if (eqFound) {
			// kolla om variabel
			Expr e = namedExpr(block, sets[i], Actuals());
			if (e as UnresolvedName){
				// No variable found.
				set += sets[i].v.toS;
				if(i != sets.count() - 1)
					set += ",";
			}
			else{
				// Variable found.
				set += "?";
				binds.push(e);
				if(i != sets.count() - 1)
					set += ",";
			}
			eqFound = false;
		}
		else if (sets[i].v.toS == "=") {
			eqFound = true;
			set += "=";
		}
		else
			set += sets[i].v.toS;
	}

	Str wh;
	wh = strMod(block, wh, where, " ");

	binds = findVariables(block, where, binds);

	var query = StrLiteral(table.pos, "UPDATE ${table.v} SET ${set} WHERE ${wh}");
	ExprBlock stmtBlock(SrcPos(), block);
	stmtBlock = bind(stmtBlock, query, binds, db);
	return stmtBlock;
}
