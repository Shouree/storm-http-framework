use core:lang;
use lang:bs;
use lang:bs:macro;

/**
 * A SQL type.
 */
class SQLType {
	// SQL-name.
	Str sql;

	// Storm-type.
	Type storm;

	init(Str sql, Type storm) {
		init {
			sql = sql;
			storm = storm;
		}
	}
}

SQLType sqlInteger() {
	SQLType("INTEGER", named{Int});
}
SQLType sqlReal() {
	SQLType("REAL", named{Double});
}
SQLType sqlText() {
	SQLType("TEXT", named{Str});
}

/**
 * A column declaration.
 */
class ColumnDecl {
    Str name;
	SQLType datatype;
    Array<Str> modifiers;

	init(SStr name, SQLType type, Array<Str> modifiers) {
		init {
			name = name.v;
			datatype = type;
			modifiers = modifiers;
		}
	}
}

/**
 * Declaration of an entire table.
 */
class TableDecl {
    Str name;
    Array<ColumnDecl> columns;

	init(SStr name, Array<ColumnDecl> columns) {
		init {
			name = name.v;
			columns = columns;
		}
	}
}

/**
 * Database description.
 */
class DBContents {
	// Tables declared.
	TableDecl[] tables;

	// TODO: Also support indices, constraints, etc.

	void add(TableDecl decl) {
		tables.push(decl);
	}
}

/**
 * Declaration of a database.
 */
class DBDecl extends NamedDecl {
    SStr name;
    Scope scope;
	DBContents contents;

    init(SStr name, Scope scope, DBContents contents) {
        init() {
            name = name;
            scope = scope;
			contents = contents;
        }
    }

    Named doCreate() {
        DBType(name, contents);
    }
}

/**
 * Type stored in the name tree.
 */
class DBType extends Type {
    DBContents contents;

    init(SStr name, DBContents contents) {
        init(name.v, TypeFlags:typeClass) {
            contents = contents;
        }

		setSuper(named{TypedConnection});
		addCtor();
    }

	private addCtor() {
		BSTreeCtor ctor([ValParam(thisPtr(this), "this"), ValParam(named{Connection}, "connection")], SrcPos());
		CtorBody body(ctor, Scope());

		// TODO: Add statements here.

		ctor.body = body;
		add(ctor);
	}
}

/**
 * Base class inherited from the DBType class.
 */
class TypedConnection {
	// Underlying database.
	Database db;

	// Create and verify the database structure.
	init(Database db, DBType structure) {
		init { db = db; }
	}
}

