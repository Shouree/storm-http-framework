use core:lang;
use lang:bs;
use lang:bs:macro;

/**
 * A column declaration.
 */
class Column {
    Str name;
	SQLType datatype;
    Array<Str> modifiers;

	init(SStr name, SQLType type, Array<Str> modifiers) {
		init {
			name = name.v;
			datatype = type;
			modifiers = modifiers;
		}
	}

	// Create an SQL part for this column.
	Str toSQL() {
		StrBuf buffer;
		buffer << "\"" << name << "\" " << datatype.sql;
		for (m in modifiers)
			buffer << " " << m;

		buffer.toS;
	}

	void toS(StrBuf to) : override {
		to << name << " " << datatype.sql;
		for (m in modifiers)
			to << " " << m;
	}
}

/**
 * Declaration of an entire table.
 */
class Table {
    Str name;
    Array<Column> columns;

	init(SStr name, Array<Column> columns) {
		init {
			name = name.v;
			columns = columns;
		}
	}

	// Find a column.
	Column? find(Str name) {
		for (c in columns)
			if (c.name == name)
				return c;
		null;
	}

	// Create an SQL statement for this table declaration.
	Str toSQL() {
		StrBuf buffer;
		buffer << "CREATE TABLE \"" << name << "\" (";
		for (i, col in columns) {
			if (i > 0)
				buffer << ", ";
			buffer << col.toSQL();
		}
		buffer << ");";

		buffer.toS;
	}
}

/**
 * Database description.
 */
class Database {
	// Tables declared.
	Table[] tables;

	// TODO: Also support indices, constraints, etc.

	// Add a table.
	void add(Table decl) {
		tables.push(decl);
	}

	// Find a table.
	Table? find(Str name) {
		// TODO: Speedier lookup?
		for (table in tables)
			if (table.name == name)
				return table;
		null;
	}
}

/**
 * Declaration of a database.
 */
class DatabaseDecl extends NamedDecl {
    SStr name;
    Scope scope;
	Database contents;

    init(SStr name, Scope scope, Database contents) {
        init() {
            name = name;
            scope = scope;
			contents = contents;
        }
    }

    Named doCreate() {
        DatabaseType(name, contents);
    }
}

/**
 * Type stored in the name tree.
 */
class DatabaseType extends Type {
    Database contents;

    init(SStr name, Database contents) {
        init(name.v, TypeFlags:typeClass) {
            contents = contents;
        }

		setSuper(named{TypedConnection});
		addCtor();
    }

	private void addCtor() {
		BSTreeCtor ctor([ValParam(thisPtr(this), "this"), ValParam(named{DBConnection}, "db")], SrcPos());
		CtorBody body(ctor, Scope());
		if (var = body.variable(SimplePart("db"))) {
			Actuals params;
			params.add(LocalVarAccess(SrcPos(), var));
			params.add(ReferDBType(this));
			body.add(InitBlock(SrcPos(), body, params));
		} else {
			throw InternalError("Unable to find the 'db' parameter.");
		}

		ctor.body = body;
		add(ctor);
	}
}

/**
 * Expression that returns a type.
 */
private class ReferDBType extends Expr {
	private DatabaseType referTo;

	init(DatabaseType referTo) {
		init(SrcPos()) { referTo = referTo; }
	}

	ExprResult result() : override {
		ExprResult(Value(named{DatabaseType}));
	}

	void code(CodeGen state, CodeResult result) : override {
		if (result.needed) {
			var v = result.location(state);
			state.l << core:asm:mov(v, core:asm:objPtr(referTo));
			result.created(state);
		}
	}

	Str toS() : override {
		"<type>";
	}
}

/**
 * Base class inherited from the DBType class.
 */
class TypedConnection {
	// Underlying database connection.
	DBConnection connection;

	// Cached prepared statements. TODO: Copy these on a thread switch?
	private Nat->Statement statements;

	// Create and verify the database structure.
	init(DBConnection conn, DatabaseType t) {
		init { connection = conn; }

		checkStructure(t.contents);
	}

	// Close.
	void close() {
		for (k, v in statements)
			f.finalize();
		connection.close();
	}

	// Get a cached prepared statement based on its ID.
	// TODO: One idea here is to remove statements that are "prepared" and not return them
	// until we are done with them. That allows us to be re-entrant properly.
	Statement prepare(Nat id, Str query) {
		var iter = statements.find(id);
		if (iter == statements.end) {
			Statement stmt = connection.prepare(query);
			statements.put(id, stmt);
			return stmt;
		} else {
			return iter.v;
		}
	}

	// Check the database contents for a match.
	private void checkStructure(Database db) {
		// TODO: This should be rewritten and improved.
		for (table in db.tables) {
			if (schema = connection.schema(table.name)) {
				var queries = checkColumns(table, schema);
				for (q in queries) {
					var stmt = connection.prepare(q);
					stmt.execute();
					stmt.finalize();
				}
			} else {
				// Create the table.
				var stmt = connection.prepare(table.toSQL());
				stmt.execute();
				stmt.finalize();
			}
		}
	}
}

// Helper (on the Compiler thread) for checking column declarations. We need the parser, that's why
// we run on the compiler thread.
private Str[] checkColumns(Table table, Schema schema) {
	if (table.columns.count < schema.count)
		throw SchemaError("Too many columns in the database.", table, schema);

	Str[] queries;

	// We need to parse the modifier string...
	Parser<SModifiers> parser;

	for (Nat i = 0; i < schema.count; i++) {
		var ref = table.columns[i];
		var curr = schema[i];

		if (ref.name != curr.name)
			throw SchemaError("Mismatched name of column ${i}", table, schema);

		if (ref.datatype.sql != curr.datatype)
			throw SchemaError("Mismatched type of column ${i}", table, schema);

		parser.parse(curr.attributes, core:io:Url());
		if (parser.hasError())
			throw SQLError("Failed to parse the column attributes for column ${curr.name}: ${curr.attributes}");

		Set<Str> attrs;
		for (x in parser.tree.transform)
			attrs.put(x);

		Bool modify = false;
		for (x in ref.modifiers)
			if (!attrs.has(x))
				modify = true;

		// Note: On databases other than SQLite, we are probably able to change these aspects.
		if (modify)
			throw SchemaError("Incorrect attributes for column ${i}", table, schema);
	}

	for (Nat i = schema.count; i < table.columns.count; i++) {
		// Add a column!
		var col = table.columns[i];
		queries << "ALTER TABLE \"${table.name}\" ADD ${col.toSQL};";
	}

	queries;
}
