use layout;
use core.lang;
use lang.bs;

optional delimiter = SDelimiter;
required delimiter = SRequiredDelimiter;

// Provide a new type definition keyword: 'window'.
// TODO: We might want to update this grammar to support decorators.
SClass => createFrame(pos, env, name, body) : "frame" #keyword ~ SName name #typeName, "{" - [SWindowBody@ body, ]+ "}";
SClass => createDialog(pos, env, name, body) : "dialog" #keyword ~ SName name #typeName, "{" - [SWindowBody@ body, ]+ "}";
SClass => createWindow(pos, env, name, body) : "window" #keyword ~ SName name #typeName, "{" - [SWindowBody@ body, ]+ "}";
SClass => createWindow(pos, env, name, parent, body) : "window" #keyword, SName name #typeName, "extends" #keyword, SType parent, "{" - [SWindowBody@ body, ]+ "}";

// Custom class body definition to include some more things!
ClassBody SWindowBody(Class owner);
SWindowBody => WindowBody(owner) : (SDocClassItem(owner) -> add)* - SDelimiter;

// The extra layout block only available inside 'window' declarations.
SWindowBody..SClassItem => layout : "layout[ \t]" #keyword, SWindowLayout layout;

SLayoutRoot SWindowLayout();
SWindowLayout => layout : SLayoutRoot @layout;

// Allow type declarations in the layout.
SWindowLayout..SLayout => LayoutDeclBlock(block, name) : SType type, SName name #varName, ("(", SParamList(block.block) params, ")",)? "{" [, SLayoutContent(me),]+ "}" = SLayoutMemberDecl;


// Helper to manage layers in the Graphics object nicely.
SStmt => graphicsLayer(pos, block, g, params, contents) : "layer" #keyword, "(", SExpr(block) g, (",", SExpr(block) params,)* ")", SBlock(block) contents;
