use core:geometry;

/**
 * Describes a layout for a number of components.
 *
 * Layouts can be nested inside each other to describe more complex interactions. If a layout
 * requires to maintain additional information about each component, it should contain a class named
 * 'Info' for that purpose.
 */
class Layout extends Component {
	// Our allotted space.
	protected Rect space;

	// Get the position of the layout.
	Rect pos() {
		space;
	}

	// Set the allocated space. This will trigger a re-layout.
	assign pos(Rect p) {
		space = p;
		layout();
	}

	// Get the minimum size of the layout.
	Size minSize() {
		Size(0, 0);
	}

	// Re-compute the layout here.
	void layout() {}

	// Add a child to this layout.
	void add(Component child) {}
}

// Default border/space in the Ui.
Size defaultBorder() {
	Size(8, 8);
}


/**
 * A simple layout that adds a border around the single component within.
 */
class Border extends Component {
	// The one and only component inside here.
	private Component? child;

	// Size of the border.
	Size border;

	// Initialize.
	init() {
		init() { border = defaultBorder; }
	}

	// Add/set the child.
	void add(Component c) {
		child = c;
	}

	// Re-compute the layout.
	void layout() {
		unless (c = child)
			return;

		Rect p = pos;

		p.p0 += border;
		p.p1 -= border;

		c.pos = p;
	}
}
