use lang:bs;
use lang:bs:macro;
use core:lang;
use core:debug;

/**
 * Presentation expression
 */
class PExpr extends Expr {
	ExprBlock outer;
	ExprBlock into;
	LocalVar pVar;

	ctor(Block p, SStr title) {

		ExprBlock o(p);
		ExprBlock b(o);

		SStr varName = "presentation";
		Var var(o, name{present:Presentation}, varName, Actual(strConstant(title)));
		o.add(var);

		init() {
			outer = o;
			into = b;
			pVar = var.var;
		}

		outer.add(into);
		outer.add(LocalVarAccess(pVar));
	}

	void add(Expr e) {
		into.add(namedExpr(into, SStr("add"), LocalVarAccess(pVar), Actual(e)));
	}

	Value result() {
		outer.result();
	}

	void code(CodeGen state, CodeResult to) {
		outer.code(state, to);
	}

	Str toS() {
		outer.toS();
	}
}

class SExpr extends Expr {
	ExprBlock outer;
	ExprBlock into;
	LocalVar sVar;

	ctor(PExpr p, SStr type, Actual params) {
		ExprBlock o(p.into);
		ExprBlock b(o);

		SStr varName = "slide";
		TypeName name = name{present};
		name.add(TypePart(type.v + "Slide"));

		Var var(o, name, varName, params);
		o.add(var);

		init() {
			outer = o;
			into = b;
			sVar = var.var;
		}

		o.add(into);
		o.add(LocalVarAccess(sVar));
	}

	void add(Expr e) {
		into.add(namedExpr(into, SStr("add"), LocalVarAccess(sVar), Actual(e)));
	}

	Value result() {
		outer.result();
	}

	void code(CodeGen state, CodeResult to) {
		outer.code(state, to);
	}

	Str toS() {
		outer.toS();
	}
}


Expr itemExpr(Block block, SStr name, Actual params) {
	name.v = name.v + "Item";
	namedExpr(block, name, params);
}
