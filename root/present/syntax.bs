use lang:bs;
use lang:bs:macro;
use core:lang;
use core:debug;

/**
 * Presentation expression
 */
class PExpr extends Expr {
	ExprBlock outer;
	ExprBlock into;
	LocalVar pVar;

	ctor(SrcPos pos, Block p, Str title) {

		ExprBlock o(pos, p);
		ExprBlock b(pos, o);

		SStr varName("presentation", pos);
		Var var(o, name{present:Presentation}, varName, Actuals(strConstant(pos, title)));
		o.add(var);

		init(pos) {
			outer = o;
			into = b;
			pVar = var.var;
		}

		outer.add(into);
		outer.add(LocalVarAccess(pos, pVar));
	}

	void add(Expr e) {
		into.add(namedExpr(into, SStr("add", pos), LocalVarAccess(pos, pVar), Actuals(e)));
	}

	ExprResult result() {
		outer.result();
	}

	void code(CodeGen state, CodeResult to) {
		outer.code(state, to);
	}

	Str toS() {
		outer.toS();
	}
}

/**
 * Slide expression.
 */
class SlideExpr extends Expr {
	ExprBlock outer;
	ExprBlock into;
	LocalVar sVar;

	ctor(PExpr p, SStr type, Actuals params, IntroExpr intro) {
		ExprBlock o(type.pos, p.into);
		ExprBlock b(type.pos, o);

		SStr varName("slide", type.pos);
		SrcName name(type.pos);
		name.add(type.v + "Slide");

		Var var(o, name, varName, params);
		o.add(var);

		init(type.pos) {
			outer = o;
			into = b;
			sVar = var.var;
		}

		o.add(into);
		intro.add(o, LocalVarAccess(pos, sVar));
		o.add(LocalVarAccess(pos, sVar));
	}

	void add(ItemInfo i) {
		Str name = if (i.direct) { "add"; } else { "addDelayed"; };
		Actuals actual(i.item);
		Expr? time = i.time;
		if (time)
			actual.add(time);
		into.add(namedExpr(into, SStr(name, pos), LocalVarAccess(pos, sVar), actual));
	}

	void add(ItemInfo[] i) {
		for (elem in i) {
			add(elem);
		}
	}

	ExprResult result() {
		outer.result();
	}

	void code(CodeGen state, CodeResult to) {
		outer.code(state, to);
	}

	Str toS() {
		outer.toS();
	}
}

class IntroExpr {
	// Name of the transition (if any).
	Str? name;
	Actuals params;

	ctor() {
		init() {}
	}

	ctor(SStr name, Actuals params) {
		init() {
			name = name.v # "Intro";
			params = params;
		}
	}

	void add(ExprBlock b, Expr to) {
		if (name) {
			Expr param = namedExpr(b, SStr(name), params);
			b.add(namedExpr(b, SStr("setIntro"), to, Actuals(param)));
		}
	}
}

class ItemInfo {
	Expr item;

	Bool direct;
	Expr? time;

	ctor(Expr item, Bool direct) {
		init() {
			item = item;
			direct = direct;
		}
	}

	ctor(Expr item, Expr time) {
		init() {
			item = item;
			direct = false;
			time = time;
		}
	}
}

ItemInfo itemExpr(Block block, SStr name, Actuals params) {
	name.v = name.v + "Item";
	ItemInfo(namedExpr(block, name, params), true);
}

ItemInfo itemClickExpr(Block block, SStr name, Actuals params) {
	name.v = name.v + "Item";
	ItemInfo(namedExpr(block, name, params), false);
}

ItemInfo itemTimeExpr(Block block, Expr time, SStr name, Actuals params) {
	name.v = name.v + "Item";
	ItemInfo(namedExpr(block, name, params), time);
}
