use ui;
use core:geometry;
use core:debug;
use graphics;

/**
 * Main presentation window.
 */
class PresentWindow extends Frame {
	// Presentation we're showing.
	Presentation p;

	// Painter.
	PresentPainter paint;

	// Current slide.
	Nat slide;

	ctor(Presentation show) {
		init(show.title) {
			p = show;
			paint(SlideStyle(show));
			slide = 0;
		}

		size(Size(640, 480));
		painter(paint);

		show(slide);

		create();
	}

	// Show a new slide.
	void show(Nat s) {
		Slide? show;
		slide = s;
		if (s < p.slides.count) {
			show = p.slides[s];
		}

		paint.show(show);
		repaint();
	}

	// Next slide.
	void next() {
		if (slide < p.slides.count)
			show(slide + 1);
	}

	// Prev slide.
	void prev() {
		if (slide > 0)
			show(slide - 1);
	}

	// Key handling.
	Bool onKey(Bool down, Nat id) {
		if (down) {
			if (id == 13 | id == 39) {
				next;
			} else if (id == 37) {
				prev;
			} else if (id == 27) {
				close;
			} else {
				print("Key: " # id);
			}
		}
		super:onKey(down, id);
	}

}


/**
 * Painter for the presentation window.
 */
class PresentPainter extends Painter {
	// Current slide.
	Slide? slide;

	// End of presentation brush.
	SolidBrush endColor;

	// Style.
	SlideStyle style;

	ctor(SlideStyle style) {
		init() {
			endColor = black;
			style = style;
		}
	}

	// Show a slide.
	void show(Slide? s) {
		slide = s;
	}

	Bool render(Size s, Graphics g) {
		Size target(640, 480);

		if (slide) {
			g.fill(style.bg);

			Float scaleFactor = s.h / target.h;
			if (s.w / target.w < scaleFactor)
				scaleFactor = s.w / target.w;

			Point p = s;
			Size scaled = target * scaleFactor;
			g.transform(translate(s.center - scaled.center) * scale(scaleFactor));
			g.push();
			slide.draw(style, target, g);
		} else {
			g.fill(endColor);
			false;
		}
	}

}
