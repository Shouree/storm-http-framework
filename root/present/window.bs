use ui;
use core:geometry;
use core:debug;
use graphics;

/**
 * Main presentation window.
 */
class PresentWindow extends Frame {
	// Presentation we're showing.
	Presentation p;

	// Painter.
	PresentPainter paint;

	// Current slide.
	Nat slide;

	ctor(Presentation show) {
		init(show.title) {
			p = show;
			paint(SlideStyle(show));
			slide = 0;
		}

		size(Size(640, 480));
		painter(paint);

		show(slide);

		create();
	}

	// Closed.
	void close() {
		paint.cleanup();
		super:close();
	}

	// Show a new slide.
	void show(Nat s) {
		Slide? show;
		slide = s;
		if (s < p.slides.count) {
			show = p.slides[s];
		}

		paint.show(show);
		repaint();
	}

	// Next slide.
	void next() {
		if (paint.advance) {
		} else if (slide < p.slides.count) {
			show(slide + 1);
		}
	}

	// Prev slide.
	void prev() {
		if (slide > 0)
			show(slide - 1);
	}

	// Key handling.
	Bool onKey(Bool down, Nat id) {
		if (down) {
			if (id == 13 | id == 39) {
				next;
			} else if (id == 37) {
				prev;
			} else if (id == 27) {
				close;
			} else if (id == 83) { // s
				paint.surpriseKey();
			} else {
				print("Key: " # id);
			}
		}
		super:onKey(down, id);
	}

}


/**
 * Painter for the presentation window.
 */
class PresentPainter extends Painter {
	// Last slide.
	Slide? lastSlide;

	// Current slide.
	Slide? slide;

	// Current intro.
	SlideIntro? intro;

	// End of presentation brush.
	SolidBrush endColor;

	// Style.
	SlideStyle style;

	// Brush used outside the slide's limit.
	SolidBrush outsideColor;

	ctor(SlideStyle style) {
		init() {
			endColor = black;
			outsideColor = black;
			style = style;
		}
	}

	// Surprise key pressed.
	void surpriseKey() {
		if (slide)
			slide.onSurprise();
	}

	// Advance the current slide.
	Bool advance() {
		if (slide) {
			slide.doAnimation(true);
		} else {
			false;
		}
	}

	// Show a slide.
	void show(Slide? s) {
		cleanup;
		lastSlide = slide;
		slide = s;
		if (slide) {
			intro = slide.intro;
			slide.repaintFn = &this->repaint;
			slide.show;

			if (intro) {
				intro.start;
			}
		}
	}

	Bool render(Size s, Graphics g) {
		Size target(1024, 768);
		Bool animate = false;

		if (slide) {
			g.fill(outsideColor);

			Float scaleFactor = s.h / target.h;
			if (s.w / target.w < scaleFactor)
				scaleFactor = s.w / target.w;

			Point p = s;
			Size scaled = target * scaleFactor;
			g.transform(translate(s.center - scaled.center) * scale(scaleFactor));
			g.push();
			g.fill(Rect(Point(), target), style.bg);

			animate |= slide.animate();

			if (intro) {
				animate = true;
				Bool more = intro.draw(lastSlide, slide, style, target, g);
				if (more == false)
					this.intro = null;
			} else {
				animate |= slide.draw(style, target, g);
			}
		} else {
			g.fill(endColor);
		}

		animate;
	}

	void cleanup() {
		if (slide) {
			slide.repaintFn = null;
		}
	}

}
