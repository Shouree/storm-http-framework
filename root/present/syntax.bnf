use lang.bs;

delimiter = SDelimiter;

SExpr => PExpr(pos, block, title) : "presentation" #keyword, SString title, "{" [, (SSlide(block, me) -> add, ";", )* ]+ "}";

// A single slide:
SlideExpr SSlide(lang.bs.Block block, PExpr p);
SSlide => SlideExpr(p, type, params, t) :
    SIntro(block) t, SName type #typeName [, SSlideParams(block) params]$, SSlideCont(block) -> add;

// Parameters to a slide.
Array<ItemInfo> SSlideCont(Block block);
SSlideCont => Array<ItemInfo>() : ;
SSlideCont => Array<ItemInfo>() : "{" [, (SItem(block) -> push, ";", )* ]+ "}";

// Slide intro:
IntroExpr SIntro(Block b);
SIntro => IntroExpr(type, params) : SName type #typeName, SSlideParams(b) params, "->";
SIntro => IntroExpr() : "";

// Parameters to a slide.
Actuals SSlideParams(lang.bs.Block b);
SSlideParams => Actuals() : "";
SSlideParams => Actuals() : SExpr(b) -> add (, ",", SExpr(b) -> add)*;

// Items inside a slide.
ItemInfo SItem(Block block);
SItem => itemExpr(block, name, params) : SName name #typeName, SSlideParams(block) params;
SItem => itemClickExpr(block, name, params) : "\+", SName name #typeName, SSlideParams(block) params;
SItem => itemTimeExpr(block, time, name, params) : "\+", SAtom(block) time, ":", SName name #typeName, SSlideParams(block) params;
