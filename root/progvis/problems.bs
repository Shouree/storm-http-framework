use ui;
use layout;
use core:geometry;
use progvis:net;

dialog ProblemsDlg {
	layout Grid {
		wrapCols: 1;
		expandCol: 0;
		expandRow: 1;

		Grid {
			RadioButton unsolved("Unsolved", 1) {}
			RadioButton solved("Solved", 1) {}
			RadioButton mine("My problems", 1) {}
		}

		ScrollWindow content(ProblemList(), Size(300, 200)) {
			horizontal: false;
			vertical: true;
		}
	}

	private Client client;

	init(Client client) {
		init("Problems", Size(500, 400)) {
			client = client;
		}

		unsolved.checked = true;
		unsolved.onActivate = &this.onChange();
		solved.onActivate = &this.onChange();
		mine.onActivate = &this.onChange();

		spawn updateSelection();
	}

	private void onChange() {
		spawn updateSelection();
	}

	private void updateSelection() {
		var q = if (unsolved.checked) {
			ChallengesRequest(false);
		} else if (solved.checked) {
			ChallengesRequest(true);
		} else {
			OwnProblemsRequest();
		};

		if (ans = client.query(q) as ProblemResponse) {
			content.content = ProblemList(ans.problems);
		}
	}
}

private Font boldFont on Ui = {
	var x = defaultFont.clone();
	x.weight = 1000;
	x;
};

window ProblemList extends Container {
	layout Grid grid {
		wrapCols: 3;
		expandCol: 0;

		Label("Problem") { font: boldFont; }
		Label("Author") { font: boldFont; }
		Label("Solutions") { font: boldFont; }
	}

	init() {
		init() {}

		addChild(Label("Loading..."));
	}

	init(Problem[] problems) {
		init() {}

		for (p in problems)
			add(p);
	}

	private void add(Problem p) {
		addChild(Label(p.title));
		addChild(Label(p.author));
		addChild(Label(p.solutions.toS));
	}

	private void addChild(Window child) {
		grid.add(component(child));
		add(child);
	}

	private void addChild(Window child, Font font) {
		child.font = font;
		addChild(child);
	}
}
