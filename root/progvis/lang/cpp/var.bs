use core:lang;
use core:asm;

/**
 * Local variable in C++.
 *
 * Variables are always a pointer to an array allocation the size of one element, just like value
 * types are stored in a Variant.
 *
 * If the referred type is a class-type in Storm (i.e. it is foreign, we don't use them in the C++
 * world), it is just a pointer to the object.
 *
 * Parameters are explicitly copied at the start of the function, so that all variables follow the
 * above convention.
 */
class LocalVar extends Named {
	init(Str name, Type val, SrcPos pos) {
		init(name) {
			type = val;
			pos = pos;
		}
	}

	// Value stored.
	Type type;

	// Declared at.
	SrcPos pos;

	// The variable. Created during code generation.
	CppVar var;

	// Block to notify. Updated during code generation.
	Block? notify;

	// Create the variable. OK to call twice.
	void create(CodeGen gen) {
		if (var.v == Var()) {
			var = allocType(gen, type);
		}

		Listing:VarInfo info(name, type, true, pos);
		gen.l.varInfo(var.v, info);
	}
}

// Extract the type part 'safely'.
Type safeType(Value v, SrcPos pos) on Compiler {
	if (t = v.type)
		t;
	else
		throw SyntaxError(pos, "Not possible to use 'void' here.");
}

/**
 * Access to local variables.
 */
class LocalVarAccess extends Expr {
	LocalVar var;

	init(SrcPos pos, LocalVar var) {
		init(pos) { var = var; }
	}

	Bool temporary() : override {
		false;
	}

	ExprResult result() : override {
		Value(var.type, true);
	}

	void code(CodeGen gen, CodeResult result) : override {
		if (!result.needed())
			return;

		if (result.type.ref) {
			var.var.adjust(gen, result.location(gen));
		} else {
			var r = result.location(gen);
			var.var.adjust(gen, ptrA);
			if (result.type.isAsmType) {
				gen.l << mov(r, xRel(r.size, ptrA));
			} else {
				gen.l << lea(ptrB, r);
				gen.l << fnParam(ptrDesc, ptrB);
				gen.l << fnParam(ptrDesc, ptrA);
				gen.l << fnCall(result.type.copyCtor, true);
			}
		}
	}

	void codePtr(CodeGen gen) : override {
		var.var.ptr(gen);
	}
}

/**
 * Variable declaration.
 */
class VarDecl extends Stmt {
	init(SrcPos pos, Block parent, Value type, SStr name) {
		init(pos) {
			var(name.v, type.safeType(pos), name.pos);
		}

		if (t = type.type) {
			// C++ constructor.
			if (ctor = t.cppCtor([], parent.scope)) {
				initExpr = CtorCall(pos, ctor, [], true);
			} else if (ctor = t.defaultCtor) {
				initExpr = CtorCall(pos, ctor, [], false);
			}
		}

		if (initExpr.empty) {
			print("TODO: Require the default constructor to be called!");
		}

		parent.add(var);
	}

	init(SrcPos pos, Block parent, Value type, SStr name, ExprRef init) {
		init(pos) {
			var(name.v, type.safeType(pos), name.pos);
			initExpr = init;
		}

		parent.add(var);
	}

	// Create from an = expression.
	VarDecl assign(SrcPos pos, Block parent, Value type, SStr name, Expr init) : static {
		if (t = type.type) {
			init = expectCast(init, t);

			if (init as ExprRef) {
				// Just use the expression to construct the object for us.
				return VarDecl(pos, parent, type, name, init);
			}

			// We need to call the copy-ctor...
			// TODO: Handle C++ copy ctors as well. They have a Ref<> as their other parameter.
			if (copy = t.copyCtor) {
				return VarDecl(pos, parent, type, name, CtorCall(pos, copy, [init], false));
			}
		}

		throw SyntaxError(pos, "The type ${type} does not have a copy constructor!");
	}

	// The variable we created.
	LocalVar var;

	// Initialization expression. This always supports allocating the type in-place.
	ExprRef? initExpr;

	// Generate code.
	Bool code(CodeGen gen) : override {
		if (initExpr) {
			initExpr.codeRef(gen, var.var);
		} else {
			var.var.created(gen);
		}

		true;
	}
}
