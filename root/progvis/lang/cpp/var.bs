use core:lang;
use core:asm;

/**
 * Local variable in C++.
 *
 * Variables are always a pointer to an array allocation the size of one element, just like value
 * types are stored in a Variant.
 *
 * If the referred type is a class-type in Storm (i.e. it is foreign, we don't use them in the C++
 * world), it is just a pointer to the object.
 *
 * Parameters are explicitly copied at the start of the function, so that all variables follow the
 * above convention.
 */
class LocalVar extends Named {
	init(Str name, Type val, SrcPos pos) {
		init(name) {
			type = val;
			pos = pos;
		}
	}

	// Value stored.
	Type type;

	// Declared at.
	SrcPos pos;

	// The variable. Created during code generation.
	CppVar var;

	// Create the variable. OK to call twice.
	void create(CodeGen gen) {
		if (var.v == Var()) {

			// TODO: Add variable information!
		}
	}
}


class LocalVarAccess extends Expr {
	LocalVar var;

	init(SrcPos pos, LocalVar var) {
		init(pos) { var = var; }
	}

	Bool temporary() : override {
		false;
	}

	ExprResult result() : override {
		Value(var.type, true);
	}

	void code(CodeGen gen, CodeResult result) : override {
		if (!result.needed())
			return;

		var.var.adjust(gen, result.location(gen));
	}
}

class VarDecl extends Expr {
	init(SrcPos pos, Value type, SStr name) {
		init(pos) {
		}
	}
}
