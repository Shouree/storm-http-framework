use lang:asm;
use core:asm;
use core:sync;
use progvis:lang:cpp;

/**
 * Base class for all synchronization primitives.
 *
 * Allows the runtime to extract the queue of waiting threads easily.
 */
class Waitable {
	// Get threads that are currently waiting.
	Nat[] waitingThreads() : abstract;
}

/**
 * Internals of a semaphore that is friendly to the visualization system. If regular semaphores were
 * used, we won't be able to abort the system when a thread is waiting for a semaphore.
 *
 * Note: We know that multiple HW threads won't use the same instance, so we can actually get by without locks!
 */
class SemaImpl extends Waitable {
	Nat count;

	// All threads waiting for this sema.
	Queue<progvis:program:ProgThread> waiting;

	init(Nat count) {
		init { count = count; }
	}

	void down(Variant waitFor) {
		unless (thread = progvis:program:findThread(currentUThread())) {
			throw SyncError("This primitive is only intended to be used within the program visualization!");
		}

		if (count > 0) {
			--count;
			return;
		}

		// We need to wait!
		waiting.push(thread);

		// Tell the thread to sleep last, otherwise we may have thread switches in the critical region.
		thread.lockSleep(waitFor);
	}

	void up() {
		if (waiting.any()) {
			var wake = waiting.top();
			waiting.pop();

			wake.lockWake();
		} else {
			count++;
		}
	}

	Nat[] waitingThreads() : override {
		Nat[] result;
		for (x in waiting)
			result << x.threadId;
		result;
	}
}

/**
 * Exception.
 */
class SyncError extends progvis:TypedError {
	init(Str msg) {
		init("sync usage") { msg = msg; }
		progvis:program:onFatalException();
	}

	Str msg;

	void message(StrBuf to) : override {
		to << msg;
	}
}


/**
 * Pintos-like semaphore.
 */
value semaphore {
	// Note: Layout here is important!
	SemaImpl? impl;
	Int count;

	init() {
		init {
			count = -1;
		}
	}
}

// Check so that a pointer is valid.
void checkSyncPtr(Ptr<semaphore> sema) {
	Size sz = sPtr + sInt;
	checkPtr(sema.base, sema.offset, sz.current);
}

void sema_init(Ptr<semaphore> sema, Int value) {
	if (value < 0)
		throw SyncError("Cannot initialize a semaphore with a negative value!");

	SemaImpl s(value.nat);

	checkSyncPtr(sema);

	Nat offset = sema.offset - sPtr.current * 2;
	if (sema.base.readPtr(offset).any)
		throw SyncError("Tried to initialize a semaphore multiple times!");

	sema.base.writePtr(offset, unsafe:RawPtr(s));
	sema.base.writeInt(offset + sPtr.current, value);
}

void sema_destroy(Ptr<semaphore> sema) {
	checkSyncPtr(sema);

	Nat offset = sema.offset - sPtr.current * 2;
	sema.base.writePtr(offset, unsafe:RawPtr());
	sema.base.writeInt(offset + sPtr.current, -1);
}

void sema_up(Ptr<semaphore> sema) : cppBarrier(release) {
	checkSyncPtr(sema);

	Nat offset = sema.offset - sPtr.current * 2;
	var sem = sema.base.readPtr(offset);
	if (s = sem.asObject() as SemaImpl) {
		offset += sPtr.current;
		sema.base.writeInt(offset, sema.base.readInt(offset) + 1);
		s.up();
		return;
	}

	throw SyncError("Can not operate on an uninitialized semaphore!");
}

void sema_down(Ptr<semaphore> sema) : cppBarrier(acquire) {
	checkSyncPtr(sema);

	Nat offset = sema.offset - sPtr.current * 2;

	var sem = sema.base.readPtr(offset);
	if (s = sem.asObject() as SemaImpl) {
		offset += sPtr.current;
		s.down(Variant(sema));
		sema.base.writeInt(offset, sema.base.readInt(offset) - 1);
		return;
	}

	throw SyncError("Can not operate on an uninitialized semaphore!");
}

/**
 * Pintos-like lock.
 */
value lock {
	// Note: Layout here is important!
	SemaImpl? impl;
	Int taken_by;

	init() {
		init { taken_by = -1; }
	}
}

// Check so that a pointer is valid.
void checkSyncPtr(Ptr<lock> lock) {
	Size sz = sPtr + sInt;
	checkPtr(lock.base, lock.offset, sz.current);
}

void lock_init(Ptr<lock> lock) {
	SemaImpl s(1);

	checkSyncPtr(lock);

	Nat offset = lock.offset - sPtr.current * 2;
	if (lock.base.readPtr(offset).any)
		throw SyncError("Tried to initialize a lock multiple times!");

	lock.base.writePtr(offset, unsafe:RawPtr(s));
	lock.base.writeInt(offset + sPtr.current, 0);
}

void lock_destroy(Ptr<lock> lock) {
	checkSyncPtr(lock);

	Nat offset = lock.offset - sPtr.current * 2;
	lock.base.writePtr(offset, unsafe:RawPtr());
	lock.base.writeInt(offset + sPtr.current, -1);
}

void lock_acquire(Ptr<lock> lock) : cppBarrier(acquire) {
	checkSyncPtr(lock);

	Nat offset = lock.offset - sPtr.current * 2;

	var implRaw = lock.base.readPtr(offset);
	if (l = implRaw.asObject() as SemaImpl) {
		offset += sPtr.current;

		Nat myId = progvis:program:findThisThreadId();
		if (lock.base.readNat(offset) == myId)
			throw SyncError("Trying to acquire a lock we're already holding!");

		l.down(Variant(lock));

		lock.base.writeNat(offset, myId);
		return;
	}

	throw SyncError("Can not operate on an uninitialized lock!");
}

void lock_release(Ptr<lock> lock) : cppBarrier(release) {
	checkSyncPtr(lock);

	Nat offset = lock.offset - sPtr.current * 2;

	var implRaw = lock.base.readPtr(offset);
	if (l = implRaw.asObject() as SemaImpl) {
		offset += sPtr.current;

		Nat myId = progvis:program:findThisThreadId();
		if (lock.base.readNat(offset) != myId)
			throw SyncError("Trying to release a lock we're not holding!");

		lock.base.writeInt(offset, 0);

		l.up();
		return;
	}

	throw SyncError("Can not operate on an uninitialized lock!");
}

/**
 * Condition implementation.
 */
class CondImpl extends Waitable {
	// All threads waiting.
	Queue<progvis:program:ProgThread> waiting;

	// Get number of waiting threads.
	Int waitingCount() {
		waiting.count.int;
	}

	// Wait for signal. Assuming the lock is held by us.
	void wait(Variant condVal, Variant lockVal, SemaImpl lock) {
		unless (thread = progvis:program:findThread(currentUThread())) {
			throw SyncError("This primitive is only intended to be used within the program visualization!");
		}

		// This is actually safe, due to the threading model in Storm.
		lock.up();

		waiting.push(thread);
		thread.lockSleep(condVal);

		// Grab the lock again.
		lock.down(lockVal);
	}

	// Signal one.
	void signal(SemaImpl lock) {
		if (waiting.any) {
			var wake = waiting.top();
			waiting.pop();

			wake.lockWake();
		}
	}

	// Signal all.
	void broadcast(SemaImpl lock) {
		while (waiting.any) {
			var wake = waiting.top();
			waiting.pop();

			wake.lockWake();
		}
	}

	// Get waiting threads.
	Nat[] waitingThreads() : override {
		Nat[] result;
		for (x in waiting)
			result << x.threadId;
		result;
	}
}

/**
 * Pintos-like condition variable.
 */
value condition {
	CondImpl? impl;
	Int waiting;

	init() {
		init {
			waiting = -1;
		}
	}
}

// Check so that a pointer is valid.
void checkSyncPtr(Ptr<condition> cond) {
	Size sz = sPtr + sInt;
	checkPtr(cond.base, cond.offset, sz.current);
}

void cond_init(Ptr<condition> cond) {
	CondImpl c;

	checkSyncPtr(cond);

	Nat offset = cond.offset - sPtr.current * 2;
	if (cond.base.readPtr(offset).any)
		throw SyncError("Tried to initialize a condition variable multiple times!");

	cond.base.writePtr(offset, unsafe:RawPtr(c));
	cond.base.writeInt(offset + sPtr.current, 0);
}

void cond_destroy(Ptr<condition> cond) {
	checkSyncPtr(cond);

	Nat offset = cond.offset - sPtr.current * 2;
	cond.base.writePtr(offset, unsafe:RawPtr());
	cond.base.writeInt(offset + sPtr.current, -1);
}

void cond_wait(Ptr<condition> cond, Ptr<lock> lock) : cppBarrier(full) {
	checkSyncPtr(cond);
	checkSyncPtr(lock);

	Nat cOffset = cond.offset - sPtr.current * 2;
	Nat lOffset = lock.offset - sPtr.current * 2;

	Nat ourId = progvis:program:findThisThreadId();
	if (lock.base.readNat(lOffset + sPtr.current) != ourId)
		throw SyncError("The lock passed to 'cond_wait' must be held by the current thread!");

	if (cImpl = cond.base.readPtr(cOffset).asObject() as CondImpl) {
		if (lImpl = lock.base.readPtr(lOffset).asObject() as SemaImpl) {
			// We're not holding the lock anymore.
			lock.base.writeNat(lOffset + sPtr.current, 0);

			cond.base.writeInt(cOffset + sPtr.current, cImpl.waitingCount + 1);
			cImpl.wait(Variant(cond), Variant(lock), lImpl);

			// We're holding the lock now!
			lock.base.writeNat(lOffset + sPtr.current, ourId);
			return;
		}
	}

	throw SyncError("Can not operate on an uninitialized condition and/or lock!");
}

void cond_signal(Ptr<condition> cond, Ptr<lock> lock) {
	checkSyncPtr(cond);
	checkSyncPtr(lock);

	Nat cOffset = cond.offset - sPtr.current * 2;
	Nat lOffset = lock.offset - sPtr.current * 2;

	if (lock.base.readNat(lOffset + sPtr.current) != progvis:program:findThisThreadId())
		throw SyncError("The lock passed to 'cond_signal' must be held by the current thread!");

	if (cImpl = cond.base.readPtr(cOffset).asObject() as CondImpl) {
		if (lImpl = lock.base.readPtr(lOffset).asObject() as SemaImpl) {
			cImpl.signal(lImpl);
			cond.base.writeInt(cOffset + sPtr.current, cImpl.waitingCount);
			return;
		}
	}

	throw SyncError("Can not operate on an uninitialized condition and/or lock!");
}

void cond_broadcast(Ptr<condition> cond, Ptr<lock> lock) {
	checkSyncPtr(cond);
	checkSyncPtr(lock);

	Nat cOffset = cond.offset - sPtr.current * 2;
	Nat lOffset = lock.offset - sPtr.current * 2;

	if (lock.base.readNat(lOffset + sPtr.current) != progvis:program:findThisThreadId())
		throw SyncError("The lock passed to 'cond_broadcast' must be held by the current thread!");

	if (cImpl = cond.base.readPtr(cOffset).asObject() as CondImpl) {
		if (lImpl = lock.base.readPtr(lOffset).asObject() as SemaImpl) {
			cImpl.broadcast(lImpl);
			cond.base.writeInt(cOffset + sPtr.current, cImpl.waitingCount);
			return;
		}
	}

	throw SyncError("Can not operate on an uninitialized condition and/or lock!");
}
