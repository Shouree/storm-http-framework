use core:lang;
use core:asm;
use lang:bs:macro;

on Compiler:

/**
 * Class representing an expression in C++.
 */
class Expr extends Stmt {
	init(SrcPos pos) {
		init(pos) {}
	}

	// Adapter from the statement.
	Bool code(CodeGen gen) : final {
		var r = result();
		code(gen, CodeResult());
		!r.nothing();
	}

	// Compute the result.
	ExprResult result() : abstract;

	// Does this expression represent a temporary value? I.e. is this an r-value?
	Bool temporary() {
		true;
	}

	// Overloaded if 'temporary' is 'false'. Stores a base ptr in 'ptrB' and an offset in 'ecx'.
	void codePtr(CodeGen gen) {
		throw SyntaxError(pos, "Unable to compute the address of a temporary.");
	}

	// Generate code. 'desired' is the desired return type.
	void code(CodeGen gen, CodeResult res) : abstract;
}

/**
 * An expression that supports creating a value inside a pre-allocated variable.
 */
class ExprRef extends Expr {
	init(SrcPos pos) {
		init(pos) {}
	}

	// Additional member.
	void codeRef(CodeGen gen, CppVar var) : abstract;
}

/**
 * Integer literals.
 */
class IntLiteral extends Expr {
	init(SrcPos pos, Long val) {
		init(pos) { val = val; }
	}

	init(SStr str) {
		init(str.pos) { val = str.v.toLong(); }
	}

	private Long val;

	ExprResult result() : override {
		Value(named{Int}, true);
	}

	void code(CodeGen gen, CodeResult res) : override {
		if (!res.needed())
			return;

		var to = res.location(gen);
		if (t = res.type.type) {
			CppVar var = allocType(gen, t);
			var.adjust(gen, ptrA);
			if (t is named{Int}) {
				gen.l << mov(intRel(ptrA, Offset()), intConst(val.int));
			} else if (t is named{Long}) {
				gen.l << mov(longRel(ptrA, Offset()), longConst(val));
			} else {
				throw SyntaxError(pos, "Unknown type!");
			}
			gen.l << mov(to, ptrA);
			var.created(gen);
		}
		res.created(gen);
	}
}

/**
 * Node representing a yet unresolved identifier.
 *
 * If used on its own, it will try to act as a variable access.
 */
class NameExpr extends Expr {
	Scope scope;
	SimpleName name;
	Expr? context;
	private Expr? resolved;

	// Regular name without any context.
	init(SrcPos pos, Scope scope, SimpleName name) {
		init(pos) { scope = scope; name = name; }
	}

	// Name give some context using the . operator.
	init(SrcPos pos, Scope scope, SimpleName name, Expr context) {
		init(pos) { scope = scope; name = name; context = context; }
	}

	void code(CodeGen gen, CodeResult result) : override {
		resolve.code(gen, result);
	}

	ExprResult result() : override {
		resolve.result();
	}

	Bool temporary() : override {
		resolve.temporary();
	}

	void codePtr(CodeGen gen) : override {
		resolve.codePtr(gen);
	}

	private Expr resolve() {
		if (resolved)
			return resolved;

		Expr r = doResolve();
		resolved = r;
		r;
	}


	Named? findNamed(Value[] actuals) {
		if (context) {
			Value ctx = context.result.type;
			SimplePart last = name.last.clone();
			last.params << ctx;
			last.params.append(actuals);

			if (t = ctx.type) {
				return t.find(last, scope);
			} else {
				return null;
			}
		} else if (actuals.empty) {
			return scope.find(name);
		} else {
			SimpleName n = name.clone;
			name.last.params = actuals;
			return scope.find(name);
		}
	}

	Named? findNamed() {
		findNamed([]);
	}

	private Expr doResolve() {
		Named? found = findNamed();
		if (found as LocalVar) {
			return LocalVarAccess(pos, found);
		} else if (found as MemberVar) {
			if (context) {
				return MemberVarAccess(pos, context, found);
			}
		} else if (found) {
			throw SyntaxError(pos, "${name} refers to ${typeOf(found).name}, which I don't know how to handle here.");
		}

		throw SyntaxError(pos, "Unable to resolve the name ${name} in this context!");
	}
}

// Try to "convert" a name expression into a function call.
Expr fnCall(Expr lhs, Expr[] actuals) {
	unless (lhs as NameExpr) {
		// TODO: We should try to call the function call operator on the object.
		throw SyntaxError(lhs.pos, "This is not something we can call.");
	}

	Named? found = lhs.findNamed(fnValues(actuals));
	if (found as Function) {
		// Add the 'this' ptr if required.
		if (c = lhs.context)
			actuals.insert(0, c);
		return FnCall(lhs.pos, found, actuals);
	}

	throw SyntaxError(lhs.pos, "Found ${found}, which is not a function.");
}

// Compute the types of an array of values.
Value[] fnValues(Expr[] actuals) {
	Value[] r;
	for (x in actuals)
		r << x.result.type;
	r;
}

/**
 * Function calls.
 */
class FnCall extends ExprRef {
	private Function fn;
	private Expr[] actuals;

	init(SrcPos pos, Function fn, Expr[] actuals) {
		init(pos) {
			fn = fn;
			actuals = actuals;
		}
	}

	ExprResult result() : override {
		// We make sure to return references.
		fn.result.asRef();
	}

	void code(CodeGen gen, CodeResult res) : override {
		Operand[] params;
		for (i, x in actuals) {
			params << paramCode(gen, x, fn.params[i]);
		}

		if (t = fn.result.type) {
			if (res.type.ref & !fn.result.ref) {
				// Create a variable to store the result in.
				CppVar var = allocType(gen, t);
				var ref = res.safeLocation(gen, res.type);
				var.adjust(gen, ref);

				fn.autoCallRef(gen, params, ref);
				var.created(gen);
				res.created(gen);
			} else {
				fn.autoCall(gen, params, res);
			}
		} else {
			// Void result.
			fn.autoCall(gen, params, res);
		}
	}

	// Generate code for when someone else has already created the storage for us.
	void codeRef(CodeGen gen, CppVar var) : override {
		Operand[] params;
		for (i, x in actuals) {
			params << paramCode(gen, x, fn.params[i]);
		}

		if (t = fn.result.type) {
			if (fn.result.ref) {
				Var v = gen.l.createVar(gen.block, sPtr);
				var.adjust(gen, v);

				fn.autoCallRef(gen, params, v);
				var.created(gen);
			} else if (copyCtor = t.copyCtor) {
				// Need to copy!
				CodeResult r(fn.result, gen.block);
				fn.autoCall(gen, params, r);

				var.adjust(gen, ptrB);

				gen.l << lea(ptrA, r.location(gen));
				gen.l << fnParam(ptrDesc, ptrB);
				gen.l << fnParam(ptrDesc, ptrA);
				gen.l << fnCall(copyCtor.ref, true);
				r.created(gen);
				var.created(gen);
			} else {
				throw SyntaxError(pos, "Unable to copy the result.");
			}
		} else {
			// Void result.
			fn.autoCall(gen, params, CodeResult());
		}
	}
}

/**
 * Constructor calls.
 */
class CtorCall extends ExprRef {
	private Function fn;
	private Expr[] actuals;

	init(SrcPos pos, Function fn, Expr[] actuals) {
		init(pos) {
			fn = fn;
			actuals = actuals;
		}
	}

	ExprResult result() : override {
		// We make sure to return references.
		fn.params[0].asRef();
	}

	void code(CodeGen gen, CodeResult res) : override {
		unless (type = fn.params[0].type) {
			throw SyntaxError(pos, "This copy-constructor seems to create 'void' types...");
		}

		Operand[] params;
		for (i, x in actuals) {
			params << paramCode(gen, x, fn.params[i]);
		}

		if (res.type.ref) {
			CppVar var = allocType(gen, t);
			VarInfo ref = res.safeLocation(gen, res.type);
			var.adjust(gen, ref.v);

			params.insert(0, ref.v);
			fn.autoCall(gen, params, CodeResult());
			var.created(gen);
		} else {
			VarInfo val = res.safeLocation(gen, result.type);
			gen.l << lea(ptrA, val);
			params.insert(0, ptrA);
			fn.autoCall(gen, params, CodeResult());
			val.created(gen);
		}
	}

	// Generate code for when someone else has already created the storage for us.
	void codeRef(CodeGen gen, CppVar var) : override {
		unless (type = fn.params[0].type) {
			throw SyntaxError(pos, "This copy-constructor seems to create 'void' types...");
		}

		Operand[] params;
		for (i, x in actuals) {
			params << paramCode(gen, x, fn.params[i]);
		}

		var.adjust(gen, ptrA);
		params.insert(0, ptrA);
		fn.autoCall(gen, params, CodeResult());
		var.created(gen);
	}
}

// Generate code for acquiring one parameter.
private Operand paramCode(CodeGen gen, Expr actual, Value formal) on Compiler {
	// TODO: Auto-casting?
	Value result = actual.result.type;
	if (!formal.canStore(result))
		throw SyntaxError(actual.pos, "Cannot convert to ${formal}.");

	if (formal.ref & !result.ref) {
		// Create a temporary variable and make a reference to it.
		result = formal.asRef(false);
		VarInfo tmpV = gen.createVar(result);
		CodeResult gr(result, tmpV);
		actual.code(gen, gr);

		VarInfo tmpRef = gen.createVar(formal);
		gen.l << lea(tmpRef.v, ptrRel(tmpV.v, Offset()));
		tmpRef.created(gen);
		tmpRef.v;
	} else if (!formal.ref & result.ref) {
		// We need to make a copy.
		if (!formal.isAsmType())
			throw SyntaxError(actual.pos, "Unable to manipulate this parameter!");

		CodeResult gr(formal.asRef(), gen.block);
		actual.code(gen, gr);

		Var v = gen.l.createVar(gen.block, formal.size());
		gen.l << mov(ptrA, gr.location(gen));
		gen.l << mov(v, xRel(v.size(), ptrA, Offset()));
		v;
	} else {
		CodeResult gr(formal, gen.block);
		actual.code(gen, gr);
		gr.location(gen);
	}
}

// Create an operator.
Expr operator(Block block, Expr lhs, SStr op, Expr rhs) on Compiler {
	var lType = lhs.result.type;
	var rType = rhs.result.type;

	SimplePart opName(op.v, [lType, rType]);
	if (t = lType.type) {
		if (fn = t.find(opName, block.scope) as Function)
			return FnCall(op.pos, fn, [lhs, rhs]);
	}

	if (fn = block.scope.find(SimpleName(opName)) as Function) {
		return FnCall(op.pos, fn, [lhs, rhs]);
	}

	throw SyntaxError(op.pos, "Failed to find operator ${op.v} for ${lType} and ${rType}.");
}

Expr operator(Block block, SStr op, Expr rhs) on Compiler {
	var rType = rhs.result.type;

	SimplePart opName(op.v + "*", [rType]);
	if (t = rType.type) {
		if (fn = t.find(opName, block.scope) as Function)
			return FnCall(op.pos, fn, [rhs]);
	}

	if (fn = block.scope.find(SimpleName(opName)) as Function) {
		return FnCall(op.pos, fn, [rhs]);
	}

	throw SyntaxError(op.pos, "Failed to find prefix operator ${op.v} for ${rType}.");
}
Expr operator(Block block, Expr lhs, SStr op) on Compiler {
	var lType = lhs.result.type;

	SimplePart opName("*" + op.v, [lType]);
	if (t = lType.type) {
		if (fn = t.find(opName, block.scope) as Function)
			return FnCall(op.pos, fn, [lhs]);
	}

	if (fn = block.scope.find(SimpleName(opName)) as Function) {
		return FnCall(op.pos, fn, [lhs]);
	}

	throw SyntaxError(op.pos, "Failed to find postfix operator ${op.v} for ${lType}.");
}

Expr dotOperator(Block block, Expr lhs, SStr rhs, Bool ptrLhs) {
	// If lhs is a pointer, just dereference it first. That's what the dot operator means anyway.
	if (ptrLhs)
		lhs = DerefPtr(lhs);
	NameExpr(rhs.pos, block.scope, SimpleName(rhs.v), lhs);
}

// Short-circuting operators.
Expr scAnd(Block block, Expr lhs, SStr op, Expr rhs) on Compiler { IntLiteral(op.pos, 0); }
Expr scOr(Block block, Expr lhs, SStr op, Expr rhs) on Compiler { IntLiteral(op.pos, 0); }


/**
 * Make a pointer from an l-value. The & operator.
 */
class AddressOf extends ExprRef {
	init(Expr of) {
		init(of.pos) { of = of; }
	}

	Expr of;

	ExprResult result() : override {
		wrapPtr(of.result.type);
	}

	void code(CodeGen gen, CodeResult res) : override {
		Value res = result;
		unless (type = res.type)
			throw InternalError("Failed to find an appropriate pointer type!");

		if (!res.needed())
			return;

		if (res.type.ref) {
			CppVar var = allocType(gen, type);
			codeRef(gen, res);

			// the adjusted value is in ptrA from 'codeRef'.
			gen.l << mov(res.location(gen), ptrA);
		} else {
			of.codePtr(gen);
			gen.l << lea(ptrA, res.location(gen).v);
			gen.l << mov(ptrRel(ptrA, Offset()), ptrB);
			gen.l << mov(ptrRel(ptrA, Offset(sPtr)), ecx);
		}
		res.created(gen);
	}

	void codeRef(CodeGen gen, CppVar var) : override {
		of.codePtr(gen);

		var.adjust(gen, ptrA);
		gen.l << mov(ptrRel(ptrA, Offset()), ptrB);
		gen.l << mov(intRel(ptrA, Offset(sPtr)), ecx);
		var.created(gen);
	}
}

/**
 * De-reference a pointer.
 */
class DerefPtr extends Expr {
	init(Expr of) {
		init(of.pos) { of = of; }

		unless (of.result.type.isCppPtr)
			throw SyntaxError(pos, "Unable to dereference a value of type ${of.result.type}.");
	}

	Expr of;

	ExprResult result() : override {
		unwrapPtr(of.result.type).asRef();
	}

	void code(CodeGen gen, CodeResult res) : override {
		if (!res.needed())
			return;

		CodeResult p(of.result.type.asRef(), gen.block);
		of.code(gen, p);

		gen.l << mov(ptrA, p.location(gen));

		// Load the base.
		gen.l << mov(ptrB, ptrRel(ptrA, Offset()));

		// Add the offset.
		gen.l << mov(ecx, intRel(ptrA, Offset(sPtr)));
		gen.l << add(ptrB, ptrC);

		if (res.type.ref) {
			// Store it!
			gen.l << mov(res.location(gen), ptrB);
		} else if (res.type.isAsmType()) {
			// Copy the value.
			Var dst = res.location(gen);
			gen.l << mov(dst, xRel(dst.size, ptrB, Offset()));
		} else {
			// Copy ctor.
			gen.l << fnParam(ptrDesc, ptrA);
			gen.l << fnParam(ptrDesc, ptrB);
			gen.l << fnCall(res.type.copyCtor, true);
		}
		res.created(gen);
	}

	Bool temporary() {
		false;
	}

	void codePtr(CodeGen gen) : override {
		CodeResult p(of.result.type.asRef(), gen.block);
		of.code(gen, p);

		gen.l << mov(ptrA, p.location(gen));

		// Load the base and offset.
		gen.l << mov(ptrB, ptrRel(ptrA, Offset()));
		gen.l << mov(ecx, intRel(ptrA, Offset(sPtr)));
	}
}
