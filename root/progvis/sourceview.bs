use ui;
use graphics;
use core:io;
use core:lang;
use core:geometry;

class SourceView on Render {
	// Program context.
	Program program;

	// Current file.
	Url file;

	// Current text object being rendered.
	Text? text;

	// Where to fill at the moment.
	Rect[] fill;

	// Bounds of the fill area. We try to center this in the source view.
	Rect fillBounds;

	// Draw a faint view meaning the thread is dead.
	Bool faint;

	// Create.
	init(Program program) {
		init {
			program = program;
			faint = false;
		}
	}

	// Switch to a new view.
	void display(SrcPos pos) {
		if (file = pos.file) {
			display(file, pos.start, pos.end);
		}
	}

	// Switch to a new view.
	void display(Url file, Nat from, Nat to) {
		if (file != this.file) {
			text = program.source(file);
			this.file = file;
		}

		if (text) {
			var begin = text.text.begin + from;
			var end = text.text.begin + to;
			fill = text.boundsOf(begin, end);

			if (fill.any)
				fillBounds = fill[0];
			for (Nat i = 1; i < fill.count; i++) {
				fillBounds = fillBounds.include(fill[i]);
			}
		} else {
			fill = [];
			// We don't re-set the bounds to prevent scrolling.
		}
	}

	// Draw.
	void draw(Graphics g, Rect pos) {
		g.draw(pos, dataFg);
		if (text) {
			pos = pos.shrink(dataBorder);

			g.push(pos);

			Float yOffset = pos.p0.y - fillBounds.p0.y + (pos.size.h - fillBounds.size.h) / 2;
			Point offset(pos.p0.x, yOffset);

			Brush highlight = sourceHighlight;
			if (faint)
				highlight = sourceFaintHighlight;
			for (f in fill) {
				g.fill(f + offset, highlight);
			}

			g.draw(text, dataFg, offset);
			g.pop();
		}
	}
}
