use ui;
use layout;
use graphics;
use core:geometry;
use core:io;
use lang:bs:macro;

/**
 * Main window.
 */
window MainWin {
	layout Border {
		Grid {
			wrapCols: 1;
			expandCol: 0;
			expandRow: 0;
			Window draw {}
			Button next("Next") {}
		}
	}

	private MainPainter painter;
	private Program? program;

	init() {
		init("Progvis", Size(800, 800)) {}
		draw.painter(painter);
		create();

		next.onClick = &this.advance(Button);
	}

	void open(Url file) {
		program = Program:load(file);
		if (program) {
			// program.onChange = &this.updateData();
			program.spawn(program.main);
		} else {
			print("Failed to load your program.");
		}
	}

	private void advance(Button b) {
		if (program) {
			for (t in program.threads) {
				t.resume();
			}
		}
		painter.advance();
		draw.repaint();
	}

	// Called when a thread has reached a new breakpoint.
	private void updateData() {
		// TODO: Update the model as well!
		draw.repaint();
	}
}

class Node {
	Int value;
	Node? next;

	init(Int value) {
		init { value = value; }
	}
}

class SampleType {
	Node data;
	Node data2;
	Int x;
	Int y;
	Point z;

	init() {
		Node tmp(8);

		init {
			data = tmp;
			data2 = tmp;
			x = 10;
			y = 20;
			z = Point(2.5, 3.1);
		}
	}

	void advance() {
		z.x += 1;
		Int count = 1;
		Node at = data;
		while (true) {
			if (n = at.next) {
				at = n;
			} else {
				at.next = Node(count);
				return;
			}
			count++;
		}
	}
}

class MainPainter extends Painter {
	// Temporary: data we're showing.
	private SampleType data;

	// The workspace we want to draw.
	private Workspace workspace;

	init() {
		init();
		bgColor = Color(0.8, 0.8, 0.8);

		// Traverse a sample object hierarchy.
		workspace.beginTraversal();
		workspace.traverse(unsafe:RawPtr(data));
		workspace.endTraversal();
	}

	// Temporary: advance the animation.
	void advance() {
		data.advance();

		workspace.beginTraversal();
		workspace.traverse(unsafe:RawPtr(data));
		workspace.endTraversal();
	}

	Bool render(Size me, Graphics g) {
		// TODO: Support navigation?
		workspace.render(Rect(Point(), me), g);
		false;
	}
}

void main() on Compiler {
	if (url = named{progvis:test}.url) {
		for (file in url.children) {
			if (file.ext == "bs") {
				MainWin win;
				win.open(file);
				win.waitForClose();
				return;
			}
		}
	}
}
