use ui;
use graphics;
use core:geometry;
use lang:bs:macro;


/**
 * A data structure instantiated somewhere. Managed by a Workspace.
 */
class Data on Render {
	init() {
		init() {
			pos = Point();
		}
	}

	// Current position.
	Point pos;

	// Current size.
	Size size() : abstract;

	// Compute the bounding rectangle of this data element.
	Rect rect() {
		Rect(pos, size);
	}

	// Draw this data item at its current location.
	void draw(Graphics g) : abstract {
		Rect r = rect;
		g.fill(r, dataBg);
		g.draw(r, dataFg);
	}

	// Update the contents of the visualization from the actual data.
	void update(Workspace work, unsafe:RawPtr object, Nat offset) : abstract;
}

/**
 * Unknown data element.
 */
class UnknownData extends Data {
	private Text text;

	init() {
		init() {
			text = Text("?", dataFont);
		}
	}

	Size size() : override {
		text.size + dataBorder*2;
	}

	void draw(Graphics g) : override {
		super:draw(g);
		g.draw(text, dataFg, pos + dataBorder);
	}

	void update(Workspace work, unsafe:RawPtr object, Nat offset) : override {}
}


/**
 * A primitive datatype, such as an integer. Represented as text.
 */
class Primitive extends Data {
	// The text to draw.
	private Text text;

	// Type of the data we're displaying.
	core:lang:Type type;

	init(core:lang:Type type, Str initial) {
		init() {
			text = Text(initial, dataFont);
			type = type;
		}
	}

	Size size() : override {
		text.size + dataBorder*2;
	}

	void draw(Graphics g) : override {
		super:draw(g);
		g.draw(text, dataFg, pos + dataBorder);
	}

	void update(Workspace work, unsafe:RawPtr object, Nat offset) : override {
		if (s = convertPrimitive(type, object, offset))
			text = Text(s, dataFont);
	}
}

/**
 * A pointer type, referring to some other data.
 */
class Pointer extends Data {
	private Size sz;
	protected Data? to;

	init() {
		init() {
			sz = Text("????", dataFont).size;
		}
	}

	Size size() : override {
		sz + dataBorder*2;
	}

	void draw(Graphics g) : override {
		super:draw(g);
		Rect r = rect;
		if (to) {
			g.line(r.center, to.pos, dataFg);
		} else {
			g.line(rect.p0, rect.p1, dataFg);
		}
	}

	void update(Workspace work, unsafe:RawPtr object, Nat offset) : override {
		var ptr = object.readPtr(offset);
		if (ptr.any) {
			to = work.traverse(ptr);
		} else {
			to = null;
		}
	}
}

/**
 * A pointer on the stack. Examines the pointer passed directly to the object rather than
 * dereferencing it once first.
 */
class StackPointer extends Pointer {
	void update(Workspace work, unsafe:RawPtr object, Nat offset) : override {
		if (object.any) {
			to = work.traverse(object);
		} else {
			to = null;
		}
	}
}

/**
 * A composite type, consisting of one or more variables of other types.
 */
class Composite extends Data {
	init() {
		init() {
			sizeComputed = false;
		}
	}

	void add(Str name, Nat offset, Data data, Bool divider) {
		if (content.empty)
			divider = false;

		content << Var(name, data, offset, divider);
		sizeComputed = false;
	}

	Size size() : override {
		if (!sizeComputed)
			updateSize();
		Size(namesWidth + dataWidth, height) + compositeBorder*2;
	}

	void draw(Graphics g) : override {
		super:draw(g);

		Point at = pos + compositeBorder;
		for (v in content) {
			var nameSz = v.text.size;
			var dataSz = v.value.size;

			if (v.line) {
				g.line(Point(pos.x, at.y), Point(pos.x + size.w, at.y), dataFg);
				at.y += dataBorder.h;
			}

			// Align the text a bit nicer on the y-axis, to line up the baselines...
			g.draw(v.text, dataFg, at + Point(0, dataBorder.h));

			v.value.pos = at + Point(namesWidth + dataWidth - dataSz.w, 0);
			v.value.draw(g);

			at.y += max(nameSz.h, dataSz.h) + dataBorder.h;
		}
	}

	void update(Workspace work, unsafe:RawPtr object, Nat offset) : override {
		for (v in content) {
			v.value.update(work, object, offset + v.offset);
		}

		sizeComputed = false;
	}

private:
	class Var on Render {
		Str name;
		Text text;
		Data value;
		Nat offset;
		// Line before?
		Bool line;

		init(Str name, Data value, Nat offset, Bool divider) {
			init() {
				name = name;
				text = Text(name, dataFont);
				value = value;
				offset = offset;
				line = divider;
			}
		}
	}

	Var[] content;
	Float namesWidth;
	Float dataWidth;
	Float height;
	Bool sizeComputed;

	void updateSize() {
		// TODO: It would probably be nice to recurse into
		// the values that are themselves variables and render them
		// more compactly.
		namesWidth = 0;
		dataWidth = 0;
		height = 0;
		for (v in content) {
			var nameSz = v.text.size;
			var dataSz = v.value.size;

			namesWidth = max(namesWidth, nameSz.w + dataBorder.w);
			dataWidth = max(dataWidth, dataSz.w);
			height += max(nameSz.h, dataSz.h) + dataBorder.h;

			if (v.line)
				height += dataBorder.h;
		}

		height -= dataBorder.h;
	}
}
