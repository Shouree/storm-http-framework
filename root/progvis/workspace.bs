use ui;
use graphics;
use core:geometry;

/**
 * A workspace, where we place all variables and other data structures currently
 * visible to the user.
 */
class Workspace on Render {
	init() {
		init();
	}

	// Draw the workspace. Assumes we can clip anything not inside 'viewport'.
	void render(Rect viewport, Graphics g) {
		for (d in data) {
			// TODO: Clipping?
			d.visual.draw(g);
		}

		// Do some basic layout for the active threads.
		Float space = 10;
		Float x = space;
		for (t in threads) {
			Size sz = t.size;
			t.pos.x = x;
			t.pos.y = viewport.p1.y - space - sz.h;

			x += sz.w + space;

			t.draw(g);
		}
	}

	// Notify the workspace that we will start traversing objects now.
	void beginTraversal() {
		objMap.clear();
		maxX = 0;
		for (i, d in data) {
			d.visited = false;
			objMap.put(d.object, i);
			maxX = max(maxX, d.visual.rect.p1.x);
		}

		for (t in threads) {
			t.visited = false;
		}
	}

	// Recursively add an object to the workspace.
	Data traverse(unsafe:RawPtr object) {
		Nat id = objMap.get(object, data.count);
		if (id < data.count) {
			// Update the old instance if it is not yet traversed.
			var elem = data[id];
			if (!elem.visited) {
				elem.visited = true;
				elem.visual.update(this, object, 0);
			}
			return elem.visual;
		} else {
			// Create a new instance.
			var visual = createData(this, object);
			data << Val(object, visual);
			objMap.put(object, id);

			visual.pos = Point(maxX + 10, 10);
			maxX += visual.size.w + 20;

			// Follow pointers.
			// TODO: We could actually let the creation of pointer-nodes handle
			// this using a queue in a BFS fashion, so that we can lay out nodes
			// in nice layers as a decent heuristic.
			visual.update(this, object, 0);

			return visual;
		}
	}

	// Traverse the current contents of a thread.
	void traverse(ProgThread thread) {
		// We assume there are few enough threads for this to be viable.
		for (t in threads) {
			if (t is thread) {
				t.visited = true;
				t.traverse(this);
				return;
			}
		}

		// Not found. Add a new entry.
		ThreadVal t(thread);
		threads.push(t);
		t.traverse(this);
	}

	// Notify the workspace that traversal is over, and that any remaning objects may be removed.
	void endTraversal() {
		Nat to = 0;
		for (Nat i = 0; i < data.count; i++) {
			if (to < i)
				data[to] = data[i];
			if (data[i].visited)
				to++;
		}
		while (to < data.count) {
			data.pop();
		}

		to = 0;
		for (Nat i = 0; i < threads.count; i++) {
			if (to < i)
				threads[to] = threads[i];
			if (threads[i].visited)
				to++;
		}
		while (to < threads.count) {
			threads.pop();
		}
	}

private:
	class Val on Render {
		unsafe:RawPtr object;
		Data visual;
		Bool visited;

		init(unsafe:RawPtr object, Data visual) {
			init {
				object = object;
				visual = visual;
				visited = true;
			}
		}
	}

	// Data elements contained in the workspace.
	Val[] data;

	// Map of object pointers to the corresponding data elements.
	unsafe:RawPtr->Nat objMap;

	// Threads. These are handled specially with respect to layout and functionality, so we keep
	// them separate for now.
	ThreadVal[] threads;

	// Basic layout: Keep track of the next x-position in during the update.
	Float maxX;

	// Create a new node for an object. Called by 'traverse'.
	public Data createData(unsafe:RawPtr object) {
		if (t = object.type) {
			createComposite(t, object, 0);
		} else {
			UnknownData();
		}
	}

	// Create data for an element on the stack. Respects if it was a pointer or not.
	public Data createStackData(unsafe:RawPtr object) {
		if (t = object.type) {
			TypeInfo info(t, object.isValue, false);
			if (!info.isValue) {
				StackPointer();
			} else {
				createData(info, object, 0);
			}
		} else {
			// It is probably a pointer that's NULL at the moment.
			StackPointer();
		}
	}

	// Create a new node for some object that is a part of another object.
	Data createData(TypeInfo info, unsafe:RawPtr object, Nat offset) {
		if (info.isRef | !info.isValue) {
			return Pointer();
		} else if (c = convertPrimitive(info.type, object, offset)) {
			return Primitive(info.type, c);
		} else {
			return createComposite(info.type, object, offset);
		}
	}

	// Create a new node for a composite object.
	Composite createComposite(core:lang:Type type, unsafe:RawPtr object, Nat offset) {
		Composite result;

		var members = findMembers(type);
		members.sort((x, y) => x.offset < y.offset);
		for (m in members) {
			result.add(m.name, m.offset, createData(m.type, object, offset + m.offset));
		}

		result;
	}
}
