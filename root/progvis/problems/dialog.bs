use ui;
use core:geometry;
use core:io;
use progvis:net;
use graphics;
use lang:bs:macro;

dialog ProblemsDlg {
	public Action? action;
	private Client client;
	private progvis:Settings settings;
	private ProblemInfo[] problems;
	private Int currentProblemId;

	layout Grid {
		expandCol: 1;
		expandRow: 0;
		ListView list(["Problem", "Author", "Status"]) { row: 0; col: 0; }
		FillBox(250, 200) { row: 0; col: 0; }

		Label initial("Select a problem in the list to the left to start", HAlign:center, VAlign:center) { row: 0; col: 1; }
		Anchor(center) {
			row: 0; col: 1;
			FirstTryPanel firstTry {}
		}
		FillBox(400, 200) { row: 0; col: 1; }
	}

	init(Client client, progvis:Settings settings) {
		init("Problems", Size(600, 500)) {
			client = client;
			settings = settings;
			currentProblemId = -1;
		}

		firstTry.visible = false;

		list.onSelect = &this.onListSelect;

		(spawn populateList()).detach();
	}

	private void populateList() {
		unless (response = client.query(ProblemListRequest()) as ProblemListResponse) {
			showMessage(this, "Connection error", "Failed to retrieve list of problems.");
			close(-1);
			return;
		}

		problems = response.data;
		for (row in problems) {
			Str status = if (row.attempted) { "Attempted"; } else { "New"; };
			list.add([row.title, row.author, status]);
		}
	}

	private void onListSelect(Nat id, Bool selected) {
		unless (selected)
			return;

		ProblemInfo info = problems[id];
		unless (currentProblemId != info.id)
			return;

		currentProblemId = info.id;

		initial.visible = false;
		if (info.attempted) {
			// Show attempted panel.
		} else {
			// Show "start to solve" panel.
			firstTry.visible = true;
		}
	}

}

window FirstTryPanel extends Container {
	layout Grid {
		Label("You have not solved this problem before.", HAlign:center) {}
		nextLine;
		Label("Click the button below to start solving it!", HAlign:center) {}
		nextLine;
		FillBox(10, 20) {}
		nextLine;
		Anchor(center) { Button ok("Solve") {} }
	}

	init() {
		init() {}
	}
}
