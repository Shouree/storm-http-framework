use core:io;
use core:net;

// Thread.
thread Network;

// Port to listen to.
Nat serverPort() { 21337; }


/**
 * Connection to a client on the server.
 */
class ServerClient on Network {
	init(NetStream stream, Database db) {
		init {
			socket = stream;
			input = ObjIStream(stream.input);
			output = ObjOStream(stream.output);
			db = db;
		}
	}

	private Database db;
	private NetStream socket;
	private ObjIStream input;
	private ObjOStream output;

	// Authenticated user ID.
	private Int userId;

	// Client key for this user (for logout mainly).
	private Str clientKey;

	// Run the communication with this client.
	void run() {
		try {
			if (!authenticate()) {
				socket.close();
				return;
			}

			while (handleMessage())
				;

		} catch (Exception e) {
			print("Unhandled exception in the server:");
			print(e.toS);
		}
	}

	private Bool handleMessage() {
		try {
			Request request = Request:read(input);

			if (request as LogoutRequest) {
				db.logout(clientKey);
				send(LogoutResponse());
			} else {
				error("Unknown message.");
			}

		} catch (Exception e) {
			print("Exception in the server: ${e}");
			error(e.message);
			socket.close();
			return false;
		}

		true;
	}

	// Authenticate the user on the other side.
	private Bool authenticate() {
		Request request = Request:read(input);
		if (request as AuthRequest) {
			print("Checking for user: ${request.key}...");
			if (user = db.findUser(request.key)) {
				userId = user.id;
				clientKey = request.key;
				send(AuthResponse(user.name));
				return true;
			} else {
				// Note: This is fine since we know that the key is URL-safe.
				Url url = httpsUrl("storm-lang.org") / "progvis" / ("login.php?id=" + request.key);
				send(AuthLoginResponse(url));
				return false;
			}
		} else {
			error("The first message must be an authentication request!");
			return false;
		}
	}

	// Send an error message back.
	private void error(Str message) {
		send(ErrorResponse(message));
	}

	// Send a message to the client.
	private void send(Response response) {
		response.write(output);
		output.flush();
	}
}

// Run the server.
void serverMain() on Network {
	unless (listener = listen(serverPort))
		throw ServerError("Failed to listen to ${serverPort}!");

	Database db;

	while (stream = listener.accept()) {
		ServerClient client(stream, db);
		(spawn client.run()).detach();
	}

	print("Server terminated!");
	// TODO: Restart?
}
