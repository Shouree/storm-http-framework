use util:serialize;
use core:io;

/**
 * Misc. data types.
 */


/**
 * Representation of a single problem (no source code, intended for lists of problems).
 */
class ProblemInfo : serializable {
	Int id;

	Str title;
	Str author;

	// Is the next step to modify the main program.
	Bool nextIsMain;

	// Number of solutions.
	Nat solutions;

	init(Int id, Str title, Str author, Nat solutions) {
		init {
			id = id;
			title = title;
			author = author;
			solutions = solutions;
		}
	}

	// For sorting.
	Bool <(Problem o) {
		id < o.id;
	}
}

/**
 * Representation of a problem, including code.
 */
class Problem : extends ProblemInfo, serializable {
	// Main program.
	Code main;

	// Implementation of the data structure.
	Code implementation;

	// Reference implementation of the data structure.
	Code reference;

	// Create.
	init(Int id, Str title, Str author, Nat solutions, Code main, Code impl, Code ref) {
		init(id, title, author, solutions) {
			main = main;
			implementation = impl;
			reference = ref;
		}
	}
}

/**
 * A piece of code, indicating a language as well.
 */
class Code : serializable {
	// Source code.
	Str src;

	// Language (= file extension).
	Str language;

	// Create.
	init(Str src, Str language) {
		init {
			src = src;
			language = language;
		}
	}

	// Add to a MemoryProtocol.
	Url put(Str base, MemoryProtocol to) {
		MemOStream out;
		Utf8Output text(out);
		text.write(src);
		text.flush();
		to.put(base + "." + language, out.buffer);
	}
}


/**
 * A single high-score entry.
 */
class Score : serializable {
	Str name;
	Int points;
	Int place;

	init(Str name, Int points, Int place) {
		init {
			name = name;
			points = points;
			place = place;
		}
	}
}
