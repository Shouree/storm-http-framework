use util:serialize;

/**
 * This class is the base class for all requests (sent from the client to the server). We rely on
 * the built-in serialization for sending and receiving them.
 */
class Request : serializable {
	// Called by the server to execute the request. Returns a suitable message, or "null" if the
	// client should be disconnected.
	Response? execute(ServerConn server, Database db) {
		error("Unknown message");
	}

	// Helper to create an error message.
	protected Response error(Str message) {
		ErrorResponse(message);
	}
}


/**
 * Authentication request. Expected to be the first message sent by a client.
 *
 * Returns either an AuthReply, AuthLoginReply, or an error.
 */
class AuthRequest : extends Request, serializable {
	// The client key.
	Str key;

	init(Str key) {
		init { key = key; }
	}

	// NOTE: This is handled as a special case, so we don't override "execute" here.
}

/**
 * Log out from this client. No additional data needed.
 */
class LogoutRequest : extends Request, serializable {
	Response? execute(ServerConn server, Database db) : override {
		db.logout(server.clientId);
		LogoutResponse();
	}
}

/**
 * Change nickname.
 */
class ChangeNicknameRequest : extends Request, serializable {
	Str newName;

	init(Str newName) {
		init { newName = newName; }
	}

	Response? execute(ServerConn server, Database db) : override {
		db.changeName(server.userId, newName);
		AuthResponse(newName);
	}
}

/**
 * Ask for challenges.
 */
class ChallengesRequest : extends Request, serializable {
	Bool solved;

	init(Bool wantSolved) {
		init { solved = wantSolved; }
	}

	Response? execute(ServerConn server, Database db) : override {
		ProblemResponse(db.userChallenges(server.userId, solved));
	}
}

/**
 * Ask for a user's own problems.
 */
class OwnProblemsRequest : extends Request, serializable {
	Response? execute(ServerConn server, Database db) : override {
		ProblemResponse(db.ownProblems(server.userId));
	}
}

/**
 * Ask for more detailed stats of a problem.
 */
class StatsRequest : extends Request, serializable {
	// Problem we are interested in.
	Int problem;

	// Shall solutions be included in the response?
	Bool solutions;

	init(Int problem, Bool solutions) {
		init {
			problem = problem;
			solutions = solutions;
		}
	}

	init(Problem problem, Bool solutions) {
		init {
			problem = problem.id;
			solutions = solutions;
		}
	}

	Response? execute(ServerConn server, Database db) : override {
		Solution[] sol;
		if (solutions)
			sol = db.solutionsTo(problem);
		Problem? parent = db.parentTo(problem);
		StatsResponse(parent, sol);
	}
}

/**
 * Ask for details about a problem (including source).
 */
class DetailsRequest : extends Request, serializable {
	Int problemId;

	init(Int id) {
		init { problemId = id; }
	}

	Response? execute(ServerConn server, Database db) : override {
		db.problemDetails(problemId, server.userId);
	}
}

/**
 * Submit a solution to a problem.
 */
class PostSolutionRequest : extends Request, serializable {
	// Solution to this problem.
	Int problemId;

	// Type of solution.
	Str type;

	// Solution data (if any).
	Str? solution;

	init(Int problemId, Str type, Str? solution) {
		init {
			problemId = problemId;
			type = type;
			solution = solution;
		}
	}

	Response? execute(ServerConn server, Database db) : override {
		unless (problemAuthor = db.authorTo(problemId))
			throw ServerError("No problem with the id ${problemId}!");

		if (problemAuthor == server.userId)
			throw ServerError("Can not solve your own problem!");

		var id = db.newSolution(problemId, server.userId, type, solution);
		PostSolutionResponse(id);
	}
}

/**
 * Publish a new problem.
 */
class NewProblemRequest : extends Request, serializable {
	Str title;
	Str code;
	Str language;

	init(Str title, Str code, Str language) {
		init {
			title = title;
			code = code;
			language = language;
		}
	}

	Response? execute(ServerConn server, Database db) : override {
		var id = db.createProblem(server.userId, title, code, language);
		NewProblemResponse(id);
	}
}
