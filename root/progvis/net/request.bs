use util:serialize;

/**
 * This class is the base class for all requests (sent from the client to the server). We rely on
 * the built-in serialization for sending and receiving them.
 */
class Request : serializable {
	// Called by the server to execute the request. Returns a suitable message, or "null" if the
	// client should be disconnected.
	Response? execute(ServerConn server, Database db) {
		error("Unknown message");
	}

	// Helper to create an error message.
	protected Response error(Str message) {
		ErrorResponse(message);
	}
}


/**
 * Authentication request. Expected to be the first message sent by a client.
 *
 * Returns either an AuthReply, AuthLoginReply, or an error.
 */
class AuthRequest : extends Request, serializable {
	// The client key.
	Str key;

	init(Str key) {
		init { key = key; }
	}

	// NOTE: This is handled as a special case, so we don't override "execute" here.
}

/**
 * Log out from this client. No additional data needed.
 */
class LogoutRequest : extends Request, serializable {
	Response? execute(ServerConn server, Database db) : override {
		db.logout(server.clientId);
		LogoutResponse();
	}
}

/**
 * Change nickname.
 */
class ChangeNicknameRequest : extends Request, serializable {
	Str newName;

	init(Str newName) {
		init { newName = newName; }
	}

	Response? execute(ServerConn server, Database db) : override {
		db.changeName(server.userId, newName);
		AuthResponse(newName);
	}
}

/**
 * Ask for the leaderboard.
 */
class LeaderboardRequest : extends Request, serializable {
	Response? execute(ServerConn server, Database db) : override {
		ScorePair[] scores;
		for (user, score in db.allScores()) {
			scores << ScorePair(user, score);
		}

		scores.sort();

		// Pick the top 10, and the current user.
		Bool currentFound = false;
		Score[] result;
		for (i, score in scores) {
			Bool add = (score.user == server.userId);
			currentFound |= add;
			add |= i < 10;

			if (currentFound & !add)
				break;

			if (add) {
				if (user = db.findUserName(score.user))
					result << Score(user, score.score, i.int + 1);
			}
		}

		LeaderboardResponse(result);
	}
}

// Pair for use when working with the scoreboard.
private value ScorePair {
	Int user;
	Int score;

	init(Int user, Int score) {
		init { user = user; score = score; }
	}

	Bool <(ScorePair o) {
		score > o.score;
	}
}

/**
 * Publish a new problem.
 */
class NewProblemRequest : extends Request, serializable {
	Str title;
	Code impl;
	Code test;
	Code refImpl;

	// Is there a concurrency error in the combination main + impl currently?
	Bool currentError;

	init(Str title, Code impl, Code test, Code refImpl, Bool currentError) {
		init {
			title = title;
			test = test;
			impl = impl;
			refImpl = refImpl;
			currentError = currentError;
		}
	}

	Response? execute(ServerConn server, Database db) : override {
		Int id = db.createProblem(server.userId, title, impl, test, refImpl, currentError);
		NewProblemResponse(id);
	}
}
