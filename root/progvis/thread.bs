use ui;
use core:sync;
use core:lang;

/**
 * Represents a running thread inside the program.
 */
class ProgThread on Render {
	// Semaphore used to pause the monitored thread.
	Sema sema;

	// Current location. Set to null if the thread is currently running.
	SrcPos? pos;

	// Entries of called functions. We expect this array to contain at least one element when we
	// receive calls to 'onNewLocation'.
	StackFrame[] frames;

	// Create.
	init() {
		init() {
			sema(0);
		}
	}

	// Called by a monitored thread to possible pause execution.
	void onNewLocation(SrcPos pos) {
		// TODO: Decide if we should break.
		print("Thread reached ${pos}");
		this.pos = pos;
		// TODO: Save the stack contents as well!
		// sema.down();
		sleep(100 ms);
	}

	// Called when a new function was entered.
	void onFunctionEntered(Str name) {
		print("Function ${name} entered.");
		frames.push(StackFrame(name));
	}

	// Called when a function is about to return.
	void onFunctionExited() {
		print("Function ${frames.last.function} exited.");
		frames.pop();
	}

	// Resume the thread if it is not stopped.
	Bool resume() {
		if (pos) {
			this.pos = null;
			sema.up();
			true;
		} else {
			false;
		}
	}

	// Check if the thread is currently running.
	Bool running() {
		if (pos)
			true;
		else
			false;
	}

}

/**
 * A variable in a stack-frame.
 */
value StackVar {
	Str name;
	Value value;

	init(Str name, Value value) {
		init { name = name; value = value; }
	}
}


/**
 * A stack frame of a thread.
 */
class StackFrame on Render {
	// Name of the function. (TODO: Add a SrcPos?)
	Str function;

	// TODO: Should contain a copy of all variables as well!

	// Create.
	init(Str name) {
		init {
			function = name;
		}
	}
}
