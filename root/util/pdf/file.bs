use core:io;

/**
 * Describes a PDF file.
 *
 * A PDF file contains a number of objects, each described by an instance of PdfObject. These
 * objects may contain things like postscript code, images etc.
 */
class File {
	// The root object of this file. Add pages to the file through this object.
	Catalog root;

	// Initialize. Creates a Catalog object as the root object.
	init() {
		init() {}

		add(root);
	}

	// Write the pdf structure to file.
	void write(OStream to) {
		Nat pos = writeHeader(to);
		Nat[] offsets;

		for (o in objects) {
			offsets << pos;
			pos += writeObject(o, to);
		}

		writeFooter(pos, offsets, to);
	}

	// Add an object to this file.
	void add(PdfObject o) {
		objects << o;
		o.id = objects.count;
		o.addedTo(this);
	}

private:
	// All objects in this file.
	PdfObject[] objects;


	// Write the PDF header. Returns number of bytes written.
	Nat writeHeader(OStream to) {
		MemOStream memStream;
		var output = textOutput(memStream);
		output.write("%PDF-1.6\n%âœ“\n"); // Check mark to use some high-order bits.
		output.flush();

		Nat count = memStream.buffer.filled;
		to.write(memStream.buffer);
		count;
	}

	// Write an object. Return size in bytes.
	Nat writeObject(PdfObject o, OStream to) {
		MemOStream memStream;
		o.write(memStream);

		Nat count = memStream.buffer.filled;
		to.write(memStream.buffer);
		count;
	}

	// Write the footer.
	void writeFooter(Nat pos, Nat[] offsets, OStream to) {
		StrBuf out;
		out << fill(Char(48)); // 0
		out << "xref\n";
		out << "0 " << offsets.count << "\n";

		// First offset is special.
		out << "0000000000 65535 f\n";
		for (o in offsets) {
			out << width(10) << o << " 00000 n\n";
		}

		// Trailer to locate the xref table.
		// TODO: Allow specifying an arbitrary root object?
		out << "trailer <</Size " << (offsets.count + 1) << " /Root 1 0 R>>\n";
		out << "startxref\n" << pos << "\n%%EOF";

		var conv = textOutput(to);
		conv.write(out.toS);
		conv.flush();
	}
}

// Create a proper text stream.
package TextOutput textOutput(OStream to) {
	TextInfo info;
	info.useCrLf = false;
	info.useBom = false;
	return Utf8Output(to, info);
}
