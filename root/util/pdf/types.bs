use core:io;
use core:geometry;

/**
 * This is the root object that describes general properties of the file itself.
 *
 * In this implementation, we merge the 'catalog' and the 'pages' objects of the PDF file.
 */
class Catalog extends StrObject {
	// All pages in the document.
	Page[] pages;

	// Resources.
	Resources resources;

	// Create.
	init() {
		Pages p;
		init() {
			pages = p.pages;
			pagesData = p;
		}
	}

	// Called when added to somewhere.
	void addedTo(File f) {
		f.add(pagesData);
		f.add(resources);
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Type /Catalog /Pages " << pagesData.id << " 0 R >>";
	}

	// Reference to the 'pages' object.
	private Pages pagesData;

	// We need to split this object into two parts, and this object represents the 'Pages' part.
	private class Pages extends StrObject {
		// All pages. Shared with the parent Catalog object.
		Page[] pages;

		// Output.
		void output(StrBuf to) {
			to << "<</Type /Pages /Kids [";
			for (p in pages)
				to << p.id << " 0 R ";
			to << "] /Count " << pages.count << " >>";
		}
	}
}

/**
 * Describes a single page of a PDF document.
 */
class Page extends StrObject {
	// Remember the owning file.
	File file;

	// Physical size of this page (in points, 1/74 inces).
	Rect mediaBox;

	// Content of this page.
	Content content;

	// Create a page.
	init(File f, Rect box) {
		init() {
			file = f;
			mediaBox = box;
		}

		f.add(this);
		f.add(content);
	}


	// Output.
	void output(StrBuf to) {
		to << "<</Type /Page /MediaBox [";
		to << mediaBox.p0.x << " " << mediaBox.p0.y << " " << mediaBox.p1.x << " " << mediaBox.p1.y;
		to << "] /Contents " << content.id << " 0 R ";
		to << "/Resources " << file.root.resources.id << " 0 R >>";
	}
}


/**
 * Describes the content of a page.
 */
class Content extends StreamObject {
	// Physical coordinate system (in mm).
	Size physical;

	// Commands to execute.
	StrBuf data;

	// Output.
	void output(OStream to) {
		var t = textOutput(to);
		t.write(data.toS);
		t.flush();
	}
}


/**
 * Describes resources for one or more pages.
 *
 * This object keeps track of objects in Basic Storm and their corresponding representation in a PDF
 * file.
 *
 * The Graphic object creates one global table of all resources so that it can be used for all pages
 * easily.
 */
class Resources extends StrObject {

	// Find (or create) a font specification matching the provided font.
	Str font(ui:Font f) {
		if (fonts.has(f.name)) {
			fonts.get(f.name);
		} else {
			Str id = newId("F");
			fonts.put(f.name, id);
			res.put(id, FontResource(id, f));

			id;
		}
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Font <<\n";
		for (v in fonts) {
			to << v << " ";
			res.get(v).output(to);
			to << "\n";
		}
		to << ">> >>";
	}

private:
	// All resources stored here.
	Str->Resource res;

	// Fonts used. Refers to the font identifier.
	Str->Str fonts;

	// Generate a identifier for a resource (with the given prefix). The prefix should not start with "/"
	Str newId(Str prefix) {
		Nat id = 1;
		Str candidate;
		do {
			candidate = "/${prefix}${id}";
		} while (res.has(candidate)) {
			id++;
		}

		candidate;
	}
}


/**
 * Describes a resource in a PDF file, such as a font or a bitmap.
 */
class Resource {
	// The name of this resource.
	Str name;

	// Create.
	init(Str name) {
		init() { name = name; }
	}

	// Output.
	void output(StrBuf to) : abstract;
}


/**
 * A font resource.
 */
class FontResource extends Resource {
	// Font.
	ui:Font font;

 	// Create.
	init(Str name, ui:Font font) {
		init(name) {
			font = font;
		}
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Type /Font /Subtype /TrueType /BaseFont /";

		// Remove spaces in the font's name.
		Char space = " ".begin.v;
		for (c in font.name) {
			if (c != space)
				to << c;
		}

		// TODO: Allow other encodings? We should eventually support UTF through custom encodings.
		to << " /Encoding /WinAnsiEncoding >>";
	}
}
