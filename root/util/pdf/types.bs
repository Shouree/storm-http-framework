use core:io;
use core:geometry;
use graphics;
use ui;

/**
 * This is the root object that describes general properties of the file itself.
 *
 * In this implementation, we merge the 'catalog' and the 'pages' objects of the PDF file.
 */
class Catalog extends StrObject {
	// All pages in the document.
	Page[] pages;

	// Resources.
	Resources resources;

	// Create.
	init() {
		Pages p;
		init() {
			pages = p.pages;
			pagesData = p;
		}
	}

	// Called when added to somewhere.
	void addedTo(File f) {
		f.add(pagesData);
		f.add(resources);
		if (identityFn)
			f.add(identityFn);
		file = f;
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Type /Catalog /Pages " << pagesData.id << " 0 R >>";
	}

	// Get the ID of the 'pages' object.
	Nat pagesId() {
		pagesData.id;
	}

	// Get the identity function.
	IdentityFunction identity() {
		if (identityFn) {
			identityFn;
		} else {
			IdentityFunction fn;
			identityFn = fn;
			if (file)
				file.add(fn);
			fn;
		}
	}

	// Reference to the 'pages' object.
	private Pages pagesData;

	// File we've been added to.
	private File? file;

	// We need to split this object into two parts, and this object represents the 'Pages' part.
	private class Pages extends StrObject {
		// All pages. Shared with the parent Catalog object.
		Page[] pages;

		// Output.
		void output(StrBuf to) {
			to << "<</Type /Pages /Kids [";
			for (p in pages)
				to << p.id << " 0 R ";
			to << "] /Count " << pages.count << " >>";
		}
	}

	// Identity function. Created when needed.
	IdentityFunction? identityFn;
}

/**
 * Describes a single page of a PDF document.
 */
class Page extends StrObject {
	// Remember the owning file.
	File file;

	// Physical size of this page (in points, 1/74 inces).
	Rect mediaBox;

	// Content of this page.
	Content content;

	// Create a page.
	init(File f, Rect box) {
		init() {
			file = f;
			mediaBox = box;
		}

		f.add(this);
		f.add(content);
	}


	// Output.
	void output(StrBuf to) {
		to << "<</Type /Page /MediaBox [";
		to << mediaBox.p0.x << " " << mediaBox.p0.y << " " << mediaBox.p1.x << " " << mediaBox.p1.y;
		to << "] /Contents " << content.id << " 0 R ";
		to << "/Parent " << file.root.pagesId << " 0 R ";
		to << "/Resources " << file.root.resources.id << " 0 R >>";
	}
}


/**
 * Describes the content of a page.
 */
class Content extends StreamObject {
	// Commands to execute.
	StrBuf data;

	// Output.
	void output(OStream to) {
		var t = textOutput(to);
		t.write(data.toS);
		t.flush();
	}
}


/**
 * Describes a Form XObject (distinct from PDF forms).
 *
 * These are used to group objects, most notably in order to describe transparency properly, and to
 * embed images.
 */
class XObject extends StreamObject {
	// Owning file.
	File file;

	// The name of this XObject in the resource dictionary.
	Str name;

	// Create, associated with a file.
	init(File file) {
		init() {
			file = file;
		}

		// Add ourselves to the file.
		file.add(this);

		// Register ourselves with the global 'resources' object.
		file.root.resources.xObj(this);
	}
}

/**
 * Class describing a Form XObject.
 *
 * We use these objects to implement transparency groups, but they may also be used to group
 * operations together to improve the efficiency of the PDF file.
 */
class FormXObject extends XObject {
	// Bounding box.
	Rect bound;

	// Commands to execute.
	StrBuf data;

	// Create.
	init(File file, Rect bound) {
		init(file) {
			bound = bound;
		}
	}

	// Output the header.
	void outputHeader(TextOutput to) {
		to.write("/Type /XObject ");
		to.write("/Subtype /Form ");
		to.write("/BBox [${bound.p0.x} ${bound.p0.y} ${bound.p1.x} ${bound.p1.y}] ");
		to.write("/Resources ${file.root.resources.id} 0 R ");
		to.write("/Group << /S /Transparency >> ");
	}

	// Output.
	void output(OStream to) {
		var t = textOutput(to);
		t.write(data.toS);
		t.flush();
	}
}

// Convert a color component to a byte.
private Byte toByte(Float v) {
	(v * 255.0).int.byte;
}

/**
 * Class describing an image XObject.
 */
class ImageXObject extends XObject {
	// Source bitmap.
	Bitmap src;

	// The alpha channel for this image, if we have one!
	AlphaXObject? alpha;

	// Create.
	init(File file, Bitmap bitmap) {
		init(file) { src = bitmap; }

		if (src.image.hasAlpha) {
			alpha = AlphaXObject(file, bitmap);
		}
	}

	// Output the header.
	void outputHeader(TextOutput to) {
		to.write("/Type /XObject /Subtype /Image ");
		to.write("/Width ${src.size.w.int} /Height ${src.size.h.int}");
		to.write("/ColorSpace /DeviceRGB /BitsPerComponent 8 /Interpolate true ");
		if (alpha) {
			to.write("/SMask ${alpha.id} 0 R ");
		}
	}

	// Output.
	void output(OStream to) {
		Image img = src.image;
		for (Nat y = 0; y < img.height; y++) {
			outputRow(to, img, y);
		}
	}

	// Output a single scanline.
	void outputRow(OStream to, Image img, Nat y) {
		Buffer b = buffer(img.width * 3);

		Nat at = 0;
		for (Nat x = 0; x < img.width; x++) {
			Color c = img.get(x, y);
			b[at++] = toByte(c.r);
			b[at++] = toByte(c.g);
			b[at++] = toByte(c.b);
		}

		b.filled(img.width * 3);
		to.write(b);
	}
}


/**
 * Class describing an image's alpha channel.
 */
class AlphaXObject extends XObject {
	// Source bitmap.
	Bitmap src;

	// Create.
	init(File file, Bitmap bitmap) {
		init(file) { src = bitmap; }
	}

	// Output the header.
	void outputHeader(TextOutput to) {
		to.write("/Type /XObject /Subtype /Image ");
		to.write("/Width ${src.size.w.int} /Height ${src.size.h.int} ");
		to.write("/ColorSpace /DeviceGray /BitsPerComponent 8 /Interpolate true ");
	}

	// Output.
	void output(OStream to) {
		Image img = src.image;
		for (Nat y = 0; y < img.height; y++) {
			outputRow(to, img, y);
		}
	}

	// Output a single scanline.
	void outputRow(OStream to, Image img, Nat y) {
		Buffer b = buffer(img.width);

		for (Nat x = 0; x < img.width; x++) {
			Color c = img.get(x, y);
			b[x] = toByte(c.a);
		}

		b.filled(img.width);
		to.write(b);
	}

	// Convert a float value to a byte.
	Byte toByte(Float v) : static {
		(v * 255.0).int.byte;
	}
}


/**
 * Describes resources for one or more pages.
 *
 * This object keeps track of objects in Basic Storm and their corresponding representation in a PDF
 * file.
 *
 * The Graphic object creates one global table of all resources so that it can be used for all pages
 * easily.
 */
class Resources extends StrObject {

	// Find (or create) a font specification matching the provided font.
	Str font(ui:Font f) {
		if (fonts.has(f.name)) {
			fonts.get(f.name).name;
		} else {
			Str name = newName("F");
			res.put(name);
			fonts.put(f.name, FontResource(name, f));

			name;
		}
	}

	// Add an XObject.
	void xObj(XObject obj) {
		obj.name = newName("X");
		res.put(obj.name);
		xObjs << obj;
	}

	// Get the name of a bitmap.
	Str bitmap(File file, Bitmap b) {
		if (bitmaps.has(b)) {
			bitmaps.get(b).name;
		} else {
			ImageXObject obj(file, b);
			bitmaps.put(b, obj);
			obj.name;
		}
	}

	// Add a graphics state that describes a desired alpha channel.
	Str alpha(Float alpha) {
		Int key = (alpha * 100).int;
		if (alphas.has(key)) {
			alphas.get(key).name;
		} else {
			Str name = newName("GS");
			res.put(name);
			alphas.put(key, GSResource(name, alpha));

			name;
		}
	}

	// Add a pattern resource, return its new title. Generally, these are not reusable and as such
	// we don't bother to de-duplicate them.
	Str pattern(PatternResource p) {
		var name = newName("P");
		res.put(name);
		p.name = name;
		patterns << p;
		name;
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Font <<\n";
		for (v in fonts) {
			to << v.name << " ";
			v.output(to);
			to << "\n";
		}
		to << ">>\n";

		to << "/XObject <<\n";
		for (x in xObjs) {
			to << x.name << " " << x.id << " 0 R\n";
		}
		to << ">>\n";

		to << "/ExtGState <<\n";
		for (v in alphas) {
			to << v.name << " ";
			v.output(to);
			to << "\n";
		}
		to << ">>\n";

		to << "/Pattern <<\n";
		for (p in patterns) {
			to << p.name << " " << p.id << " 0 R\n";
		}
		to << ">> ";

		to << ">>";
	}

private:
	// The names of all resources, so that we make sure to keep identifiers unique.
	Set<Str> res;

	// All fonts Font name -> resource.
	Str->FontResource fonts;

	// All bitmaps.
	Bitmap->ImageXObject bitmaps;

	// All graphics state resources.
	Int->GSResource alphas;

	// All patterns.
	PatternResource[] patterns;

	// All XObjects.
	XObject[] xObjs;

	// Generate a identifier for a resource (with the given prefix). The prefix should not start with "/"
	Str newName(Str prefix) {
		Nat id = 1;
		Str candidate;
		do {
			candidate = "/${prefix}${id}";
		} while (res.has(candidate)) {
			id++;
		}

		candidate;
	}
}


/**
 * A font resource.
 */
class FontResource {
	// The name of this resource
	Str name;

	// Font.
	ui:Font font;

 	// Create.
	init(Str name, ui:Font font) {
		init() {
			name = name;
			font = font;
		}
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Type /Font /Subtype /TrueType /BaseFont /";

		// Remove spaces in the font's name.
		Char space = " ".begin.v;
		for (c in font.name) {
			if (c != space)
				to << c;
		}

		// TODO: Allow other encodings? We should eventually support UTF through custom encodings.
		to << " /Encoding /WinAnsiEncoding >>";
	}
}


/**
 * A graphics state resource.
 */
class GSResource {
	// The name of this resource
	Str name;

	// Alpha value.
	Float alpha;

	// Create.
	init(Str name, Float alpha) {
		init() {
			name = name;
			alpha = alpha;
		}
	}

	// Output.
	void output(StrBuf to) {
		to << "<</Type /ExtGState /CA " << alpha << " /ca " << alpha << ">>";
	}
}


/**
 * A Pattern resource.
 */
class PatternResource extends StrObject {
	// The name of this resource. Set by the Resources class when added.
	Str name;

	// Pattern type.
	Nat type;

	// Current transformation matrix.
	Transform tfm;

	// Create.
	init(File file, Nat type, Transform tfm) {
		init() {
			type = type;
			tfm = tfm;
		}

		file.add(this);
	}

	// Output
	void output(StrBuf to) {
		to << "<</Type /Pattern /PatternType " << type << " ";
		to << "/Matrix [ "
		   << tfm.at(0, 0) << " " << tfm.at(0, 1) << " "
		   << tfm.at(1, 0) << " " << tfm.at(1, 1) << " "
		   << tfm.at(3, 0) << " " << tfm.at(3, 1) << " ] ";
		outputData(to);
		to << ">>";
	}

	// Output pattern-specific data.
	void outputData(StrBuf to) : abstract;
}

/**
 * A shading pattern.
 */
class ShadingPattern extends PatternResource {
	// Shading type.
	Nat shadingType;

	// Functions for shading according to the stops.
	StitchFunction redFn;
	StitchFunction greenFn;
	StitchFunction blueFn;

	// Alpha shading (if any).
	AlphaShadingPattern? alpha;

	// Create.
	init(File file, Nat shadingType, Gradient gradient, Transform tfm) {
		Float[] p;
		Float[] r;
		Float[] g;
		Float[] b;
		Bool hasAlpha = false;
		for (s in gradient.stops) {
			p << s.pos;
			r << s.color.r;
			g << s.color.g;
			b << s.color.b;

			hasAlpha |= s.color.a < 0.99;
		}

		init(file, 2, tfm) {
			redFn(file, p, r);
			greenFn(file, p, g);
			blueFn(file, p, b);
			shadingType = shadingType;
		}

		if (hasAlpha) {
			setupAlpha(file, gradient, tfm);
		}
	}

	void setupAlpha(File file, Gradient gradient, Transform tfm) {
		AlphaShadingPattern a(file, this, gradient, tfm);
		// Str pattern = file.root.resources.pattern(a);

		// TransparencyXObject g(file);
		// g.data << "/Pattern cs " << pattern << " scn sh";

		// alpha = a;
		// alphaGroup = g;
	}

	// Output pattern-specific data.
	void outputData(StrBuf to) {
		to << "/Shading <<";
		to << "/ShadingType " << shadingType;
		to << " /ColorSpace /DeviceRGB ";
		to << " /Function [ " << redFn.id << " 0 R " << greenFn.id << " 0 R " << blueFn.id << " 0 R ] ";
		if (alpha) {
			to << "/ExtGState << /SMask " << alpha.id << " 0 R >> ";
		}
		outputShading(to);
		to << ">> ";
	}

	// Output shading specific data.
	void outputShading(StrBuf to) : abstract;
}


/**
 * A shading pattern suitable for the alpha channel. Re-uses the subclass implementation of other shadings.
 */
class AlphaShadingPattern extends PatternResource {
	// The pattern we're embedded inside. We will ask that pattern to output the specifics so we don't have to.
	ShadingPattern owner;

	// Our function.
	StitchFunction fn;

	// Create.
	init(File file, ShadingPattern owner, Gradient gradient, Transform tfm) {
		Float[] p;
		Float[] a;
		for (s in gradient.stops) {
			p << s.pos;
			a << s.color.a;
		}

		init(file, 2, tfm) {
			owner = owner;
			fn(file, p, a);
		}
	}

	// Output pattern-specific data.
	void outputData(StrBuf to) {
		to << "/Shading <<";
		to << "/ShadingType " << owner.shadingType;
		to << " /ColorSpace /DeviceGray ";
		to << " /Function [ " << fn.id << " 0 R ] ";
		owner.outputShading(to);
		to << ">> ";
	}
}

/**
 * A linear gradient pattern resource.
 */
class AxialShading extends ShadingPattern {
	// Coordinates defining the line along which the pattern shall be applied.
	Point p0;
	Point p1;

	// Create.
	init(File file, LinearGradient gradient, Transform tfm) {
		// We're an axial shading.
		init(file, 2, gradient, tfm) {
			p0 = gradient.start;
			p1 = gradient.end;
		}
	}

	// Output our data.
	void outputShading(StrBuf to) {
		to << "/Coords [" << p0.x << " " << p0.y << " " << p1.x << " " << p1.y << "] ";
		to << "/Extend [true true] ";
	}
}


/**
 * An identity function in the PDF. Stitched together to make shading functions.
 */
class IdentityFunction extends StreamObject {
	void outputHeader(TextOutput to) {
		to.write("/FunctionType 0 ");
		to.write("/Domain [ 0.0 1.0 ] ");
		to.write("/Range [ 0.0 1.0 ] ");
		to.write("/Size [ 2 ] ");
		to.write("/BitsPerSample 16");
	}

	void output(OStream to) {
		Buffer b = buffer(4);
		b[0] = 0;
		b[1] = 0;
		b[2] = 0xFF;
		b[3] = 0xFF;
		b.filled(4);
		to.write(b);
	}
}


/**
 * A unary stitched function usable to approximate shading functions.
 */
class StitchFunction extends StrObject {
	// Identity function ID.
	Nat identityId;

	// Points where we have samples.
	Float[] points;

	// Sample values at those points.
	Float[] values;

	// Create.
	init(File file, Float[] points, Float[] values) {
		points = points.clone;
		values = values.clone;

		if (points.first > 0.0) {
			points.insert(0, 0.0);
			values.insert(0, values.first);
		}

		if (points.last < 1.0) {
			points.push(1.0);
			values.push(values.last);
		}

		init() {
			identityId = file.root.identity.id;
			points = points;
			values = values;
		}

		file.add(this);
	}

	// Output.
	void output(StrBuf to) {
		to << "<</FunctionType 3 /Domain [ 0.0 1.0 ] /Range [ 0.0 1.0 ] /Functions [";
		to << (" ${identityId} 0 R" * (points.count - 1));
		to << " ] /Bounds [";
		for (Nat i = 1; i < points.count - 1; i++)
			to << " " << points[i];

		to << " ] /Encode [";
		for (Nat i = 1; i < points.count; i++)
			to << " " << values[i - 1] << " " << values[i];
		to << "] >>";
	}
}
