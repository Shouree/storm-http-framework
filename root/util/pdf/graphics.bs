use ui;
use core:io;
use core:geometry;
use graphics;

/**
 * Graphics object that outputs to a PDF file.
 *
 * Call 'nextPage' to start drawing on a new page.
 */
class PdfGraphics extends Graphics {
	// Create, specifying dimensions. 'physical' is the page's physical dimension in millimeters,
	// and 'virtual' is the virtual dimensions in what corresponds to pixels on other output
	// devices.
	init(Size physical, Size virtual) {
		File pdf;
		Page p(pdf, Rect(Point(), toPt(physical)));

		init() {
			pdf = pdf;
			res = pdf.root.resources;
			current = p;
			output = p.content.data;
			physical = physical;
			virtual = virtual;
		}

		preparePage();
	}

	// Save the finished file to a stream.
	void save(OStream to) {
		pdf.write(to);
	}

	// Save the finished file to a file.
	void save(Url to) {
		var s = to.write();
		save(s);
		s.close();
	}

	// Start drawing to a new page.
	void nextPage() {
		current = Page(pdf, Rect(Point(), toPt(physical)));
		preparePage();
	}

	// Draw a line.
	void line(Point a, Point b, Brush brush) {
		putColor(brush, true);
		put(a, "m ");
		put(b, "l S\n");
	}

	// Draw a rectangle.
	void draw(Rect r, Brush brush) {
		putColor(brush, true);
		put(r.p0, "");
		put(r.size, "re S\n");
	}

	// Draw a rounded rectangle.
	void draw(Rect r, Size edges, Brush brush) {
		putColor(brush, true);
		putRounded(r, edges, "S\n");
	}

	// Draw a path.
	void draw(Path p, Brush brush) {
		putColor(brush, true);
		put(p, "S\n");
	}

	// Draw an oval.
	void oval(Rect r, Brush brush) {
		putColor(brush, true);
		putOval(r, "S\n");
	}

	// Fill the entire page.
	void fill(Brush brush) {
		fill(Rect(Point(), virtual), brush);
	}

	// Fill a rectangle.
	void fill(Rect r, Brush brush) {
		putColor(brush, false);
		put(r.p0, "");
		put(r.size, "re f\n");
	}

	// Fill a rounded rectangle.
	void fill(Rect r, Size edges, Brush brush) {
		putColor(brush, false);
		putRounded(r, edges, "f\n");
	}

	// Draw a path.
	void fill(Path p, Brush brush) {
		putColor(brush, false);
		put(p, "f\n");
	}

	// Fill an oval.
	void fillOval(Rect r, Brush brush) {
		putColor(brush, false);
		putOval(r, "f\n");
	}

	// Draw text.
	void text(Str text, Font font, Brush brush, Rect rect) {
		Text t(text, font);

		// TODO: How do we handle clip rectangles etc? DX doesn't clip or line-wrap when using this
		// mode. Maybe Pango does?
		// t.layoutBorder = rect.size;

		draw(t, brush, rect.p0);
	}

	// Draw text.
	void draw(Text text, Brush brush, Point origin) {
		// TODO: We probably want to have some fancy text effects down the line, such as stroking the outline etc.
		putColor(brush, false);

		Font font = text.font;
		Str f = res.font(font);
		output << "BT\n";
		// Set font.
		output << f << " " << font.pxHeight << " Tf\n";
		// Transform the coordinate system so the text is not upside down. Also translate so that
		// the top-left of the layout box is at 0, 0.
		output << "1 0 0 -1 " << origin.x << " " << origin.y << " Tm\n";

		Float lastStart = 0;
		for (line in text.lineInfo) {
			output << "0 " << (lastStart - line.baseline) << " Td\n";
			lastStart = line.baseline;

			// TODO: We should handle unicode somehow. It seems like we have to generate our own
			// encoding for that to work properly... At the moment, we blindly hope that ANSI
			// encoding is sufficient (which in general, it isn't).
			output << "<";
			for (c in line.text) {
				output << hex(toANSI(c));
			}
			output << ">Tj\n";
		}

		output << "ET\n";
	}

private:
	// Output to.
	File pdf;

	// Resources in the pdf.
	Resources res;

	// Current page.
	Page current;

	// Current stream (for convenience).
	StrBuf output;

	// Dimensions, physical and virtual.
	Size physical;
	Size virtual;

	// Prepare a new page.
	void preparePage() {
		output = current.content.data;
		pdf.root.pages << current;

		// reset()

		// Line join style, line end style and line width.
		output << "1 j 1 J 1 w\n";

		// Scale the default coordinate system to millimeters.
		output << "2.83464567 0 0 2.83464567 0 0 cm\n";

		// Invert the x axis, and scale to fit the new coordinate system.
		output << (physical.w / virtual.w) << " 0 0 " << ((-physical.h) / virtual.h) << " 0 " << physical.h << " cm\n";
	}

	// Output a point to the current page.
	void put(Point pt, Str after) {
		output << pt.x << " " << pt.y << " " << after;
	}

	// Output a size to the current page.
	void put(Size sz, Str after) {
		output << sz.w << " " << sz.h << " " << after;
	}

	// Output a color.
	void put(Color c, Str after) {
		output << c.r << " " << c.g << " " << c.b << " " << after;
	}

	// Output a path.
	void put(Path p, Str after) {
		Point last;
		for (e in p.data) {
			if (e.t == PathPointType:tClose) {
				output << "h ";
			} else if (e.t == PathPointType:tStart) {
				put(e.p0, "m ");
				last = e.p0;
			} else if (e.t == PathPointType:tLine) {
				put(e.p0, "l ");
				last = e.p0;
			} else if (e.t == PathPointType:tBezier2) {
				put(last + (2.0/3.0)*(e.p0 - last), "");
				put(e.p1 + (2.0/3.0)*(e.p0 - e.p1), "");
				put(e.p1, "c ");
				last = e.p1;
			} else if (e.t == PathPointType:tBezier3) {
				put(e.p0, "");
				put(e.p1, "");
				put(e.p2, "c ");
				last = e.p2;
			}
		}
		output << after;
	}

	// Output a quarter of a circle as a quadratic bezier curve. Uses 'before' to move to the first
	// point if present.
	void putArc(Point from, Str move, Point middle, Point to) {
		Float ratio = 0.5522847498307935;
		Point d1 = from + (middle - from)*ratio;
		Point d2 = to   + (middle -   to)*ratio;

		if (move.any)
			put(from, move);

		put(d1, "");
		put(d2, "");
		put(to, "c ");
	}

	// Output a rounded rectangle.
	void putRounded(Rect r, Size edges, Str after) {
		Point p0 = r.p0;
		Point p1(r.p1.x, r.p0.y);
		Point p2 = r.p1;
		Point p3(r.p0.x, r.p1.y);

		putArc(p0 + Size(0, edges.h), "m ", p0, p0 + Size(edges.w, 0));
		putArc(p1 + Size(-edges.w, 0), "l ", p1, p1 + Size(0, edges.h));
		putArc(p2 + Size(0, -edges.h), "l ", p2, p2 + Size(-edges.w, 0));
		putArc(p3 + Size(edges.w, 0), "l ", p3, p3 + Size(0, -edges.h));
		output << "h " << after;
	}

	// Output an oval.
	void putOval(Rect r, Str after) {
		Point c = r.center;

		putArc(Point(r.p0.x, c.y), "m ", r.p0, Point(c.x, r.p0.y));
		putArc(Point(c.x, r.p0.y), "", Point(r.p1.x, r.p0.y), Point(r.p1.x, c.y));
		putArc(Point(r.p1.x, c.y), "", r.p1, Point(c.x, r.p1.y));
		putArc(Point(c.x, r.p1.y), "", Point(r.p0.x, r.p1.y), Point(r.p0.x, c.y));

		output << "h " << after;
	}

	// Output color information. 'stroke' indicates whether to set for stroke operations or fill operations.
	void putColor(Brush b, Bool stroke) {
		if (b as SolidBrush) {
			putSolid(b, stroke);
		// } else if (b as BitmapBrush) {
		// } else if (b as LinearGradient) {
		} else {
			print("Unsupported brush found!");
		}
	}

	// Output a solid color.
	void putSolid(SolidBrush b, Bool stroke) {
		print("TODO: Respect 'opacity' as well!");
		if (stroke)
			put(b.color, "RG ");
		else
			put(b.color, "rg ");
	}
}
