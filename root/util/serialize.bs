use core:io;

/**
 * Read serialized objects and output a human-readable string representation. This does not require
 * that we have access to all objects stored in the serialized stream.
 */
class TextObjStream {
	// Create.
	init(IStream src) {
		init() { src = src; }
	}

	// Read an object to a StrBuf.
	void read(StrBuf to) {
		Nat type = Nat:read(src);
		read(to, type);
	}

	// Read to a string.
	Str read() {
		StrBuf to;
		read(to);
		to.toS();
	}

private:

	/**
	 * Type description.
	 */
	class Type {
		Str name;
		Byte flags;
		Nat parent;
		Member[] members;

		init(Str name, Byte flags, Nat parent) {
			init() {
				name = name;
				flags = flags;
				parent = parent;
			}
		}
	}

	/**
	 * Member description.
	 */
	value Member {
		Nat type;
		Str name;

		init(Nat type, Str name) {
			init() {
				type = type;
				name = name;
			}
		}
	}

	// Source stream.
	IStream src;

	// Remember all types.
	Nat->Type types;

	// Remember previously stored objects.
	Set<Nat> objects;

	// Read an object of a known type.
	void read(StrBuf to, Nat type) {
		if (readPrimitive(to, type))
			return;

		Type t = findType(type);

		if ((t.flags & TypeInfo:classType.v) != 0) {
			readObject(to, t);
		} else {
			readValue(to, t);
		}
	}

	// Read an object.
	void readObject(StrBuf to, Type type) {
		// A previous object?
		Nat objId = Nat:read(src);
		if (objects.has(objId)) {
			to << "<previous instance " << objId << ">\n";
			return;
		}
		objects.put(objId);

		// Actual type?
		Nat actualType = Nat:read(src);
		Type actual = findType(actualType);

		to << actual.name << " (instance " << objId << ") {\n";
		to.indent();

		readMembers(to, actual);

		to.dedent();
		to << "}";
	}

	// Read a value.
	void readValue(StrBuf to, Type type) {
		to << type.name << " {\n";
		to.indent();

		readMembers(to, type);

		to.dedent();
		to << "}";
	}

	// Read members from a type.
	void readMembers(StrBuf to, Nat typeId) {
		readMembers(to, findType(typeId));
	}

	void readMembers(StrBuf to, Type type) {
		if (type.parent != 0)
			readMembers(to, type.parent);

		for (m in type.members) {
			to << m.name << ": ";
			read(to, m.type);
			to << "\n";
		}
	}

	// Find the type 'type'. Read it if necessary.
	Type findType(Nat type) {
		if (types.has(type))
			return types.get(type);

		Byte flags = Byte:read(src);
		Str name = demangleName(Str:read(src));
		Nat parent = Nat:read(src);
		Type t(name, flags, parent);

		do {
			Nat type = Nat:read(src);
		} while (type > 0) {
			Str name = Str:read(src);
			t.members << Member(type, name);
		}

		types.put(type, t);

		t;
	}

	// Read a primitive type.
	Bool readPrimitive(StrBuf to, Nat type) {
		if (type == StoredId:boolId.v) {
			to << Bool:read(src);
		} else if (type == StoredId:byteId.v) {
			to << Byte:read(src);
		} else if (type == StoredId:intId.v) {
			to << Int:read(src);
		} else if (type == StoredId:natId.v) {
			to << Nat:read(src);
		} else if (type == StoredId:longId.v) {
			to << Long:read(src);
		} else if (type == StoredId:wordId.v) {
			to << Word:read(src);
		} else if (type == StoredId:floatId.v) {
			to << Float:read(src);
		} else if (type == StoredId:doubleId.v) {
			to << Double:read(src);
		} else if (type == StoredId:strId.v) {
			to << Str:read(src);
		} else {
			return false;
		}

		true;
	}
}
