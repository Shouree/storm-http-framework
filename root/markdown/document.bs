/**
 * Root representation of a Markdown document.
 */
class Document {
	// Create an empty document.
	init() {
		init {}
	}

	// Elements in the document.
	Element[] elements;

	// Add an element.
	void add(Element e) {
		elements << e;
	}

	// To string.
	protected void toS(StrBuf to) : override {
		to << join(elements, "\n\n");
	}

	// To HTML.
	Html toHtml() {
		Html out;
		toHtml(out);
		out;
	}

	void toHtml(Html to) {
		for (i, element in elements) {
			if (i > 0)
				to.html("\n");
			element.toHtml(to);
		}
	}
}


/**
 * Element in a document.
 */
class Element {
	// To HTML.
	void toHtml(Html to) : abstract;
}


/**
 * Heading.
 */
class Heading extends Element {
	// Heading level.
	Nat level;

	// Text.
	FormattedText text;

	// Create.
	init(Nat level, FormattedText text) {
		init { level = level; text = text; }
	}

	// Output.
	protected void toS(StrBuf to) : override {
		to << "#"*level << " " << text;
	}

	// To HTML.
	void toHtml(Html to) : override {
		to.html("<h${level}>");
		text.toHtml(to);
		to.html("</h${level}>");
	}
}


/**
 * A paragraph of text.
 */
class Paragraph extends Element {
	// The text in the paragraph.
	FormattedText text;

	// Create.
	init(FormattedText text) {
		init { text = text; }
	}

	// Output.
	protected void toS(StrBuf to) : override {
		to << text;
	}

	// To HTML.
	void toHtml(Html to) : override {
		to.html("<p>\n");
		to.indent();
		text.toHtml(to);
		to.dedent();
		to.html("\n</p>");
	}
}


/**
 * A generic list.
 */
class List extends Element {
	// List element
	value ListElem {
		// Leading text.
		FormattedText text;

		// Any additional elements.
		Element[] content;

		// Create.
		init(FormattedText text) {
			init { text = text; }
		}
	}

	// Contents of the list.
	ListElem[] content;

	// Create.
	init() {}

	// Add an element. Content can be added later.
	void add(FormattedText text) {
		content << ListElem(text);
	}

	// To string.
	protected void toS(StrBuf to) : override {
		to.indentBy("  ");
		for (e in content) {
			to << "- ";
			Indent z(to);
			to << e.text;
			for (c in e.content) {
				to << "\n\n" << c;
			}
		}
	}

	void toHtml(Html to) : override {
		to.html("<ul>\n");
		to.indent();
		for (e in content) {
			to.html("<li>\n");
			to.indent();
			e.text.toHtml(to);
			to.html("\n");

			for (c in e.content) {
				to.html("\n");
				c.toHtml(to);
			}
			to.dedent();
			to.html("</li>\n");
		}
		to.dedent();
		to.html("</ul>");
	}
}
