use core:lang;
use lang:bs;
use lang:bs:macro;
use layout;

/**
 * Functions used by the syntax.
 */


/**
 * A presentation declaration.
 */
package class PresDecl extends NamedDecl {
	SStr name;
	Str title;
	Scope scope;
	SPresCont content;

	init(SStr name, Str title, Scope scope, SPresCont content) {
		init() {
			name = name;
			title = title;
			scope = scope;
			content = content;
		}
	}

	// Create a named entity.
	Named doCreate() {
		PresFn(name, title, scope, content);
	}
}


/**
 * A function that declares a presentation.
 */
package class PresFn extends BSRawFn {
	Str title;
	Scope scope;
	SPresCont content;

	init(SStr name, Str title, Scope scope, SPresCont content) {
		init(Value(named{Presentation}), name, ValParam[], named{ui:Render}) {
			title = title;
			scope = scope;
			content = content;
		}
	}

	// Create the function's body.
	FnBody createBody() {
		FnBody body(this, scope);

		// Create a presentation in a variable named 'this'.
		Var thisVar(body, Value(named{Presentation}), SStr("this"), Actuals(strConstant(SStr(title))));
		body.add(thisVar);

		content.transform(body);

		// Return the presentation.
		body.add(LocalVarAccess(SrcPos(), thisVar.var));

		// print(body.toS);
		body;
	}
}


// Apply the slide layout. Also: jam it inside a SlideBorder layout.
Expr slideLayout(Block inside, LayoutRoot layout, SStr? name, Expr? intro) {
	var create = if (intro) {
		pattern (inside) {
			presentation:SlideBorder layout(this);
			layout.add(layout:Component:toAdd(${layout.block}));

			presentation:Slide slide(layout);
			slide.intro = ${intro};
			this.add(slide);
			slide;
		};
	} else {
		var create = pattern (inside) {
			presentation:SlideBorder layout(this);
			layout.add(layout:Component:toAdd(${layout.block}));

			presentation:Slide slide(layout);
			this.add(slide);
			slide;
		};
	};

	if (name) {
		// If we have a name, we want to create a variable!
		Var(inside, name, create);
	} else {
		// Otherwise, we just execute the statements.
		create;
	}
}

// Get a slide intro expression.
Expr slideIntro(Block block, SrcName name, Actuals params) {
	namedExpr(block, name, params);
}
