use ui;
use core:geometry;
use graphics;

/**
 * A presentation.
 *
 * A presentation consists of a number of Slides, each of which contains a number of Elements to be
 * laid out in a certain way and displayed on the screen. Each slide may contain animations that
 * alter the state or layout of elements on the screen.
 *
 * In addition to the slides, the Presentation object contains global settings and resources for the
 * presentation in its entirety, such as background color, page numbering etc.
 */
class Presentation on Render {
	// Title of the presentation.
	Str title;

	// Size of the slides.
	Size size;

	// Border around slides.
	Size border;

	// Default text styles.
	TextStyle headingStyle;
	TextStyle contentStyle;

	// Default animation time.
	Duration animationTime;

	// All slides in the presentation.
	private Slide[] slides;

	// Current slide.
	private Nat currentSlide;

	// Last slide drawn. Used for good animations, even if we're jumping in the presentation.
	private Slide? lastSlide;

	// The background.
	private Element myBackground;

	// Create.
	init(Str title) {
		Size size(640, 480);
		Size border(20, 20);

		init() {
			title = title;
			size = size;
			border = border;
			myBackground = SolidFill(white);
			headingStyle = defaultHeadingStyle;
			contentStyle = defaultContentStyle;
			animationTime = 200 ms;
		}

		myBackground.pos = Rect(size);
	}

	// An element used to paint the background.
	Element background() { myBackground; }

	// Set the background element.
	assign background(Element e) {
		myBackground = e;
		myBackground.pos = Rect(size);
	}

	// Add a slide.
	void add(Slide s) {
		slides << s;
		s.added(this);
	}

	// Draw the presentation in its current state. Assumes 'g' has been set up to match the slide
	// size. 'animationPos' is a number in the interval [0, 1] that indicates the position of the
	// current animation. 1.0 means complete, and 0.0 means it has just started.
	void draw(Graphics g, Float animationPos) {
		if (currentSlide >= slides.count)
			return;

		Slide curr = slides[currentSlide];
		if (intro = curr.intro) {
			if (curr.animationId == 0 & animationPos < 1.0) {
				intro.draw(this, g, lastSlide, curr, animationPos);
				return;
			}
		}

		drawSlide(g, slides[currentSlide], animationPos);
		lastSlide = curr;
	}

	// Draw a slide, complete with background and any overlays.
	package void drawSlide(Graphics g, Slide slide, Float pos) {
		background.draw(g);
		slide.draw(g, pos);
	}

	// Get the animation state representing the beginning of the presentation.
	AnimationState begin() {
		AnimationState(0, 0);
	}

	// Get the state representing the end of the presentation.
	AnimationState end() {
		AnimationState(slides.count, 0);
	}

	// Get the state for the n:th slide.
	AnimationState at(Nat id) {
		AnimationState(min(id, slides.count), 0);
	}

	// Get the next state.
	AnimationState next(AnimationState s) {
		// TODO: Play the next animation of the current slide, if any.
		at(s.slide + 1, 0);
	}

	// Get the previous state.
	AnimationState prev(AnimationState s) {
		if (s.slide == 0)
			begin();
		else
			AnimationState(s.slide - 1, 0);
	}


	// Go to a specific slide. Returns the duration of the intro animation.
	Duration goTo(Nat id) {
		currentSlide = min(id, slides.count);
		// TODO: Reset animations on the new slide.

		if (currentSlide < slides.count) {
			if (intro = slides[currentSlide].intro) {
				return intro.duration;
			}
		}

		0 ms;
	}

	// Go to the next step in the presentation. Returns the length of the animation to play.
	Duration next() {
		// TODO: Play the next animation of the current slide, if any.

		goTo(currentSlide + 1);
	}

	// Go to the previous step in the presentation.
	Duration prev() {
		if (currentSlide > 0)
			goTo(currentSlide - 1);
		else
			0 ms;
	}
}


/**
 * A description of text-styles. Used to specify defaults in a presentation so that one doesn't need
 * to specify the same style all over the place.
 */
class TextStyle on Render {
	// Font.
	Font font;

	// Brush used to fill the text.
	Brush fill;

	// Spacing.
	Float space;

	// Create.
	init(Font font, Brush fill, Float space) {
		init() {
			font = font;
			fill = fill;
			space = space;
		}
	}

	// Create.
	init(Font font, Color fill, Float space) {
		init() {
			font = font;
			fill = SolidBrush(fill);
			space = space;
		}
	}
}

// Default text styles.
TextStyle defaultHeadingStyle() on Render { TextStyle(Font("Arial", 32), black, 30); }
TextStyle defaultContentStyle() on Render { TextStyle(Font("Arial", 22), black, 10); }


/**
 * A description of the animation state for a presentation.
 *
 * The entire state is stored in this class, so that a single application may have multiple
 * "cursors" to inside the same presentation. It is then possible to render the presentation at
 * the different stages at will.
 *
 * Do not modify this object directly, use the corresponding functions inside the Presentation class
 * instead.
 */
class AnimationState {
	// Current slide.
	package Nat slide;

	// Current animation inside the slide.
	package Nat animation;

	// Create a state representing the first slide in a presentation.
	init() {
		init() {
			slide = 0;
			animation = 0;
		}
	}

	// Convenience constructor for use internally.
	package init(Nat slide, Nat animation) {
		init() {
			slide = slide;
			animation = animation;
		}
	}

	// To string.
	void toS(StrBuf to) {
		to << "{ slide " << slide << ", " << animation << " }";
	}
}
