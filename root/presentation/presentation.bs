use ui;
use core:geometry;
use graphics;

/**
 * A presentation.
 *
 * A presentation consists of a number of Slides, each of which contains a number of Elements to be
 * laid out in a certain way and displayed on the screen. Each slide may contain animations that
 * alter the state or layout of elements on the screen.
 *
 * In addition to the slides, the Presentation object contains global settings and resources for the
 * presentation in its entirety, such as background color, page numbering etc.
 */
class Presentation on Render {
	// Title of the presentation.
	Str title;

	// Size of the slides.
	Size size;

	// Border around slides.
	Size border;

	// Default text styles.
	TextStyle headingStyle;
	TextStyle contentStyle;

	// Default animation time.
	Duration animationTime;

	// All slides in the presentation.
	private Slide[] slides;

	// Last slide drawn. Used for good animations, even if we're jumping in the presentation.
	private Nat? lastSlide;

	// The background.
	private Element myBackground;

	// Create.
	init(Str title) {
		Size size(640, 480);
		Size border(20, 20);

		init() {
			title = title;
			size = size;
			border = border;
			myBackground = SolidFill(white);
			headingStyle = defaultHeadingStyle;
			contentStyle = defaultContentStyle;
			animationTime = 200 ms;
		}

		myBackground.pos = Rect(size);
	}


	/**
	 * A cursor to a position inside a presentation, excluding the timecode of any current
	 * animation.
	 *
	 * The entire state is stored in this class, so that a single application may have multiple
	 * cursors into the same presentation. It is then possible to render the presentation at the
	 * different stages at will.
	 *
	 * Do not modify this object directly, use the corresponding functions inside the Presentation
	 * class instead.
	 */
	public class Cursor {
		// Current slide.
		package Nat slide;

		// Current animation inside the slide.
		package Nat step;

		// Create a state representing the first slide in a presentation.
		init() {
			init() {
				slide = 0;
				step = 0;
			}
		}

		// Convenience constructor for use internally.
		package init(Nat slide, Nat step) {
			init() {
				slide = slide;
				step = step;
			}
		}

		// To string.
		void toS(StrBuf to) {
			to << "{ slide " << slide << ", step " << animation << " }";
		}
	}


	// An element used to paint the background.
	Element background() { myBackground; }

	// Set the background element.
	assign background(Element e) {
		myBackground = e;
		myBackground.pos = Rect(size);
	}

	// Add a slide.
	void add(Slide s) {
		slides << s;
		s.added(this);
	}

	// Draw the presentation in its current state. Assumes 'g' has been set up to match the slide
	// size. 'time' is a number in the interval [0, 1] that indicates the position of the current
	// animation. 1.0 means complete, and 0.0 means it has just started.
	void draw(Graphics g, Cursor pos, Float time) {
		Nat slide = pos.slide;
		if (slide >= slides.count) {
			lastSlide = null;
			return;
		}

		Slide curr = slides[slide];
		if (pos.step == 0 & time < 1.0) {
			if (intro = curr.intro) {
				Duration d = max(curr.duration(0), intro.duration);
				intro.draw(this, g, lastSlide, slide, pos, d * time);
				return;
			}
		}

		drawSlide(g, slide, pos, curr.duration(pos.step) * time);
		lastSlide = slide;
	}

	// Draw a slide, complete with background and any overlays.
	package void drawSlide(Graphics g, Nat slide, Cursor cursor, Duration time) {
		drawSlide(g, slide, cursor.step, time);
	}

	// Draw a slide that is not the current one.
	package void drawSlide(Graphics g, Nat slide) {
		Slide s = slides[slide];
		Nat step = s.stepCount;
		drawSlide(g, slide, step, s.duration(step));
	}

	// The function that does the actual drawing.
	private void drawSlide(Graphics g, Nat slide, Nat step, Duration time) {
		background.draw(g);
		slides[slide].draw(g, step, time);
	}

	// Get the animation state representing the beginning of the presentation.
	Cursor begin() {
		Cursor(0, 0);
	}

	// Get the state representing the end of the presentation.
	Cursor end() {
		Cursor(slides.count, 0);
	}

	// Get the state for the n:th slide.
	Cursor at(Nat id) {
		Cursor(min(id, slides.count), 0);
	}

	// Get the next state.
	Cursor next(Cursor s) {
		if (s.slide >= slides.count)
			return s;

		Slide slide = slides[s.slide];
		if (s.step + 1 >= slide.stepCount)
			Cursor(s.slide + 1, 0);
		else
			Cursor(s.slide, s.step + 1);
	}

	// Get the previous state.
	Cursor prev(Cursor s) {
		// TODO: Do we want to go back one step, or the entire slide?
		if (s.step > 0) {
			Cursor(s.slide, 0);
		} else if (s.slide > 0) {
			Cursor(s.slide - 1, 0);
		} else {
			Cursor(0, 0);
		}
	}

	// Get the duration of a specific animation. Returns 0 ms if no animation is used for the
	// specified state.
	Duration duration(Cursor s) {
		if (s.slide >= slides.count)
			return Duration();

		Slide slide = slides[s.slide];
		Duration r = slide.duration(s.step);

		// Intro?
		if (s.step == 0)
			if (intro = slide.intro)
				r = max(r, intro.duration);

		r;
	}
}


/**
 * A description of text-styles. Used to specify defaults in a presentation so that one doesn't need
 * to specify the same style all over the place.
 */
class TextStyle on Render {
	// Font.
	Font font;

	// Brush used to fill the text.
	Brush fill;

	// Spacing.
	Float space;

	// Create.
	init(Font font, Brush fill, Float space) {
		init() {
			font = font;
			fill = fill;
			space = space;
		}
	}

	// Create.
	init(Font font, Color fill, Float space) {
		init() {
			font = font;
			fill = SolidBrush(fill);
			space = space;
		}
	}
}

// Default text styles.
TextStyle defaultHeadingStyle() on Render { TextStyle(Font("Arial", 32), black, 30); }
TextStyle defaultContentStyle() on Render { TextStyle(Font("Arial", 22), black, 10); }
