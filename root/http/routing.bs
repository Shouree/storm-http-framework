use core:io;
use core:net;
use core:lang;
use http;


class HttpRoutingTable{
  Map<Url, fn(HTTP_Request)->HTTP_Response> rTable;
  fn(HTTP_Request)->HTTP_Response? defautCallback; //Maybe type default callback 

  void addDefaultCallback(fn(HTTP_Request)->HTTP_Response func){
    defautCallback = func;
  }

  void addCallbackUrl(Url url, fn(HTTP_Request)->HTTP_Response func){
    rTable.put(url, func);
  }

  HTTP_Response getRouteResponse(HTTP_Request request){
    HTTP_Response response;
    Url? routeCallback = null;

	for(route, value in rTable)
	{
		Nat i = 0;
		while(true){
            if (i == route.count()-1) {
                if (route[i] == "*") {
                    print("got here");
                    routeCallback = route;
                    break;
                } else if (route.count() == request.path.count()) {
                    if (route[i] == request.path[i]) {
                        routeCallback = route;
                    }
                    break;
                }
            }
			if(route[i] == "*") {
                ++i;
                continue;
            }
			if(request.path.count() <= i){
				break;
			}
			if(request.path[i] != route[i]){
				break;
			}
			++i;
		}
		if(rc = routeCallback) {
			return rTable.get(rc).call(request);
		}
	}
	
	if(defautCallback) return defautCallback.call(request);
	
	throw DivisionByZero;
  }
	/*
    if(rTable.has(request.path)){
      response = rTable.get(request.path).call(request);
    }else{
      //TODO Check if longest matching subUrl has wildcard

      if(defautCallback){
        response = defautCallback.call(request);
      }else{
        print("ERROR! No default callback!");
        //TODO Hur hantera?
      }
    }
    return response;
  }
*/

}
