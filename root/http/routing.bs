use core:io;
use core:net;
use core:lang;
use http;

class route_callback_pair {
public:
    init(Url route, fn(HTTP_Request)->HTTP_Response callback)
    {
        init {route = route; callback = callback;}
    }
    Url route;
    fn(HTTP_Request)->HTTP_Response callback;
}

class HttpRoutingTable{
  //Map<Url, fn(HTTP_Request)->HTTP_Response> rTable;
  Array<route_callback_pair> rTable;
  fn(HTTP_Request)->HTTP_Response? defautCallback; //Maybe type default callback 

  void addDefaultCallback(fn(HTTP_Request)->HTTP_Response func){
    defautCallback = func;
  }

  void addCallbackUrl(Url url, fn(HTTP_Request)->HTTP_Response func){
    rTable.push(route_callback_pair(url, func));
  }

  // TODO: Nested hashtables for lookup
  HTTP_Response getRouteResponse(HTTP_Request request) {
    // TODO: on POST, parse body? as urlencoded
    // TODO: Add headers
    HTTP_Response response;
    Url? routeCallback = null;

    for(value in rTable) {
      Url route = value.route;
      fn(HTTP_Request)->HTTP_Response callback = value.callback;

      Bool valid = true;
      if(route.count() != request.path.count()) continue;
      for(Nat i = 0; i < route.count(); ++i) { 
        if(route[i] == "*") {
          continue;
        }
        if(request.path[i] != route[i]) {
          valid = false;
          break;
        }
      }
      if(valid) {
        return callback.call(request);//rTable.get(route).call(request);
      }
    }
    if(defautCallback) return defautCallback.call(request);
        
    throw DivisionByZero;
  }
}
