use core:asm;
use core:io;
use core:lang;
use lang:bs:macro;
use parser;

class Cookie {    //RFC 9110
  Str name;
  Str value;
  Str path = "";    //change to URL?
  Str domain ="";
  Str expires ="";    //Maybe add a time class? There is one in Storm already but too basic
  Nat maxAge = 0;
  Bool secure = false;
  Bool httpOnly = false;
  Str samSite ="";
  Bool cookieValid = true;


  void toS(StrBuf to) : override
  {
    to << name << "=" << value;
    if(path != "")
    {
      to << "; Path=" << path;
    }
    if(domain != "")
    {
      to << "; Domain=" << domain;
    }
    if(expires != "")
    {
      to << "; Expires=" << expires;
    }
    if(maxAge != 0)
    {
      to << "; Max-Age: " << maxAge;
    }
    if(secure)
    {
      to << "; Secure";
    }
    if(httpOnly)
    {
      to << "; HttpOnly";
    }
    if(samSite != "")
    {
      to << "; SamSite=" << samSite;
    }
  }


}

//Parse for correct structure

Bool responseCookieParser(Cookie cookie) on Compiler
{
  initMonth();      //Call in server
  initDays();       //Call in server
  Str:Iter iter;
  if(cookie.name != "") //Use .empty() istead
    {

      //parse here
      cookie.name = cookie.name;
    }
  else{
    //Print what wrong
    return false;
  }
  if(cookie.value != "")
    {
      //Better CTL support for parsing will be added later with Martins implementation
      //parse here if string in ascii US
      iter = cookie.value.find(' ', cookie.value.begin());
      //print(iter.toS() + "\n");
      if(iter != cookie.value.end())
        return false;
      iter = cookie.value.find(',' , cookie.value.begin());
      if(iter != cookie.value.end())
        return false;
      iter = cookie.value.find(';' , cookie.value.begin());
        if(iter != cookie.value.end())
          return false;
      //cookie.value = trimWhitespace(cookie.value);
    }
  else{
      return false;
    }
  if(cookie.path != "")
    {
      //CTL character support add later
      iter = cookie.path.find(';', cookie.path.begin());
      if(iter != cookie.path.end())
        return false;
      //parse here
      //cookie.path = trimWhitespace(cookie.path);
    }
  if(cookie.domain != "")
    {
      //Should be subdomain ?
      // parse here
      // cookie.domain = trimWhitespace(cookie.domain);
    }
  if(cookie.expires != "")
    {
      //IMF formating check :)

        StrBuf buf;
        iter = cookie.expires.find(' ', cookie.expires.begin());
        buf << cookie.expires.cut(cookie.expires.begin(), iter);
        Str:Iter iter2;
        for(Int i = 0; i < 4; i++)
        {
          if(iter == cookie.expires.end())
            return false;
          iter2 = iter + 1;
          iter = cookie.expires.find(' ', iter2);
          buf << cookie.expires.cut(iter2, iter);
        }
        Str cookiestr = buf.toS();
        print("\n\n"+cookiestr+"\n\n");
        if(cookiestr.count() != 24)
        {
          return false;
        }
        if("," != cookiestr.cut(cookiestr.begin()+3, cookiestr.begin()+4))
          return false;
      iter = cookiestr.begin()+3;
      if(!dayFormatIMF.has(cookiestr.cut(cookiestr.begin(), iter)))
      {
        return false;
      }
      //iter +2 till iter+12

      Str month = cookiestr.cut(iter+3, iter+6);
      if(!monthFormatIMF.has(month))
      {
        return false;
      }
      Str day = cookiestr.cut(iter+1, iter+3);
      Int? validInt;
      try{          //TODO, byt ut till isInt
        validInt = day.toInt();
        
      }
      catch(Exception e)
      {
        validInt = null;
      }
      if(validInt.empty())
      {
        return false;
      }
      
      if(day.toInt() < 1 | day.toInt() > monthFormatIMF.get(month))  //Check if day is correct in month
        {
          return false;
        }

      try{
        validInt = cookiestr.cut(iter+6, iter+10).toInt();
      }catch(Exception e){
        validInt = null;
      }
      if(validInt.empty())
      {
        return false;
      }
      if(cookiestr.cut(iter+6, iter+10).toInt() < 1970)
        {
          return false;
        }

      try{
        validInt = cookiestr.cut(iter+10, iter+12).toInt();
      }catch(Exception e){
        validInt = null;
      }
      if(validInt.empty())
      {
        return false;
      }
      if(cookiestr.cut(iter+10, iter+12).toInt() < 0 | cookiestr.cut(iter+10, iter+12).toInt() > 23)
        return false;
      
      if(cookiestr.cut(iter+12, iter+13) != ":" | cookiestr.cut(iter+15, iter+16) != ":" )
        return false;
      
      try{
        validInt = cookiestr.cut(iter+13, iter+15).toInt();
      }catch(Exception e){
        validInt = null;
      }
      if(validInt.empty())
      {
        return false;
      }
      if(cookiestr.cut(iter+13, iter+15).toInt() < 0 | cookiestr.cut(iter+13, iter+15).toInt() > 59)
        return false;

      try{
        validInt = cookiestr.cut(iter+16, iter+18).toInt();
      }catch(Exception e){
        validInt = null;
      }
      if(validInt.empty())
      {
        return false;
      }
      if(cookiestr.cut(iter+16, iter+18).toInt() < 0 | cookiestr.cut(iter+16, iter+18).toInt() > 60)
        return false;

      if(cookiestr.cut(iter+18, cookiestr.end()) != "GMT")
        return false;
      
    

      //parse here
    }
  if(cookie.samSite != "")
    {
      if(cookie.samSite != "None")
        if(cookie.samSite != "Lax")
          if(cookie.samSite != "Strict")
            return false;
      // parse here
      // cookie.samSite = trimWhitespace(cookie.samSite);
    }

    return true;
}

Bool setCookie(Cookie cookie, HTTP_Response response)
{
  cookie.cookieValid = responseCookieParser(cookie);
  if(cookie.cookieValid)
  {
  response.cookies.push(cookie);
  }
  return cookie.cookieValid;
}

class HttpParseError extends Exception {
    private Nat pos;
    private Str msg;

    init (Nat position, Str message) {
        init {
            pos = position;
            msg = message;
        }
    }

    protected void message(StrBuf to) : override {
        to << "Error parsing HTTP request at position: " << pos << "\n" << msg;
    }
}

httpParser : parser(recursive descent, binary) {
  start = SHTTPReq;

  optional delimiter = SOptDelimiter;
  required delimiter = SReqDelimiter;

  void SOptDelimiter();
  SOptDelimiter : " *";

  void SReqDelimiter();
  SReqDelimiter : " +";

  HTTP_Request SHTTPReq();
  SHTTPReq => HTTP_Request() : SReqLine(me) - SNewline - SHeaders(me) - SOptBody(me);

  void SNewline();
  SNewline : "\r\n";

  void SReqLine(HTTP_Request req);
  SReqLine : SMethod(req) ~ SReqTarget(req) - SVersion(req);

  void SMethod(HTTP_Request req);
  SMethod => addMethod(req, b): "GET" b;
  SMethod => addMethod(req, b): "POST" b;
  SMethod => addMethod(req, b): "PUT" b;
  SMethod => addMethod(req, b): "DELETE" b;
  SMethod => addMethod(req, b): "HEAD" b;
  SMethod => addMethod(req, b): "OPTIONS" b;

  void SReqTarget(HTTP_Request req);
  SReqTarget => addReqPath(req, segments) : SSegments(req) segments;

  Array<Buffer> SSegments(HTTP_Request req);
  SSegments => Array<Buffer>() : "/\?" - SQuery(req) - " ";
  SSegments => Array<Buffer>() : "\?" - SQuery(req) - " ";
  SSegments => Array<Buffer>() : "/ ";
  SSegments => Array<Buffer>() : " ";
  SSegments => Array<Buffer>() : "/" - "[a-zA-Z0-9\-.();,]*" -> push - SSegments(req) -> append;

  void SQuery(HTTP_Request req);
  SQuery : SQueryEntry(req) - ("&" - SQuery(req))?;

  void SQueryEntry(HTTP_Request req);
  SQueryEntry => addQueryEntry(req, k, v) : "[^=]+" k, "=", "[^ &]+" v;

  void SVersion(HTTP_Request req);
  SVersion => addVersion(req, bin) : "HTTP/[0-9]+\.[0-9]+" bin;

  void SHeaders(HTTP_Request req);
  SHeaders : SNewline;
  SHeaders[1] : "Cookie", ":" ~ SCookies(req);
  SHeaders[0] => addHeader(req, k, v) : "[^:\r\n]+" k - ":" ~ "[^\r\n]+" v - SNewline - SHeaders(req);

  void SCookies(HTTP_Request req);
  SCookies : SNewline;
  // NOTE: This rule allows "key=val;\r\n\r\n"
  SCookies => addCookie(req, k, v) : "[^=]+" k - "=" - "[^;\r\n]+" v - "[; ]*" - SCookies(req);

  void SOptBody(HTTP_Request req);
  SOptBody => addData(req, bin) : ".*" bin;
}

void addMethod(HTTP_Request req, Buffer binary) {
  Str methodstr = readText(MemIStream(binary)).readAllRaw();
  if (methodstr == "GET") {
    req.method = HTTP_Method:GET;
  }
  else if (methodstr == "POST") {
    req.method = HTTP_Method:POST;
  }
  else if (methodstr == "PUT") {
    req.method = HTTP_Method:PUT;
  }
  else if (methodstr == "DELETE") {
    req.method = HTTP_Method:DELETE;
  }
  else if (methodstr == "OPTIONS") {
    req.method = HTTP_Method:OPTIONS;
  }
  else if (methodstr == "HEAD") {
    req.method = HTTP_Method:HEAD;
  }
  else if (methodstr == "TRACE") {
    req.method = HTTP_Method:TRACE;
  }
  else if (methodstr == "CONNECT") {
    req.method = HTTP_Method:CONNECT;
  }
  else {
    req.method = HTTP_Method:BAD_METHOD;
  }
}

void addHeader(HTTP_Request req, Buffer keybin, Buffer valbin) {
  Str key = readText(MemIStream(keybin)).readAllRaw();
  Str val = readText(MemIStream(valbin)).readAllRaw();
  put(req.headers, key, val);
}

void addReqPath(HTTP_Request req, Buffer[] segmentbins) {
  Str[] segments;
  for (sb in segmentbins) {
    Str segment = readText(MemIStream(sb)).readAllRaw();
    segments.push(segment);
  }
  req.path = Url(segments);
}

void addQueryEntry(HTTP_Request req, Buffer keybin, Buffer valbin) {
  Str key = readText(MemIStream(keybin)).readAllRaw();
  Str val = readText(MemIStream(valbin)).readAllRaw();
  Str decodedval = fromASCIIEncodedStr(val);
  put(req.method_params, key, decodedval);
}


void addData(HTTP_Request req, Buffer bin) {
    req.data = bin;
}

void addVersion(HTTP_Request req, Buffer versionbin) {
  Str versionstr = readText(MemIStream(versionbin)).readAllRaw();
  if (versionstr == "HTTP/0.9") {
    req.version = HTTP_Version:HTTP_0_9;
  } else if (versionstr == "HTTP/1.0") {
    req.version = HTTP_Version:HTTP_1_0;
  } else if (versionstr == "HTTP/1.1") {
    req.version = HTTP_Version:HTTP_1_1;
  }
}

void addCookie(HTTP_Request req, Buffer keybin, Buffer valbin) {
  Str key = readText(MemIStream(keybin)).readAllRaw();
  Str val = readText(MemIStream(valbin)).readAllRaw();
  put(req.cookies, key, val);
}

Str->Str HttpAsciiLookupTable on Compiler;
Str toASCIIEncodedStr(Str string) on Compiler{
  if(HttpAsciiLookupTable.empty()){
    //fill Http
    HttpAsciiLookupTable.put(" ", "%20");
    HttpAsciiLookupTable.put("!", "%21");
    HttpAsciiLookupTable.put("\"", "%22");
    HttpAsciiLookupTable.put("#", "%23");
    HttpAsciiLookupTable.put("\$", "%24");
    HttpAsciiLookupTable.put("%", "%25");
    HttpAsciiLookupTable.put("&", "%26");
    HttpAsciiLookupTable.put("'", "%27");
    HttpAsciiLookupTable.put("(", "%28");
    HttpAsciiLookupTable.put(")", "%29");
    HttpAsciiLookupTable.put("*", "%2A");
    HttpAsciiLookupTable.put("+", "%2B");
    HttpAsciiLookupTable.put(",", "%2C");
    HttpAsciiLookupTable.put("-", "%2D");
    HttpAsciiLookupTable.put(".", "%2E");
    HttpAsciiLookupTable.put("/", "%2F");

    HttpAsciiLookupTable.put(":", "%3A");
    HttpAsciiLookupTable.put(";", "%3B");
    HttpAsciiLookupTable.put("<", "%3C");
    HttpAsciiLookupTable.put("=", "%3D");
    HttpAsciiLookupTable.put(">", "%3E");
    HttpAsciiLookupTable.put("?", "%3F");
    HttpAsciiLookupTable.put("@", "%40");

    HttpAsciiLookupTable.put("[", "%5B");
    HttpAsciiLookupTable.put("\\", "%5C");
    HttpAsciiLookupTable.put("]", "%5D");
    HttpAsciiLookupTable.put("^", "%5E");
    HttpAsciiLookupTable.put("_", "%5F");
    HttpAsciiLookupTable.put("`", "%60");

    HttpAsciiLookupTable.put("{", "%7B");
    HttpAsciiLookupTable.put("|", "%7C");
    HttpAsciiLookupTable.put("}", "%7D");
    HttpAsciiLookupTable.put("~", "%7E");

  }
  //Do stuff
  StrBuf retbuf;
  for(c in string){
    if(HttpAsciiLookupTable.has(c.toS())){
      retbuf << HttpAsciiLookupTable.get(c.toS());
    }else{
      retbuf << c.toS();
    }
  }
  return retbuf.toS();
}

Str->Str reverseHttpAsciiLookupTable on Compiler;
Str fromASCIIEncodedStr(Str string) on Compiler{
  if(reverseHttpAsciiLookupTable.empty()){
    //fill reverse Http
    reverseHttpAsciiLookupTable.put("%20", " ");
    reverseHttpAsciiLookupTable.put("%21", "!");
    reverseHttpAsciiLookupTable.put("%22","\"");
    reverseHttpAsciiLookupTable.put("%23", "#");
    reverseHttpAsciiLookupTable.put("%24","\$");
    reverseHttpAsciiLookupTable.put("%25", "%");
    reverseHttpAsciiLookupTable.put("%26", "&");
    reverseHttpAsciiLookupTable.put("%27", "'");
    reverseHttpAsciiLookupTable.put("%28", "(");
    reverseHttpAsciiLookupTable.put("%29", ")");
    reverseHttpAsciiLookupTable.put("%2A", "*");
    reverseHttpAsciiLookupTable.put("%2B", "+");
    reverseHttpAsciiLookupTable.put("%2C", ",");
    reverseHttpAsciiLookupTable.put("%2D", "-");
    reverseHttpAsciiLookupTable.put("%2E", ".");
    reverseHttpAsciiLookupTable.put("%2F", "/");
    reverseHttpAsciiLookupTable.put("%3A", ":");
    reverseHttpAsciiLookupTable.put("%3B", ";");
    reverseHttpAsciiLookupTable.put("%3C", "<");
    reverseHttpAsciiLookupTable.put("%3D", "=");
    reverseHttpAsciiLookupTable.put("%3E", ">");
    reverseHttpAsciiLookupTable.put("%3F", "?");
    reverseHttpAsciiLookupTable.put("%40", "@");
    reverseHttpAsciiLookupTable.put("%5B", "[");
    reverseHttpAsciiLookupTable.put("%5C","\\");
    reverseHttpAsciiLookupTable.put("%5D", "]");
    reverseHttpAsciiLookupTable.put("%5E", "^");
    reverseHttpAsciiLookupTable.put("%5F", "_");
    reverseHttpAsciiLookupTable.put("%60", "`");
    reverseHttpAsciiLookupTable.put("%7B", "{");
    reverseHttpAsciiLookupTable.put("%7C", "|");
    reverseHttpAsciiLookupTable.put("%7D", "}");
    reverseHttpAsciiLookupTable.put("%7E", "~");
  }
  //Do stuff
  StrBuf retbuf;
  Str:Iter it = string.begin();
  while(it != string.end()){
    if(it.v() == '%'){
      Str cmp = string.cut(it, it+3);
      if(reverseHttpAsciiLookupTable.has(cmp)){
        retbuf << reverseHttpAsciiLookupTable.get(cmp);
        it = it + 3;
      }else{
        retbuf << it.v();
        it++;
      }
    }else{
      retbuf << it.v();
      it++;
    }
  }
  return retbuf.toS();
}


class HTTP_Parser {
  /* FUNCTIONS FOR RECIEVING REQUESTS AND EXTRACTING DATA FROM REQUESTS*/

  HTTP_Request parseRequest(Buffer buffer) {
    var ret = httpParser(buffer);
    if (err = ret.error) {
      throw HttpParseError(err.pos, err.message);
    }
    if (val = ret.value) {
      return val;
    }
    return HTTP_Request();
  }

  /* FUNCTIONS FOR CREATING RESPONSES AND RESPONDING*/
  Buffer parse_response(HTTP_Response response){
  //Buffer responseBuf;
  StrBuf responseBuf;

  //maybe create a bool in the request that checks at once if the url called for is valid?
  if(response.version == HTTP_Version:HTTP_0_9)         //Should be removed or made so it is correctly integrated for HTTP/0.9
  {

      responseBuf << response.data.toS();                         //Only send back body
      return toUtf8(responseBuf.toS());
  }
  else if(response.version == HTTP_Version:HTTP_1_0)
  {
      responseBuf << "HTTP/1.0 ";
  }
  else if(response.version == HTTP_Version:HTTP_1_1)
  {
      responseBuf << "HTTP/1.1 ";
  }
  else
  {
    print("Non valid header version provided"); //Change to throw error
    return toUtf8(responseBuf.toS());
  }

  responseBuf << response.status_code.v.toS() + " ";
  responseBuf << response.status_code.toS() + "\r\n";

  for(k,v in response.headers){
    responseBuf << k << ": " << v << "\r\n";
  }

  for(l in response.cookies){
    if(l.cookieValid)     //Make sure field and value not empty 
    { 
      responseBuf << "Set-Cookie: " << l.toS() << "\r\n";
    }
  }
  
  //Should content-length always be included?
  responseBuf << "content-length: " << response.data.filled() << "\r\n"; 
  responseBuf << "\r\n";
  //Add data here to the stream:
  responseBuf << fromUtf8(response.data);                  //Input data
  return toUtf8(responseBuf.toS());
  }
}
