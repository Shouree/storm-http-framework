use core:lang;
use core:io;
use lang:bs:macro;

class HTTP_Parser {
  /* FUNCTIONS FOR RECIEVING REQUESTS AND EXTRACTING DATA FROM REQUESTS*/
  HTTP_Request parse_request(Str expr) {
    Parser<SHTTPReq> parser;
    parser.parse(expr, Url());
    SHTTPReq tree = parser.tree();
    HTTP_Request req = tree.transform(this);
    return req;
  }

  void addVersion(HTTP_Request req, Str versionstr) {
    if (versionstr == "HTTP/0.9") {
      req.version = HTTP_Version:HTTP_0_9;
    } else if (versionstr == "HTTP/1.0") {
      req.version = HTTP_Version:HTTP_1_0;
    } else if (versionstr == "HTTP/1.1") {
      req.version = HTTP_Version:HTTP_1_1;
    }
  }

  void addReqPath(HTTP_Request req, Str[] segments) {
    req.path = Url(io:FileProtocol, segments);
  }

  void addMethod(HTTP_Request req, Str methodstr) {
    if (methodstr == "GET") {
      req.method = HTTP_Method:GET;
    }
    else if (methodstr == "POST") {
      req.method = HTTP_Method:POST;
    }
    else if (methodstr == "PUT") {
      req.method = HTTP_Method:PUT;
    }
    else if (methodstr == "DELETE") {
      req.method = HTTP_Method:DELETE;
    }
    else if (methodstr == "OPTIONS") {
      req.method = HTTP_Method:OPTIONS;
    }
    else if (methodstr == "HEAD") {
      req.method = HTTP_Method:HEAD;
    }
    else if (methodstr == "TRACE") {
      req.method = HTTP_Method:TRACE;
    }
    else if (methodstr == "CONNECT") {
      req.method = HTTP_Method:CONNECT;
    }
    else {
      req.method = HTTP_Method:BAD_METHOD;
    }
  }

  void addData(HTTP_Request req, Str str) {
      req.data = str.toUtf8;
  }

  /* FUNCTIONS FOR CREATING RESPONSES AND RESPONDING*/
  Buffer parse_response(HTTP_Response response){
    Buffer responseBuf;
    StrBuf responseStr;
    if(response.version == HTTP_Version:HTTP_0_9)
    {
        responseStr << "HTTP/0.9 ";
    }
    else if(response.version == HTTP_Version:HTTP_1_0)
    {
        responseStr << "HTTP/1.0 ";
    }
    else
    {
        responseStr << "HTTP/1.1 ";
    }

    responseStr << response.status_code.v.toS() + " ";
    //add fuction so "_" becomes "-"
    responseStr << response.status_code.toS() + "\r\n";

    for(k,v in response.headers){
      responseStr << k << ": " << v << "\r\n";
    }

    return responseStr;
  }
}
