optional delimiter = SOptDelimiter;
required delimiter = SReqDelimiter;

void SOptDelimiter();
SOptDelimiter : "";

void SReqDelimiter();
SReqDelimiter : " ";

HTTP_Request SHTTPReq(HTTP_Parser p);
SHTTPReq => HTTP_Request() : SReqLine(p, me), SCRLF, (SHeaders(p, me))?, SCRLF, SOptBody(p, me);

void SReqLine(HTTP_Parser p, HTTP_Request req);
SReqLine : SMethod(p, req) ~ SReqTarget(p, req) ~ SHTTPVersion(p, req);

void SMethod(HTTP_Parser p, HTTP_Request req);
SMethod => addMethod(p, req, str) : "GET" str;
SMethod => addMethod(p, req, str) : "POST" str;
SMethod => addMethod(p, req, str) : "PUT" str;
SMethod => addMethod(p, req, str) : "DELETE" str;
SMethod => addMethod(p, req, str) : "HEAD" str;
SMethod => addMethod(p, req, str) : "OPTIONS" str;

void SReqTarget(HTTP_Parser p, HTTP_Request req);
SReqTarget : SPath(p, req), ("\?", SQuery(req.method_params))?;

void SPath(HTTP_Parser p, HTTP_Request req);
SPath => addReqPath(p, req, segments) : SSegments segments;

Array<Str> SSegments();
SSegments => path : ("/", SSegment path)+;
SSegments => Array<Str>() : "/";

Str SSegment();
SSegment => segment : "[a-zA-Z0-9\-.();,]+" segment;

void SQuery(Map<Str, Str> params);
SQuery : SQueryEntry(params), ("&", SQueryEntry(params))*;

void SQueryEntry(Map<Str, Str> params);
SQueryEntry => put(params, k, v) : "[a-zA-Z0-9\-/.();,]+" k, "=", "[a-zA-Z0-9\-/.();,]+" v;
// TODO(Christoffer): Fix cookie parsing
// SQueryEntry : "cookie" k, "=", SCookies(cookies);
// void SCookies(HTTP_Cookies cookies);
// SCookies => addCookie(k, v) : ("[a-zA-Z0-9\-/.(),]+" k, "=", "[a-zA-Z0-9\-/.(),]+" v, ";")+;

void SHTTPVersion(HTTP_Parser p, HTTP_Request req);
SHTTPVersion => addVersion(p, req, version) : "HTTP/[0-9]\.[0-9]" version;

void SOptBody(HTTP_Parser p, HTTP_Request req);
SOptBody => addData(p, req, str) : ".*" str;

void SHeaders(HTTP_Parser p, HTTP_Request req);
SHeaders : SHeader(req), (SCRLF, SHeader(req))*, SCRLF;

void SHeader(HTTP_Request req);
SHeader => put(req.headers, k, v) : SFieldName k, ":" ~ SFieldValue v;

Str SFieldName();
SFieldName => name : "[a-zA-Z0-9\-_]+" name;

Str SFieldValue();
SFieldValue => value : "[a-zA-Z0-9\-/.() ;,:_+=*?\"]+" value;

void SCRLF();
SCRLF : "\r\n";
