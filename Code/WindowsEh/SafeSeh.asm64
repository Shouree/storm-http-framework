windowsUnwind proto
extern RtlUnwind:near

.code
windowsUnwind proc frame

	;; Save all callee-saved registers. RtlUnwind does not (at least on 32-bit).
	push rbp
	.pushreg rbp
	push rbx
	.pushreg rbx
	push rdi
	.pushreg rdi
	push rsi
	.pushreg rsi
	push r12
	.pushreg r12
	push r13
	.pushreg r13
	push r14
	.pushreg r14
	push r15
	.pushreg r15
	;; Allocate stack size for XMM registers, shadow space, and alignment.
	;; XMM: 10 * 16 bytes
	;; Shadow space: 32 bytes
	;; 8 alignment
	;; Total: C8h
	sub rsp, 0C8h
	.allocstack 0C8h
	.endprolog

	;; Store XMM registers...
	movaps [rsp+020h], xmm6
	movaps [rsp+030h], xmm7
	movaps [rsp+040h], xmm8
	movaps [rsp+050h], xmm9
	movaps [rsp+060h], xmm10
	movaps [rsp+070h], xmm11
	movaps [rsp+080h], xmm12
	movaps [rsp+090h], xmm13
	movaps [rsp+0A0h], xmm14
	movaps [rsp+0B0h], xmm15

	mov r9, rsp 		; Param 4, ReturnValue
	mov r8, rcx 		; Param 3, ExceptionRecord
	mov rcx, rdx 		; Param 1, TargetFrame
	mov rdx, windowsUnwindResume	; Param 2, TargetIp
	call RtlUnwind

windowsUnwindResume:

	;; Restore XMM registers...
	movaps xmm6, [rsp+020h]
	movaps xmm7, [rsp+030h]
	movaps xmm8, [rsp+040h]
	movaps xmm9, [rsp+050h]
	movaps xmm10, [rsp+060h]
	movaps xmm11, [rsp+070h]
	movaps xmm12, [rsp+080h]
	movaps xmm13, [rsp+090h]
	movaps xmm14, [rsp+0A0h]
	movaps xmm15, [rsp+0B0h]

	;; Epilog.
	add rsp, 0C8h
	pop r15
	pop r14
	pop r13
	pop r12
	pop rsi
	pop rdi
	pop rbx
	pop rbp
	ret

windowsUnwind endp

end
