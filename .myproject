#Storm has a bit weird concept of release and debug configurations.
#The default debug configuration, is acutally a release configuration,
#but with some debug flags added. This is since Storm is painfully slow
#without compiler optimizations on, and when using other debug features
#like the debug heap. There is a mode, called "slow" that will enable
#full debugging like this.

[project]
#Only build targets containing .mymake-files.
explicitTargets=yes

[project,release]
input+=Main
input+=Test
execute=no

[build,!slow,!release]
#Always 'release' mode, except when 'slow' is specified here.
all+=release
all+=storm_debug

[build,release]
#When compiling in release mode, use link-time code generation.
all+=release
all+=storm_release

[build,slow]
all+=storm_slow


[build]

#Regular libraries linked into Storm and/or any storm libraries.
Core+=lib
Code+=lib
Compiler+=lib
OS+=lib
Shared+=lib
Utils+=lib
SoundLib+=lib
SoundLib+=extern_lib

#Libraries that need the storm preprocessor to be run.
Compiler+=stormpp
Gui+=stormpp
Graphics+=stormpp
Sound+=stormpp

#Libraries linked into shared libraries loaded by Storm at runtime.
Gui+=sharedlib
Graphics+=sharedlib
Sound+=sharedlib


[deps]
Gui+=CppTypes
Compiler+=CppTypes
Sound+=CppTypes

[deps,windows]
#To make sure everything is built.
Compiler+=Gui
Compiler+=Graphics
Compiler+=Sound

[!extern_lib]
#Global build parameters
pch=stdafx.h
include+=./
include+=../

[storm_debug]
buildDir=build/
execDir=../debug/

#Turn on some runtime checks (implemented purely in Storm).
define+=FAST_DEBUG

[storm_debug,windows]
#Generate pdb file.
flags+=/Zi /Fd<path|buildDir>
linkFlags+=/DEBUG /INCREMENTAL:NO /PDB:<path|execDir><titleNoExt|output>.pdb

[storm_debug,unix]
#We do not need that aggressive optimizations...
flags=-std=c++11
flags+=-O1
#Generate debug information.
flags+=-g

[storm_release]
buildDir=release/
execDir=../release/

[storm_release,windows]
#Enable link-time code generation. Too slow to use regularly, but gives good performance!
flags+=/GL
linkFlags+=/LTCG

[storm_release,lib,windows]
#Need extra flag to the linker...
link=lib /LTCG <files> /nologo /OUT:<output>

[storm_slow]
buildDir=slow/
execDir=../slow/

[]
#Ignore includes from the generated BuiltIn.cpp files.
noIncludes+=*/BuiltIn.cpp

[windows]
#Tell the Win32 API we're working with UTF16.
define+=_UNICODE
define+=UNICODE

#Compile asm files on X86
ext+=asm
noIncludes+=*.asm
compile+=*.asm:ml /c /nologo /Fo<output> /safeseh /W3 /Zi <file>

[unix]
flags+=-Wno-unknown-pragmas
flags+=-Wno-reorder
flags+=-Wno-terminate
flags+=-Wno-unused-parameter
flags+=-Wno-missing-field-initializers
flags+=-Wno-pmf-conversions
flags+=-Wno-switch
flags+=-Wno-parentheses
flags+=-Wno-unused-function

library+=pthread
library+=dl

ext+=s
ext+=S
noIncludes+=*.s
noIncludes+=*.S
compile+=*.c:gcc -std=c99 -O3 <defines> <warnings> <file> -c <includes> -o <output>
compile+=*.s:gcc -g <file> -c -o <output>
compile+=*.S:gcc -g <file> <includes> -c -o <output>

[stormpp]
stormpp=CppTypes
stormppUses=--use 
stormProvides=./
stormUses=../Core/
stormppUsing=--using
preBuild+=<execpath|stormpp> <stormProvides> <stormppUses*stormUses> --template ../Core/Gen/CppTypes.cpp --out Gen/CppTypes.cpp --asm <stormppAsmTemplate> <stormppAsmOut> <stormppUsing*stormUsingNamespace> <stormppFlags>
preBuildCreates+=Gen/CppTypes.cpp

[stormpp,windows]
stormppAsmTemplate=../Core/Gen/CppVTables.VS_X86
stormppAsmOut=Gen/CppVTables.asm
preBuildCreates+=Gen/CppVTables.asm

[stormpp,unix]
stormppAsmTemplate=../Core/Gen/CppVTables.GCC_X64
stormppAsmOut=Gen/CppVTables.s
preBuildCreates+=Gen/CppVTables.s

[sharedlib]
packagePath=../root/<package>/
postBuild+=if not exist "<path|packagePath>" mkdir <path|packagePath>
postBuild+=copy <output> <path|packagePath><libPrefix><title|output>

[sharedlib,storm_debug]
libPrefix=Debug
[sharedlib,storm_release]
libPrefix=Release
[sharedlib,storm_slow]
libPrefix=Slow
