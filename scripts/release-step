#!/bin/bash

# A single step in the build process.
# Executed once for each architecture (typically on different machines).

# Parameters are: <archlist> <version> <hash> <release-notes>
# Where:
# <archlist> is a list of build instructions. Separated by commas. See 'release-full' for specification.
# <version> is the current version
# <hash> is the hash of the current Git-commit
# <release-notes> is a file containing the release notes (we might not have the latest tags)

archlist="$1"
version="$2"
hash="$3"
notes="$4"
export notes

# Tar the relevant files into one, so we can transmit it through ssh conveniently.
function tar_files {
    cd $STORM_ROOT/release
    if [[ -f $notes ]]
    then
	if [[ $notes != $STORM_ROOT/release/release_notes.txt ]]
	then
	    cp $notes $STORM_ROOT/release/release_notes.txt
	fi
    else
	release-notes > $STORM_ROOT/release/release_notes.txt
    fi
    shopt -s nullglob
    tar cz release_notes.txt doc.tar.gz storm_*.{zip,tar.gz}
}

# Parse the archlist and do what it says.
while [[ $archlist != "" ]]
do
    first="${archlist%%,*}"
    if [[ $archlist == *,* ]]
    then
	archlist="${archlist#*,}"
    else
	archlist=""
    fi

    if [[ $first == *@* ]]
    then
	echo "Continuing build at ${first}..."
	tar_files | ssh "$first" '~/build-storm.sh' "$archlist" "$version" "$hash" || exit 1;
	exit 0;

    elif [[ $first == *:* ]]
    then
	archtag="${first%%:*}"
	command="${first#*:}"
	echo "----- Building ${archtag}... -----"

	if [[ $archtag == *_win* ]]
	then
	    packext="zip"
	else
	    packext="tar.gz"
	fi

	release-compile "$archtag" "$command" "$version" || { echo "Compilation of $archtag failed."; exit 1; }
	release-package "$archtag" "$command" "$notes" || { echo "Failed to package $archtag."; exit 1; }
	release-test $STORM_ROOT/release/storm_$archtag.$packext || { echo "The packaged compiler ($archtag) does not seem to be working."; exit 1; }
    else
	echo "ERROR: Unknown build command: ${first}"
	exit 1
    fi

done

exit 0
