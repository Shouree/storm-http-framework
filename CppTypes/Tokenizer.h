#pragma once
#include "SrcPos.h"

/**
 * Token generated by the tokenizer.
 */
class Token {
public:
	inline Token(const String &token, const SrcPos &pos) : token(token), pos(pos) {}

	// Contents of this token.
	String token;

	// Where is the starting point of this token?
	SrcPos pos;

	// Compare the actual token.
	inline bool operator ==(const Token &o) const { return token == o.token; }
	inline bool operator !=(const Token &o) const { return token != o.token; }
	inline bool operator ==(const String &o) const { return token == o; }
	inline bool operator !=(const String &o) const { return token != o; }

	// Empty token?
	inline bool empty() const { return token.size() == 0; }

	// Is this a string?
	bool isStr() const;

	// Extract the string from the token. Assumes isStr().
	String strVal() const;
};

// Output.
wostream &operator <<(wostream &to, const Token &t);


/**
 * Tokenizer designed to properly tokenize the contents of .bnf files.
 * Handles strings and basic operators (including ()[] and {}).
 * Also handles comments. Comments have the form // ... \n
 * NOTE TO SELF: / * ... * / leaves a / as an artifact! This does not break anything,
 * and is therefore not fixed yet.
 */
class Tokenizer : NoCopy {
public:
	// Tokenize data in 'SrcPos::files[pathId]' from 'start'.
	Tokenizer(nat pathId);

	// Get the next token in the stream. Throws an exception if the end of stream
	// has been reached.
	Token next();

	// Skip current token.
	void skip();

	// Peek.
	Token peek();

	// More tokens to get?
	bool more() const;

	// Get a token and see it is the correct one.
	void expect(const String &s);

	// Skip the current token if it is 'str'.
	bool skipIf(const String &s);

private:
	// Source string.
	const String src;

	// Source id.
	nat pathId;

	// Current position.
	nat pos;

	// Current SrcPos.
	SrcPos srcPos;

	// Different states of the tokenizer.
	enum State {
		sStart,
		sText,
		sOperator,
		sString,
		sComment,
		sMlComment,
		sPreproc,
		sPreprocExtend,
		sDone,
	};

	// The next found token.
	Token nextToken;

	// Find the next token.
	Token findNext();

	// Do one step in the state-machine.
	void processChar(nat &start, State &state);

	// Advance a srcPos.
	void advance(SrcPos &pos, nat from, nat to) const;
};
