Protocol
=========

All messages start with a null byte. Everything else is interpreted as text and outputted verbatim to the output.

Entries are encoded as follows:
First byte  	    Meaning
0x00  		    nil.
0x01  		    cons. read two entries.
0x02		    number. read 4 bytes in network order
0x03		    string. read 4 bytes size and then n bytes in utf-8
0x04		    symbol. new symbol, read 4 bytes for its id, then a string.
0x05		    symbol. read 4 bytes, look up in the hash table.

Note: symbols are stored in a hash table for the server and the client. The server starts at high
id:s while the client starts allocating symbols at low id:s. Note that the server and the client
might accidentally allocate different id:s for the same symbol. This is not a problem.

Messages
=========

Messages are sent as a list of at least one element, where the first element is a symbol describing
the type of the message. Any remaining parameters depend on the message type that was sent.

Messages sent from a client to the server:

Message	                      Description
(quit)	 	 	      Asks the Storm process to quit.
(open id path content)	      Open a new file from 'path', hereby referred to as 'id' containing 'content'.
                              This is considered edit #0.
(close id)    		      Close a previously opened file.
(edit file id from to text)   The file 'file' has been changed. This is edit number 'id'. The text between
                              'from' and 'to' is replaced by 'text'.
(test ...)		      Messages used for testing the protocol. See below.
(debug id mode)		      Output the internal representation of file 'id'. Used when debugging.
(recolor id)		      Re-color file 'id'.


Messages sent from the server to a client:
(color file id start colors)  Color 'file' using information from edit #'id'. Start at character 'start'
                              and color the next '(nth 0 colors)' using '(nth 1 colors)' and so on. Note:
			      'colors' is inlined in the list.
(test ...)		      Messages used for testing the protocol. See below.


Colors
=======

Colore are sent as symbols, nil erases any coloring present.

comment
delimiter
string
constant
keyword
fn-name
var-name
type-name


Tests
======

To test the implementation of the protocol (ie. the low-level layer), there is a class of messages
for testing. These all start with (test ...). Due to the architecture, tests are driven by the
client.

These are the messages the server understands:

Message                    Description
(test start)		   Clears any test state.
(test stop)		   Sends any pending messages.
(test sum ...)		   Stores a sum of all entries following 'recv'. This makes (test stop)
                	   send (test sum <sum>).
(test send n msg between)  Send 'n' copies of 'msg', adding the string 'between' between each instance.
