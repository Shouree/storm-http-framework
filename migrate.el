(defun replace-all (regex replace)
  (goto-char 0)
  (while (re-search-forward regex nil t)
    (replace-match replace nil nil)))

(defun fix-file ()
  (interactive "*")
  (let ((last (point)))
    (replace-all "MAP_PP(\\([A-Za-z]+\\), \\([A-Za-z]+\\))" "Map<\\1 *, \\2 *>")
    (replace-all "MAP_PV(\\([A-Za-z]+\\), \\([A-Za-z]+\\))" "Map<\\1 *, \\2>")
    (replace-all "MAP_VP(\\([A-Za-z]+\\), \\([A-Za-z]+\\))" "Map<\\1, \\2 *>")
    (replace-all "Auto<\\([A-Za-z<>*, :]+?\\)> " "\\1 *")
    (replace-all "Par<\\([A-Za-z<>*, :]+?\\)> " "\\1 *")
    (replace-all "MAYBE(Auto<\\([A-Za-z<>*, :]+?\\)>)" "MAYBE(\\1 *)")
    (replace-all "MAYBE(Par<\\([A-Za-z<>*, :]+?\\)>)" "MAYBE(\\1 *)")
    (replace-all "ArrayP<\\([A-Za-z<>:]+?\\)> ?" "Array<\\1 *>")
    (replace-all " bs::\\([A-Z]\\)" " \\1")
    (replace-all "\\*bs::\\([A-Z]\\)" "*\\1")
    (replace-all "STORM_VAR " "")
    (replace-all "\\.borrow()" "")
    (replace-all "\\.ret()" "")
    (replace-all "\\.size()" "->count()")
    (replace-all "\\.push_back(" "->push(")
    (replace-all "CREATE(\\([A-Za-z]+\\), \\([A-Za-z]+\\), " "new (\\2) \\1(")
    (replace-all "\\([a-z]\\)\\[\\([A-Za-z +-*]+\\)\\]" "\\1->at(\\2)")
    (replace-all "\\([A-Za-z.]+\\)\\.as<\\([A-Za-z]+\\)>()" "as<\\2>(\\1)")
    (goto-char last)))
