* Core [7/50]

 - [ ] It might make sense to split core.lang into two packages; one with tools for generating languages and another
   which contains the template classes (like ArrayType) that are more internal to Storm.

 - [ ] Check the deepCopy function of Array (probably of strings, could be of Value as well), it seems to get into an
   infinite loop sometimes due to incorrectly set vtables (vtable entry points to vtable stub).

 - [ ] Check so that the toS function for all types using the Handle are dispatching to a correct thread!

 - [ ] Take care of Map<T, U> in the preprocessor. Maybe generalize a bit?

 - [ ] Implement some clever solution regarding iterators and deepCopy.

 - [ ] Re-think the equals() in object! Idea: use a global equals with cached specific implementations in Type. This
   can also be used to implement > < and others!

 - [ ] Maybe ctors for objects should take their first parameter as non-reference to be consistent with the convention?

 - [ ] Do not require a copy ctor on C++-objects that are ObjectOn<Xxx>

 - [ ] Include float/non float inside Size?

 - [ ] Check return type of overloads.

 - [ ] When converting a value of -1.ind to an int, we get a value of -<something large>, it should rather be zero.

 - [ ] Think about how templates interacts with the new function lookup with respect to typecasts.

 - [ ] Move Memorymanager to Code? We can actually elliminate the need of the MemoryManager entirely by using a custom heap
   with the flag HEAP_CREATE_ENABLE_EXECUTE (to HeapCreate).

 - [ ] Check so that threads are created on the correct thread when created from copyObject and similar.

 - [ ] Think about how templates interacts with the new function lookup with respect to typecasts.

 - [ ] Some kind of fuzzy equals for floating-point values.

 - [ ] Move Code/Codecall somewhere else?

 - [ ] Implement (safe) unions. Eg: Int | Float foo() returns either an int or a float.

 - [ ] Some kind of versioning scheme when connecting DLLS and the Storm executable is required.

 - [ ] Rename Shared/ to Lib/ ?

 - [ ] Do not make a big deal out of values that have no deepCopy function, they probably do not need it,
   alternatively generate a default one or warn early if absent.

 - [ ] The Maybe<> type inherits from object. This may be bad since programs may assume that regular object pointers are never null!

 - [ ] Replace functions that take 'name' + 'params' with a version that takes 'NamePart' instead. Expose to Storm where possible.

 - [ ] Make sure that lazy-loading packages like 'Lang' does not succeed on Windows when the folder is named 'lang'.

 - [ ] Maybe move thread calls to be another level of lookup as well? This would simplify the implementation of FnPtr,
   since it would not have to deal with copying parameters.

 - [ ] Make sure to decrease the stack size in UThread after this is done!

 - [ ] When calling functions on other threads, we should use the same CloneEnv for all parameters!

 - [ ] Replace the parameter CodeResult with a return value? Is this possible?

 - [ ] Enable the SyntaxRules among others to be accessible from Storm.

 - [ ] Check all classes in the compiler and consider adding a thread identifier to them.

 - [ ] Check all classes for the need of a copy ctor and deepCopy function!

 - [ ] Optimize the ArrayTemplate lookup somewhat.

 - [ ] The size of built-in types is not entirely correct at the moment. The current architecture's size is
   used for both values in Size at the moment, which will not work when running saved code from x86 on x86-64.

 - [ ] For member variables: make them use references instead of hard-coding offsets directly.

 - [ ] Check for circular dependencies while loading packages. Eg. .sto language requires core.lang, which contains a .sto file.

 - [ ] Note: The current solution of allocating VTables "too large" only works if we know all C++ types at startup. This
   is not neccessarily true when we implement dynamic library loading!

 - [ ] Replace TypeError(x, L".....") with TypeError(x, from, to);

 - [ ] Allow to store comments or documentation on various objects in the compiler. For example, packages
   may store their documentation in regular .txt files placed in the package itself.

 - [ ] Check overloads with derived types. Eg base:foo(Base a), derived:foo(Derived a) is _not_ legal. The other way is!

 - [ ] Overloads with derived types: pick the "best" overload in some sense.

 - [ ] A lot of parameter-generating code can now be rewritten much nicer using the 'moveParam' function in Code::frame.

 - [ ] See why Storm crashes when the root rule gets an invalid number of parameters. Seems like we free/forget to free an
   object somewhere...

 - [ ] Implement an interactive way of coding using 'reverse parsers'. In this case, it would be an autocomplete that
   knows the syntax and suggests all valid parts at the cursor position. It may not be able to suggest names, but it 
   could suggest syntax constructions.

 - [X] Test and document the foo: generate()-syntax.

 - [X] Make it possible to nest classes in C++ as well. Currently, everything works, but the inner class is not inside the
   outer class in Storm. This probably needs a re-structuring of the format outputted by the pre-processor. Needed for 
   Str:Iter. It seems like nesting classes confuses the preprocessor as well. Referring to the inner class in the outer class
   does not work without a full qualifier.

 - [X] Str::removeIndent seems to be removing the entire first line of it's input.

 - [X] Better regex engine that does not cause stack overflows as easily... Easy example: [^abc]* to <long string without abc>
   This is bad for example in the rule SkipBlock when running on a UThread. Try parsing lang.bs.main.bs in a UThread.

 - [X] Turns out that the test:bs:NoToS does not get initialized properly if one creates an instance of
   it. Furthermore, returning it in the top-loop makes the compiler crash.

 - [X] New regex parser written. Verify.

 - [X] Why does map["hello"] not work?
* Syntax [0/10]
 - [ ] For the new syntax, make sure we're running relevant parts on the correct threads!

 - [ ] Make it possible to capture raw parts of the syntax tree, to delay the transformation to 'raw'
   objects until other parts of the syntax tree have been evaluated.

 - [ ] Check so that *, + and ? are greedy in ambiguous cases!

 - [ ] Include use statements (or similar) for types inside the syntax files.

 - [ ] Something weird is going on when parsing expressions like: &a.foo(). If the priority of the
   fnPtr-rule is decreased from 20 to 10, it parses like this: (&a).foo(), which is strange because
   there are no other ambiguous options in the same rule that should interfere. Investigate!

 - [ ] Some kind of namespace support for the syntax rules. For example: the delimiter in BF and BS are quite different!

 - [ ] Consider adding the -> syntax for captures in BNF rules, to be symmetric with other variables.

 - [ ] In the parser: allow member variables to be assigned by the -> syntax as well! Useful in various places
   in Basic.

 - [ ] Make sure we are only working on types either specified as belonging to the compiler thread or no thread.

 - [ ] Also - return types for rules may be specified.

 - NOTE: Note to self: Parsing works _bad_ on rules like this: ( DELIMITER )*.

* Code generation [1/9]

 - [ ] Make sure to destroy objects in reverse creation order, both in Binary.cpp (exception handling) and
   during regular cleanup.

 - [ ] Replace RefSource with a hierarchy where RefSource can keep track of which References are used by
   that reference. Thereby it will be possible to delay removing the contents of Binary objects
   whenever the entire cycle has been removed and check for usages in the compiler.

 - [ ] Optimization pass in Code that looks for the pattern: addRef -> never written -> release() in dtor.

 - [ ] Rename Value to Operand to avoid confusion?

 - [ ] Check thread safety in the reference management class.

 - [ ] See if we can generate better machine code for mov [memory], 0. Currently the zero uses 4 bytes.

 - [ ] The Frame::prev() function currently does not traverse from a regular variable to the function parameters.
   It should probably do that, but that may confuse already existing code.

 - [ ] Separate data and code in the listing so that strange op-codes can not be formed using dat() anywhere?

 - [X] In the reference system, Reference should instead of containing a human-readable string contain some kind
   of reference to what it provides (at least in most cases), so that the reference system can do a graph
   search to find islands of code that are separated from the rest of the references.

* Basic Storm [4/20]

 - [ ] Make sure strings are stored as shorts in the generated machine code (currently not possible due to
   limitations in the Code backend).

 - [ ] Implement support for setter functions. The preprocessor seems to have support for them already.

 - [ ] In lang:bs:macro, make sure that ReferNamed uses a symbolic reference instead of hard-coding the address
   as it does now.

 - [ ] See if we need to check if the expression generated for the return statement (and automatically 
   in functions) is actually a reference, and needs to be de-referenced before.

 - [ ] Variable accesses are currently racy. Fix this!

 - [ ] It seems it is not legal to do something like: Str("Foo") without taking care of the return value.

 - [ ] Remove the special TypeName class, use the general Name instead.

 - [ ] Implement proper typechecking for the array initialization literal, now the error messages generated when
   using these are really bad.

 - [ ] check the lifetime of temporary objects! It is currently too long (same as the enclosing block, should
   be something like the same statement instead).

 - [ ] The shorthand for function pointers (fn()->v) is ambiguous when used with maybe, like: fn()->Foo?

 - [ ] Operators should not only look for the operator in the currently visible scope, but also in the
   scope where the lhs and rhs types have been defined.

 - [ ] Allow function pointers (that are not ambiguous) to be specified without their formal parameter types.

 - [ ] Allow the dot operator to be used as scope resolution as well (maybe another in BS? like in cpp?)

 - [ ] Exceptions while running copy-constructors to functions may cause leaks at the moment, since Code does not
   support attaching exception handlers to the values we have copied with fnParam.

 - [ ] The # operator may behave slightly odd if someone overrides the core:StrBuf class locally, fix this by resolving
   packages from the root always (not urgent).

 - [ ] Synonymous to unless (x as Foo) that evaluates to the result or returns, eg. var x = x as Foo or return 3;

 - [X] Inverse to the if (x as Foo) statement. Maybe: unless (x as Foo) return 3;

 - [X] A shorthand for doing 'if (x)' and 'if (x as Foo)' on things inside another object would be nice, maybe
   'if (y = x.y)' and 'if (y = x.y as Foo)'?

 - [X] Implement proper type-checking for return. Ie, expressions in which a return occurs should return a special
   type indicating that they do not return any value, and that they therefore should not generate an ambiguous type
   in eg. if-statements.

 - [X] Implement return.

* Gui [0/3]

 - [ ] The 'close after x seconds' operation used in test:ui:main does not seem to work twice in a single session.

 - [ ] Think about the threading model. Is it possibe (and a good idea) to create new UThreads for new messages, so that
   a bad message handler does not block everything? This could interfere with Win32:s expectations (lots of global state).

 - [ ] Currently: parts of the message loop may be executed from other UThreads than the intended one (possibly interleaving),
   which could confuse parts of the Win32-api. This is caused by calling Create for example.

* Others [0/5]
 - [ ] Make sure that the Lib/ directory is created if needed during initial builds.

 - [ ] Verify that exceptions thrown in constructors are actually correctly propagated. Calling create1<DbgVal>(null) does
   not crash for some reason...

 - [ ] Check exceptions in UThreads!

 - [ ] Remove Printable::toS(), use the global toS() instead?

 - [ ] Fix casing of StdAfx to stdafx in some files.

* Future DSL:s [0/4]

 - [ ] SQL

 - [ ] Parallel computing language, implemented using OpenCL or DirectCompute.

 - [ ] Layout language

 - [ ] Reactive programming

* Future test cases [0/2]

 - [ ] Extend a class with an inlined function, and override that function.

 - [ ] Compilation error in a function => ensure so that the next invocation returns the same error.

